/*******************************************************************************
 * Misc_PlayerSettings generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Misc_PlayerSettings extends Object
    config(PlayerSettings3SPNCW)
    perobjectconfig;

struct BrightSkinsSettings
{
    var bool bUseBrightSkins;
    var bool bUseTeamColors;
    var Color RedOrEnemy;
    var Color BlueOrAlly;
    var Color Yellow;
    var bool bUseTeamModels;
    var bool bForceRedEnemyModel;
    var bool bForceBlueAllyModel;
    var string RedEnemyModel;
    var string BlueAllyModel;
};

struct ColoredNamesSettings
{
    var bool bEnableColoredNamesInTalk;
    var bool bEnableColoredNamesOnScoreboard;
    var bool bEnableColoredNamesOnHUD;
    var bool bAllowColoredMessages;
    var bool bEnableColoredNamesOnEnemies;
    var bool bEnableTeamColoredDeaths;
    var bool bDrawColoredNamesInDeathMessages;
    var Color colorname[20];
};

struct MiscSettings
{
    var bool bDisableSpeed;
    var bool bDisableBooster;
    var bool bDisableBerserk;
    var bool bDisableInvis;
    var bool bMatchHUDToSkins;
    var bool bShowTeamInfo;
    var bool bShowCombos;
    var bool bExtendedInfo;
    var bool bPlayOwnFootsteps;
    var bool bAutoScreenShot;
    var bool bUseHitSounds;
    var bool bEnableEnhancedNetCode;
    var bool bDisableEndCeremonySound;
    var float SoundHitVolume;
    var float SoundAloneVolume;
    var bool AutoSyncSettings;
};

var config bool Existing;
var config BrightSkinsSettings BrightSkins;
var config ColoredNamesSettings ColoredNames;
var config MiscSettings Misc;

static function Misc_PlayerSettings LoadPlayerSettings(Misc_Player P)
{
    local Misc_PlayerSettings PlayerSettings, NewPlayerSettings;
    local string OwnerID, PlayerName, StatsID;

    StatsID = class'Misc_Util'.static.GetStatsID(P);
    // End:0x93
    if(StatsID != "")
    {
        NewPlayerSettings = Misc_PlayerSettings(FindObject("Package." $ StatsID, class'Misc_PlayerSettings'));
        // End:0x6B
        if(NewPlayerSettings == none)
        {
            NewPlayerSettings = new (none, StatsID) class'Misc_PlayerSettings';
        }
        // End:0x93
        if((NewPlayerSettings != none) && NewPlayerSettings.Existing == true)
        {
            return NewPlayerSettings;
        }
    }
    PlayerName = class'Misc_Util'.static.StripColor(P.PlayerReplicationInfo.PlayerName);
    ReplaceText(PlayerName, " ", "_");
    ReplaceText(PlayerName, "]", "_");
    OwnerID = (P.GetPlayerIDHash() $ "_") $ PlayerName;
    PlayerSettings = Misc_PlayerSettings(FindObject("Package." $ OwnerID, class'Misc_PlayerSettings'));
    // End:0x147
    if(PlayerSettings == none)
    {
        PlayerSettings = new (none, OwnerID) class'Misc_PlayerSettings';
    }
    // End:0x1F1
    if((NewPlayerSettings != none) && NewPlayerSettings.Existing == false)
    {
        NewPlayerSettings.Existing = PlayerSettings.Existing;
        NewPlayerSettings.BrightSkins = PlayerSettings.BrightSkins;
        NewPlayerSettings.ColoredNames = PlayerSettings.ColoredNames;
        NewPlayerSettings.Misc = PlayerSettings.Misc;
        NewPlayerSettings.SaveConfig();
        return NewPlayerSettings;
    }
    return PlayerSettings;
    //return;    
}

static function SavePlayerSettings(Misc_PlayerSettings PlayerSettings)
{
    PlayerSettings.Existing = true;
    PlayerSettings.SaveConfig();
    StaticSaveConfig();
    //return;    
}
