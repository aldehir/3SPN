/*******************************************************************************
 * Freon_Trigger generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Freon_Trigger extends Trigger
    dependson(Freon_GRI);

var Freon_Pawn PawnOwner;
var array<Freon_Pawn> Toucher;
var int Team;
var Sound ThawSound;
var Sound TouchSound;
var float ThawSpeed;
var float AutoThawTime;
var float FrozeTime;
var float FastThawModifier;
var bool bTeamHeal;

function PostBeginPlay()
{
    super.PostBeginPlay();
    PawnOwner = Freon_Pawn(Owner);
    // End:0x26
    if(PawnOwner == none)
    {
        Destroy();
        return;
    }
    AutoThawTime = Freon_GRI(Level.GRI).AutoThawTime;
    ThawSpeed = FMax(Freon_GRI(Level.GRI).ThawSpeed, 0.50);
    bTeamHeal = Freon_GRI(Level.GRI).bTeamHeal;
    Team = PawnOwner.GetTeamNum();
    // End:0xBB
    if(Team == 255)
    {
        Destroy();
        return;
    }
    SetBase(PawnOwner);
    SetTimer(0.50, true);
    //return;    
}

function OwnerFroze()
{
    FrozeTime = Level.TimeSeconds;
    GotoState('PawnFrozen');
    //return;    
}

function Touch(Actor Other)
{
    local Freon_Pawn Touch;

    // End:0x35
    if(((Other == Owner) || !IsRelevant(Other)) || Freon_Pawn(Other) == none)
    {
        return;
    }
    Touch = Freon_Pawn(Other);
    // End:0x99
    if(!Touch.bFrozen && Touch.GetTeamNum() == Team)
    {
        Toucher.Length = Toucher.Length + 1;
        Toucher[Toucher.Length - 1] = Touch;
    }
    //return;    
}

function UnTouch(Actor Other)
{
    // End:0x3E
    if(((PawnOwner != none) && Other != Owner) && Freon_Pawn(Other) != none)
    {
        RemoveToucher(Freon_Pawn(Other));
    }
    super.UnTouch(Other);
    //return;    
}

function PlayerToucherDied(Pawn P)
{
    // End:0x40
    if((Freon_Pawn(P) != none) && Freon_Pawn(P).GetTeamNum() == Team)
    {
        RemoveToucher(Freon_Pawn(P));
    }
    super.PlayerToucherDied(P);
    //return;    
}

function RemoveToucher(Freon_Pawn P)
{
    local int i;

    i = 0;
    J0x07:
    // End:0x44 [Loop If]
    if(i < Toucher.Length)
    {
        // End:0x3A
        if(Toucher[i] == P)
        {
            Toucher.Remove(i, 1);
            return;
        }
        ++ i;
        // [Loop Continue]
        goto J0x07;
    }
    //return;    
}

function OwnerDied()
{
    Destroy();
    //return;    
}

function Destroyed()
{
    Toucher.Remove(0, Toucher.Length);
    //return;    
}

function bool TellBotToThaw(Bot B)
{
    // End:0x67
    if(B.Pawn.ReachedDestination(PawnOwner))
    {
        // End:0x67
        if((B.Enemy != none) && B.EnemyVisible())
        {
            B.DoRangedAttackOn(B.Enemy);
            return true;
        }
    }
    // End:0xBF
    if(B.actorReachable(PawnOwner))
    {
        B.MoveTarget = PawnOwner;
        B.GoalString = "Trying to thaw";
        B.SetAttractionState();
        return true;
    }
    return false;
    //return;    
}

function Timer()
{
    local int i, mosthealth;
    local float HealthGain, Touchers, AverageDistance;

    // End:0x46
    if(Team_GameBase(Level.Game).bEndOfRound || Team_GameBase(Level.Game).EndOfRoundTime > 0)
    {
        return;
    }
    // End:0x1C2
    if(bTeamHeal && Toucher.Length > 0)
    {
        i = 0;
        J0x64:
        // End:0x116 [Loop If]
        if(i < Toucher.Length)
        {
            // End:0xAC
            if(Toucher[i].Health > mosthealth)
            {
                mosthealth = Toucher[i].Health;
            }
            // End:0xD3
            if(Toucher[i].bThawFast)
            {
                Touchers += FastThawModifier;
            }
            // End:0xDF
            else
            {
                Touchers += 1.0;
            }
            AverageDistance += VSize(PawnOwner.Location - Toucher[i].Location);
            ++ i;
            // [Loop Continue]
            goto J0x64;
        }
        // End:0x1C2
        if(PawnOwner.Health < mosthealth)
        {
            AverageDistance /= float(i);
            // End:0x17D
            if(AverageDistance <= 100.0)
            {
                HealthGain = (float(mosthealth) / (float(Max(int(0.00010), int(ThawSpeed))) * 2.50)) * Touchers;
            }
            // End:0x1A7
            else
            {
                HealthGain = float(mosthealth / (Max(int(0.00010), int(ThawSpeed)) * 5)) * Touchers;
            }
            PawnOwner.GiveHealth(int(HealthGain), mosthealth);
        }
    }
    //return;    
}

state PawnFrozen
{
    function Touch(Actor Other)
    {
        local Freon_Pawn Touch;

        // End:0x35
        if(((Other == Owner) || !IsRelevant(Other)) || Freon_Pawn(Other) == none)
        {
            return;
        }
        Touch = Freon_Pawn(Other);
        // End:0xAA
        if(!Touch.bFrozen && Touch.GetTeamNum() == Team)
        {
            Toucher.Length = Toucher.Length + 1;
            Toucher[Toucher.Length - 1] = Touch;
            PawnOwner.PlaySound(TouchSound);
        }
        //return;        
    }

    function Timer()
    {
        local int i, mosthealth;
        local float HealthGain, Touchers, AverageDistance;

        // End:0x10
        if(PawnOwner == none)
        {
            Destroy();
            return;
        }
        // End:0x56
        if(Team_GameBase(Level.Game).bEndOfRound || Team_GameBase(Level.Game).EndOfRoundTime > 0)
        {
            return;
        }
        // End:0x1EB
        if(Toucher.Length > 0)
        {
            // End:0xB3
            if(PlayerController(PawnOwner.Controller) != none)
            {
                PlayerController(PawnOwner.Controller).ReceiveLocalizedMessage(class'Freon_ThawMessage', 2, Toucher[i].PlayerReplicationInfo);
            }
            i = 0;
            J0xBA:
            // End:0x16C [Loop If]
            if(i < Toucher.Length)
            {
                // End:0x102
                if(Toucher[i].Health > mosthealth)
                {
                    mosthealth = Toucher[i].Health;
                }
                // End:0x129
                if(Toucher[i].bThawFast)
                {
                    Touchers += FastThawModifier;
                }
                // End:0x135
                else
                {
                    Touchers += 1.0;
                }
                AverageDistance += VSize(PawnOwner.Location - Toucher[i].Location);
                ++ i;
                // [Loop Continue]
                goto J0xBA;
            }
            AverageDistance /= float(i);
            // End:0x1BA
            if(AverageDistance <= 100.0)
            {
                HealthGain += (((100.0 / float(Max(int(0.00010), int(ThawSpeed)))) * 0.50) * Touchers);
            }
            // End:0x1E8
            else
            {
                HealthGain += (((100.0 / float(Max(int(0.00010), int(ThawSpeed)))) * 0.250) * Touchers);
            }
        }
        // End:0x214
        else
        {
            // End:0x214
            if(AutoThawTime > 0.0)
            {
                HealthGain += ((100.0 / AutoThawTime) * 0.50);
            }
        }
        PawnOwner.DecimalHealth += HealthGain;
        // End:0x286
        if(PawnOwner.DecimalHealth >= 1.0)
        {
            HealthGain = float(int(PawnOwner.DecimalHealth));
            PawnOwner.DecimalHealth -= HealthGain;
            PawnOwner.GiveHealth(int(HealthGain), 100);
        }
        // End:0x36F
        if(PawnOwner.Health == 100)
        {
            PawnOwner.DecimalHealth = 0.0;
            // End:0x2EA
            if(PlayerController(PawnOwner.Controller) != none)
            {
                PlayerController(PawnOwner.Controller).ClientPlaySound(ThawSound);
            }
            PawnOwner.PlaySound(ThawSound, 3, PawnOwner.TransientSoundVolume * 1.50,, PawnOwner.TransientSoundRadius * 1.50);
            // End:0x352
            if(Toucher.Length > 0)
            {
                PawnOwner.ThawByTouch(Toucher, float(mosthealth));
            }
            // End:0x361
            else
            {
                PawnOwner.Thaw();
            }
            // End:0x36F
            if(PawnOwner == none)
            {
                Destroy();
            }
        }
        //return;        
    }
    stop;    
}

defaultproperties
{
    Team=255
    ThawSound=Sound'WeaponSounds.BaseGunTech.BGrenfloor1'
    TouchSound=Sound'Sounds.Touch'
    ThawSpeed=5.0
    AutoThawTime=60.0
    FastThawModifier=1.50
    bTeamHeal=true
    TriggerType=6
    bHardAttach=true
    CollisionRadius=200.0
    CollisionHeight=100.0
}