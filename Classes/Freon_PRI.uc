/*******************************************************************************
 * Freon_PRI generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Freon_PRI extends Misc_PRI
    dependson(Freon_Player)
    dependson(Freon_Bot)
    dependson(Misc_PawnReplicationInfo)
    hidecategories(Movement,Collision,Lighting,LightColor,Karma,Force);

var Color FrozenColor;
var localized string FrozenString;
var int Thaws;
var int Git;

simulated function string GetLocationName()
{
    // End:0xBE
    if(bOutOfLives && !bOnlySpectator)
    {
        // End:0x34
        if((PlayerVolume == none) && PlayerZone == none)
        {
            return default.StringDead;
        }
        // End:0x71
        if((PlayerVolume != none) && PlayerVolume.LocationName != class'Volume'.default.LocationName)
        {
            return PlayerVolume.LocationName;
        }
        // End:0xA2
        if((PlayerZone != none) && PlayerZone.LocationName != "")
        {
            return PlayerZone.LocationName;
        }
        return class'DMStatsScreen'.static.MakeColorCode(FrozenColor) $ default.FrozenString;
    }
    return super.GetLocationName();
    //return;    
}

simulated function string GetLocationNameTeam()
{
    local float Percent;
    local string Name;

    // End:0x115
    if(bOutOfLives && !bOnlySpectator)
    {
        // End:0x37
        if((PlayerVolume == none) && PlayerZone == none)
        {
            return default.StringDead;
        }
        // End:0xD6
        else
        {
            // End:0x7C
            if((PlayerVolume != none) && PlayerVolume.LocationName != class'Volume'.default.LocationName)
            {
                Name = PlayerVolume.LocationName;
            }
            // End:0xD6
            else
            {
                // End:0xB5
                if((PlayerZone != none) && PlayerZone.LocationName != "")
                {
                    Name = PlayerZone.LocationName;
                }
                // End:0xD6
                else
                {
                    Name = class'DMStatsScreen'.static.MakeColorCode(FrozenColor) $ default.FrozenString;
                }
            }
        }
        Percent = float(PawnReplicationInfo.Health) / 100.0;
        return ((Name $ "[") $ string(int(Percent * float(100)))) $ "%]";
    }
    return GetLocationName();
    //return;    
}

function UpdatePlayerLocation()
{
    local Controller C;
    local Pawn P;
    local Volume V, Best;

    C = Controller(Owner);
    // End:0x9D
    if(C != none)
    {
        // End:0x48
        if(!bOutOfLives || bOnlySpectator)
        {
            P = C.Pawn;
        }
        // End:0x9D
        else
        {
            // End:0x74
            if(Freon_Player(C) != none)
            {
                P = Freon_Player(C).FrozenPawn;
            }
            // End:0x9D
            else
            {
                // End:0x9D
                if(Freon_Bot(C) != none)
                {
                    P = Freon_Bot(C).FrozenPawn;
                }
            }
        }
    }
    // End:0xB8
    if(P == none)
    {
        PlayerVolume = none;
        PlayerZone = none;
        return;
    }
    // End:0xEE
    if(PlayerZone != P.Region.Zone)
    {
        PlayerZone = P.Region.Zone;
    }
    // End:0x175
    foreach P.TouchingActors(class'Volume', V)
    {
        // End:0x120
        if(V.LocationName == "")
        {
            continue;            
        }
        // End:0x152
        if((Best != none) && V.LocationPriority <= Best.LocationPriority)
        {
            continue;            
        }
        // End:0x174
        if(V.Encompasses(P))
        {
            Best = V;
        }        
    }    
    // End:0x190
    if(PlayerVolume != Best)
    {
        PlayerVolume = Best;
    }
    //return;    
}

defaultproperties
{
    FrozenColor=(R=170,G=185,B=210,A=255)
    FrozenString="Frozen"
    PawnInfoClass=class'Freon_PawnReplicationInfo'
}