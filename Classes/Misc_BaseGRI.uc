/*******************************************************************************
 * Misc_BaseGRI generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Misc_BaseGRI extends GameReplicationInfo
    hidecategories(Movement,Collision,Lighting,LightColor,Karma,Force)
    config;

var string Version;
var string Acronym;
var int RoundTime;
var int RoundMinute;
var int CurrentRound;
var bool bEndOfRound;
var bool bGamePaused;
var int MinsPerRound;
var int OTDamage;
var int OTInterval;
var int StartingHealth;
var int StartingArmor;
var float MaxHealth;
var float CampThreshold;
var bool bKickExcessiveCampers;
var bool bForceRUP;
var int ForceRUPMinPlayers;
var bool bDisableSpeed;
var bool bDisableBooster;
var bool bDisableInvis;
var bool bDisableBerserk;
var int TimeOuts;
var bool EnableNewNet;
var string ShieldTextureName;
var string FlagTextureName;
var bool ShowServerName;
var bool FlagTextureEnabled;
var bool FlagTextureShowAcronym;
var string SoundAloneName;
var string SoundSpawnProtectionName;

replication
{
    // Pos:0x000
    reliable if(bNetInitial && Role == ROLE_Authority)
        Acronym, CampThreshold, 
        EnableNewNet, FlagTextureEnabled, 
        FlagTextureName, FlagTextureShowAcronym, 
        ForceRUPMinPlayers, MaxHealth, 
        MinsPerRound, OTDamage, 
        OTInterval, RoundTime, 
        ShieldTextureName, ShowServerName, 
        SoundAloneName, SoundSpawnProtectionName, 
        StartingArmor, StartingHealth, 
        TimeOuts, bDisableBerserk, 
        bDisableBooster, bDisableInvis, 
        bDisableSpeed, bForceRUP, 
        bKickExcessiveCampers

    // Pos:0x018
    reliable if((!bNetInitial && bNetDirty) && Role == ROLE_Authority)
        RoundMinute

    // Pos:0x03D
    reliable if(bNetDirty && Role == ROLE_Authority)
        CurrentRound, bEndOfRound, 
        bGamePaused
}

simulated function Timer()
{
    super.Timer();
    // End:0x5B
    if(Level.NetMode == NM_Client)
    {
        // End:0x3C
        if(RoundMinute > 0)
        {
            RoundTime = RoundMinute;
            RoundMinute = 0;
        }
        // End:0x5B
        if((RoundTime > 0) && !bStopCountDown)
        {
            -- RoundTime;
        }
    }
    //return;    
}

defaultproperties
{
    Version="3.210CW"
    EnableNewNet=true
}