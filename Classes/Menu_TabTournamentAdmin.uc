/*******************************************************************************
 * Menu_TabTournamentAdmin generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Menu_TabTournamentAdmin extends UT2K3TabPanel
    editinlinenew
    instanced;

var bool bAdmin;

function bool AllowOpen(string MenuClass)
{
    // End:0x1F
    if((UnresolvedNativeFunction_99() == none) || UnresolvedNativeFunction_99().PlayerReplicationInfo == none)
    {
        return false;
    }
    return true;
    //return;    
}

function InitComponent(GUIController MyController, GUIComponent MyOwner)
{
    local int i;
    local GameReplicationInfo GRI;

    super(GUIPanel).InitComponent(MyController, MyOwner);
    // End:0x1E
    if(Controls.Length == 0)
    {
        return;
    }
    GRI = UnresolvedNativeFunction_99().Level.GRI;
    // End:0xD4
    if(GRI != none)
    {
        // End:0x8C
        if(GRI.Teams[0] != none)
        {
            moEditBox(Controls[3]).SetText(string(GRI.Teams[0].Score));
        }
        // End:0xD4
        if(GRI.Teams[1] != none)
        {
            moEditBox(Controls[5]).SetText(string(GRI.Teams[1].Score));
        }
    }
    moCheckBox(Controls[6]).Checked(class'Misc_Player'.default.bAdminVisionInSpec);
    moCheckBox(Controls[7]).Checked(class'Misc_Player'.default.bDrawTargetingLineInSpec);
    moCheckBox(Controls[8]).Checked(class'Misc_Player'.default.bReportNewNetStats);
    bAdmin = (UnresolvedNativeFunction_99().PlayerReplicationInfo != none) && UnresolvedNativeFunction_99().PlayerReplicationInfo.bAdmin || UnresolvedNativeFunction_99().Level.NetMode == NM_Standalone;
    // End:0x1DA
    if(!bAdmin)
    {
        i = 1;
        J0x1AB:
        // End:0x1DA [Loop If]
        if(i < Controls.Length)
        {
            Controls[i].DisableMe();
            ++ i;
            // [Loop Continue]
            goto J0x1AB;
        }
    }
    UnresolvedNativeFunction_99(1.0, true);
    //return;    
}

function OnChange(GUIComponent C)
{
    local Misc_Player MP;
    local bool B;

    // End:0xD1
    if(moCheckBox(C) != none)
    {
        B = moCheckBox(C).IsChecked();
        // End:0x53
        if(C == Controls[6])
        {
            class'Misc_Player'.default.bAdminVisionInSpec = B;
        }
        // End:0x7B
        if(C == Controls[7])
        {
            class'Misc_Player'.default.bDrawTargetingLineInSpec = B;
        }
        // End:0xD1
        if(C == Controls[8])
        {
            class'Misc_Player'.default.bReportNewNetStats = B;
            MP = Misc_Player(UnresolvedNativeFunction_99());
            // End:0xD1
            if(MP != none)
            {
                MP.ServerReportNewNetStats(B);
            }
        }
    }
    class'Misc_Player'.static.StaticSaveConfig();
    //return;    
}

function bool OnClick(GUIComponent C)
{
    local Misc_Player MP;

    // End:0x0D
    if(!bAdmin)
    {
        return false;
    }
    MP = Misc_Player(UnresolvedNativeFunction_99());
    // End:0x28
    if(MP == none)
    {
        return false;
    }
    // End:0x78
    if(C == Controls[1])
    {
        MP.SetTeamScore(int(GUIEditBox(Controls[3]).TextStr), int(GUIEditBox(Controls[5]).TextStr));
    }
    return true;
    //return;    
}

function Timer()
{
    local bool bNewAdmin;
    local int i;

    bAdmin = true;
    bNewAdmin = UnresolvedNativeFunction_99().PlayerReplicationInfo.bAdmin || UnresolvedNativeFunction_99().Level.NetMode == NM_Standalone;
    // End:0x5A
    if(bNewAdmin == bAdmin)
    {
        return;
    }
    bAdmin = bNewAdmin;
    // End:0xAB
    if(!bAdmin)
    {
        i = 1;
        J0x79:
        // End:0xA8 [Loop If]
        if(i < Controls.Length)
        {
            Controls[i].DisableMe();
            ++ i;
            // [Loop Continue]
            goto J0x79;
        }
    }
    // End:0xE1
    else
    {
        i = 1;
        J0xB2:
        // End:0xE1 [Loop If]
        if(i < Controls.Length)
        {
            Controls[i].EnableMe();
            ++ i;
            // [Loop Continue]
            goto J0xB2;
        }
    }
    //return;    
}

defaultproperties
{
    begin object name=TabBackground class=GUIImage
        Image=Texture'InterfaceContent.Menu.ScoreBoxA'
        ImageColor=(R=0,G=0,B=0,A=255)
        ImageStyle=1
        WinHeight=1.0
        bNeverFocus=true
    object end
    // Reference: GUIImage'Menu_TabTournamentAdmin.TabBackground'
    Controls(0)=TabBackground
    begin object name=ApplyButton class=GUIButton
        Caption="Apply Score"
        StyleName="SquareMenuButton"
        WinTop=0.10
        WinLeft=0.490
        WinWidth=0.40
        WinHeight=0.10
        OnClick=OnClick
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIButton'Menu_TabTournamentAdmin.ApplyButton'
    Controls(1)=ApplyButton
    begin object name=RedScoreLabel class=GUILabel
        Caption="Red Score:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.10
        WinLeft=0.10
        WinWidth=0.250
        WinHeight=0.03750
    object end
    // Reference: GUILabel'Menu_TabTournamentAdmin.RedScoreLabel'
    Controls(2)=RedScoreLabel
    begin object name=RedScoreEditBox class=GUIEditBox
        WinTop=0.10
        WinLeft=0.20
        WinWidth=0.10
        WinHeight=0.03750
        OnActivate=InternalActivate
        OnDeActivate=InternalDeactivate
        OnKeyType=InternalOnKeyType
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIEditBox'Menu_TabTournamentAdmin.RedScoreEditBox'
    Controls(3)=RedScoreEditBox
    begin object name=BlueScoreLabel class=GUILabel
        Caption="Blue Score:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.160
        WinLeft=0.10
        WinWidth=0.250
        WinHeight=0.03750
    object end
    // Reference: GUILabel'Menu_TabTournamentAdmin.BlueScoreLabel'
    Controls(4)=BlueScoreLabel
    begin object name=BlueScoreEditBox class=GUIEditBox
        WinTop=0.160
        WinLeft=0.20
        WinWidth=0.10
        WinHeight=0.03750
        OnActivate=InternalActivate
        OnDeActivate=InternalDeactivate
        OnKeyType=InternalOnKeyType
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIEditBox'Menu_TabTournamentAdmin.BlueScoreEditBox'
    Controls(5)=BlueScoreEditBox
    begin object name=AdminVisionCheck class=moCheckBox
        Caption="Enable Wall Hack When Spectating."
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.280
        WinLeft=0.10
        WinHeight=0.03750
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabTournamentAdmin.AdminVisionCheck'
    Controls(6)=AdminVisionCheck
    begin object name=TargetingLineCheck class=moCheckBox
        Caption="Enable Targeting Tracking When Spectating."
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.340
        WinLeft=0.10
        WinHeight=0.03750
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabTournamentAdmin.TargetingLineCheck'
    Controls(7)=TargetingLineCheck
    begin object name=NewNetStatsCheck class=moCheckBox
        Caption="Enable NewNet Stats Reporting (Debug)."
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.40
        WinLeft=0.10
        WinHeight=0.03750
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabTournamentAdmin.NewNetStatsCheck'
    Controls(8)=NewNetStatsCheck
}