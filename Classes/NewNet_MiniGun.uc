/*******************************************************************************
 * NewNet_MiniGun generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class NewNet_MiniGun extends Minigun
    dependson(NewNet_MiniGunFire)
    dependson(NewNet_MiniGunAltFire)
    config(User)
    hidedropdown
    cacheexempt;

var NewNet_TimeStamp_Pawn t;
var TAM_Mutator M;

replication
{
    // Pos:0x000
    reliable if(Role < ROLE_Authority)
        NewNet_ServerStartFire
}

function DisableNet()
{
    NewNet_MiniGunFire(FireMode[0]).bUseEnhancedNetCode = false;
    NewNet_MiniGunFire(FireMode[0]).PingDT = 0.0;
    NewNet_MiniGunAltFire(FireMode[1]).bUseEnhancedNetCode = false;
    NewNet_MiniGunAltFire(FireMode[1]).PingDT = 0.0;
    //return;    
}

simulated function float RateSelf()
{
    // End:0x11
    if(Instigator == none)
    {
        return -2.0;
    }
    return super(Weapon).RateSelf();
    //return;    
}

simulated function BringUp(optional Weapon PrevWeapon)
{
    // End:0x0D
    if(Instigator == none)
    {
        return;
    }
    super(Weapon).BringUp(PrevWeapon);
    //return;    
}

simulated function bool PutDown()
{
    // End:0x0D
    if(Instigator == none)
    {
        return false;
    }
    return super.PutDown();
    //return;    
}

simulated event ClientStartFire(int Mode)
{
    // End:0x3D
    if((Level.NetMode != NM_Client) || !class'Misc_Player'.static.UseNewNet())
    {
        super(Weapon).ClientStartFire(Mode);
    }
    // End:0x48
    else
    {
        NewNet_ClientStartFire(Mode);
    }
    //return;    
}

simulated event NewNet_ClientStartFire(int Mode)
{
    // End:0x48
    if(Pawn(Owner).Controller.IsInState('GameEnded') || Pawn(Owner).Controller.IsInState('RoundEnded'))
    {
        return;
    }
    // End:0xA4
    if(Role < ROLE_Authority)
    {
        // End:0xA1
        if(StartFire(Mode))
        {
            // End:0x86
            if(t == none)
            {
                // End:0x85
                foreach DynamicActors(class'NewNet_TimeStamp_Pawn', t)
                {
                    // End:0x85
                    break;                    
                }                
            }
               NewNet_ServerStartFire(mode, T.TimeStamp, T.dt);
        }
    }
    // End:0xAF
    else
    {
        StartFire(Mode);
    }
    //return;    
}

function NewNet_ServerStartFire(byte Mode, float ClientTimeStamp, float dt)
{
    // End:0x20
    if(M == none)
    {
        // End:0x1F
        foreach DynamicActors(class'TAM_Mutator', M)
        {
            // End:0x1F
            break;            
        }        
    }
    // End:0x92
    if((Team_GameBase(Level.Game) != none) && Misc_Player(Instigator.Controller) != none)
    {
        Misc_Player(Instigator.Controller).NotifyServerStartFire(ClientTimeStamp, M.ClientTimeStamp, M.AverDT);
    }
    // End:0x113
    if(NewNet_MiniGunFire(FireMode[Mode]) != none)
    {
         NewNet_MiniGunFire(FireMode[Mode]).PingDT = M.ClientTimeStamp - M.GetStamp(ClientTimeStamp)-DT + 0.5*M.AverDT;
          NewNet_MiniGunFire(FireMode[Mode]).bUseEnhancedNetCode = true;
    }
    // End:0x191
    else
    {
        // End:0x191
        if(NewNet_MiniGunAltFire(FireMode[Mode]) != none)
        {
          NewNet_MiniGunAltFire(FireMode[Mode]).PingDT = M.ClientTimeStamp - M.GetStamp(ClientTimeStamp)-DT + 0.5*M.AverDT;
          NewNet_MiniGunAltFire(FireMode[Mode]).bUseEnhancedNetCode = true;
        }
    }
    ServerStartFire(Mode);
    //return;    
}

defaultproperties
{
    FireModeClass[0]=class'NewNet_MiniGunFire'
    FireModeClass[1]=class'NewNet_MiniGunAltFire'
}