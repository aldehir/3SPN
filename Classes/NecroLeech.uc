/*******************************************************************************
 * NecroLeech generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class NecroLeech extends Inventory;

var() int LeechRate;
var() int LeechAmount;
var() int ShieldLeechRate;
var() float ShieldLeechAmount;
var() int LeechCount;
var() int ShieldLeechCount;

function GiveTo(Pawn Other, optional Pickup Pickup)
{
    // End:0x26
    if((Other == none) || Other.Health <= 0)
    {
        Destroy();
        return;
    }
    super.GiveTo(Other);
    SetTimer(1.0, true);
    //return;    
}

function Timer()
{
    // End:0x11D
    if(Pawn(Owner) != none)
    {
        // End:0x45
        if(LeechCount < LeechAmount)
        {
            Pawn(Owner).Health -= LeechRate;
            LeechCount += LeechRate;
        }
        // End:0x7E
        if(float(ShieldLeechCount) < ShieldLeechAmount)
        {
            Pawn(Owner).ShieldStrength -= float(ShieldLeechRate);
            ShieldLeechCount += ShieldLeechRate;
        }
        // End:0xE4
        if(Pawn(Owner).Health <= 0)
        {
            Pawn(Owner).Died(Pawn(Owner).Controller, class'DamTypeNecro', Pawn(Owner).Location);
            Destroy();
            SetTimer(0.0, false);
            return;
        }
        // End:0x114
        if((LeechCount >= LeechAmount) && float(ShieldLeechCount) >= ShieldLeechAmount)
        {
            Destroy();
            SetTimer(0.0, false);
            return;
        }
        SetTimer(0.150, true);
    }
    //return;    
}

defaultproperties
{
    LeechRate=1
    ShieldLeechRate=1
    bOnlyRelevantToOwner=false
    bAlwaysRelevant=true
    bReplicateInstigator=true
}