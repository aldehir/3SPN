/*******************************************************************************
 * Freon_Scoreboard generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Freon_Scoreboard extends TAM_Scoreboard
    hidecategories(Movement,Collision,Lighting,LightColor,Karma,Force)
    config;

simulated function SetCustomBarColor(out Color C, PlayerReplicationInfo PRI, bool bOwner)
{
    // End:0xA8
    if(((!bOwner && Freon_PRI(PRI) != none) && Freon_PawnReplicationInfo(Freon_PRI(PRI).PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(Freon_PRI(PRI).PawnReplicationInfo).bFrozen)
    {
        C.R = 140;
        C.G = 180;
        C.B = byte(255);
        C.A = byte(float(BaseAlpha) * 0.650);
    }
    //return;    
}

simulated function SetCustomLocationColor(out Color C, PlayerReplicationInfo PRI, bool bOwner)
{
    // End:0x6B
    if(((Freon_PRI(PRI) != none) && Freon_PawnReplicationInfo(Freon_PRI(PRI).PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(Freon_PRI(PRI).PawnReplicationInfo).bFrozen)
    {
        C = class'Freon_PRI'.default.FrozenColor;
    }
    //return;    
}

simulated function DrawLabelsBar(Canvas C, int BarX, int BarY, int BarW, int BarH, Color BackgroundCol)
{
    local int NameX, NameY, StatX, StatY, RankX, RankY,
	    AvgPPRX, AvgPPRY, ScoreX, ScoreY, PointsPerX,
	    PointsPerY, KillsX, KillsY, DeathsX, DeathsY,
	    ThawsX, ThawsY, GitX, GitY, PingX,
	    PingY, PLX, PLY;

    local float XL, YL;
    local string Name;

    NameX = int(float(BarW) * 0.0310);
    NameY = int(C.ClipY * 0.010);
    StatX = int(float(BarW) * 0.0510);
    StatY = int(C.ClipY * 0.0350);
    ScoreX = int(float(BarW) * 0.490);
    ScoreY = int(C.ClipY * 0.010);
    PointsPerX = int(float(BarW) * 0.490);
    PointsPerY = int(C.ClipY * 0.0350);
    KillsX = int(float(BarW) * 0.60);
    KillsY = int(C.ClipY * 0.010);
    DeathsX = int(float(BarW) * 0.60);
    DeathsY = int(C.ClipY * 0.0350);
    ThawsX = int(float(BarW) * 0.710);
    ThawsY = int(C.ClipY * 0.010);
    GitX = int(float(BarW) * 0.710);
    GitY = int(C.ClipY * 0.0350);
    PingX = int(float(BarW) * 0.820);
    PingY = int(C.ClipY * 0.010);
    PLX = int(float(BarW) * 0.820);
    PLY = int(C.ClipY * 0.0350);
    RankX = int(float(BarW) * 0.930);
    RankY = int(C.ClipY * 0.010);
    AvgPPRX = int(float(BarW) * 0.930);
    AvgPPRY = int(C.ClipY * 0.0350);
    C.DrawColor = BackgroundCol;
    C.DrawColor.A = BaseAlpha;
    C.SetPos(float(BarX), float(BarY));
    C.DrawTile(BaseTex, float(BarW), float(BarH), 17.0, 31.0, 751.0, 71.0);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = HudClass.default.WhiteColor * 0.70;
    C.SetPos(float(BarX + NameX), float(BarY + NameY));
    C.DrawText("Name", true);
    C.DrawColor = HudClass.default.RedColor * 0.70;
    C.DrawColor.G = 130;
    Name = "Location";
    C.SetPos(float(BarX + StatX), float(BarY + StatY));
    C.DrawText(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = HudClass.default.WhiteColor * 0.70;
    Name = "Rank";
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + RankX) - (XL * 0.50), float(BarY + RankY));
    C.DrawText(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -3);
    C.DrawColor = HudClass.default.WhiteColor * 0.550;
    Name = "Avg PPR";
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + AvgPPRX) - (XL * 0.50), float(BarY + AvgPPRY));
    C.DrawText(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = HudClass.default.WhiteColor * 0.70;
    Name = "Score";
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + ScoreX) - (XL * 0.50), float(BarY + ScoreY));
    C.DrawText(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -3);
    C.DrawColor = HudClass.default.WhiteColor * 0.550;
    Name = "PPR";
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + PointsPerX) - (XL * 0.50), float(BarY + PointsPerY));
    C.DrawText(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = HudClass.default.WhiteColor * 0.70;
    Name = "Kills";
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + KillsX) - (XL * 0.50), float(BarY + KillsY));
    C.DrawText(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -3);
    C.DrawColor.R = 170;
    C.DrawColor.G = 20;
    C.DrawColor.B = 20;
    Name = "Deaths";
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + DeathsX) - (XL * 0.50), float(BarY + DeathsY));
    C.DrawText(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = HudClass.default.WhiteColor * 0.70;
    Name = "Thaws";
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + ThawsX) - (XL * 0.50), float(BarY + ThawsY));
    C.DrawText(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -3);
    C.DrawColor.R = 170;
    C.DrawColor.G = 20;
    C.DrawColor.B = 20;
    Name = "Git";
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + GitX) - (XL * 0.50), float(BarY + GitY));
    C.DrawText(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = HudClass.default.CyanColor * 0.50;
    C.DrawColor.B = 150;
    C.DrawColor.R = 20;
    Name = "Ping";
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + PingX) - (XL * 0.50), float(BarY + PingY));
    C.DrawText(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -3);
    Name = "P/L";
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + PLX) - (XL * 0.50), float(BarY + PLY));
    C.DrawText(Name, true);
    //return;    
}

simulated function DrawPlayerBar(Canvas C, int BarX, int BarY, int BarW, int BarH, PlayerReplicationInfo PRI)
{
    local int NameX, NameY, NameW, StatX, StatY, RankX,
	    RankY, RankW, RankH, AvgPPRX, AvgPPRY,
	    ScoreX, ScoreY, PointsPerX, PointsPerY, KillsX,
	    KillsY, DeathsX, DeathsY, ThawsX, ThawsY,
	    GitX, GitY, PingX, PingY, PLX,
	    PLY;

    local string Name;
    local float XL, YL;
    local PlayerReplicationInfo OwnerPRI;
    local Freon_PRI xPRI;
    local int OwnerTeam;

    OwnerPRI = PlayerController(Owner).PlayerReplicationInfo;
    xPRI = Freon_PRI(PRI);
    // End:0x5D
    if(OwnerPRI.Team != none)
    {
        OwnerTeam = OwnerPRI.Team.TeamIndex;
    }
    // End:0x65
    else
    {
        OwnerTeam = 255;
    }
    NameX = int(float(BarW) * 0.0310);
    NameY = int(C.ClipY * 0.00750);
    NameW = int(float(BarW) * 0.470);
    StatX = int(float(BarW) * 0.0510);
    StatY = int(C.ClipY * 0.0350);
    ScoreX = int(float(BarW) * 0.490);
    ScoreY = int(C.ClipY * 0.00750);
    PointsPerX = int(float(BarW) * 0.490);
    PointsPerY = int(C.ClipY * 0.0350);
    KillsX = int(float(BarW) * 0.60);
    KillsY = int(C.ClipY * 0.00750);
    DeathsX = int(float(BarW) * 0.60);
    DeathsY = int(C.ClipY * 0.0350);
    ThawsX = int(float(BarW) * 0.710);
    ThawsY = int(C.ClipY * 0.00750);
    GitX = int(float(BarW) * 0.710);
    GitY = int(C.ClipY * 0.0350);
    PingX = int(float(BarW) * 0.820);
    PingY = int(C.ClipY * 0.00750);
    PLX = int(float(BarW) * 0.820);
    PLY = int(C.ClipY * 0.0350);
    RankX = int(float(BarW) * 0.930);
    RankY = int(C.ClipY * 0.00750);
    AvgPPRX = int(float(BarW) * 0.930);
    AvgPPRY = int(C.ClipY * 0.0350);
    RankW = int((C.ClipX * 32.0) / 1920.0);
    RankH = int((C.ClipY * 32.0) / 1080.0);
    C.SetPos(float(BarX), float(BarY));
    C.DrawTile(BaseTex, float(BarW), float(BarH), 18.0, 107.0, 745.0, 81.0);
    // End:0x3C5
    if(PRI.bOutOfLives)
    {
        Name = PRI.PlayerName;
        C.DrawColor = HudClass.default.WhiteColor * 0.40;
    }
    // End:0x453
    else
    {
        // End:0x41A
        if((default.bEnableColoredNamesOnScoreboard && Misc_PRI(PRI) != none) && Misc_PRI(PRI).GetColoredName() != "")
        {
            Name = Misc_PRI(PRI).GetColoredName();
        }
        // End:0x42E
        else
        {
            Name = PRI.PlayerName;
        }
        C.DrawColor = HudClass.default.WhiteColor * 0.70;
    }
    // End:0x4A9
    if(Len(class'Misc_Util'.static.StripColorCodes(Name)) <= 18)
    {
        C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    }
    // End:0x4DF
    else
    {
        C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -3);
    }
    C.SetPos(float(BarX + NameX), float(BarY + NameY));
    class'Misc_Util'.static.DrawTextClipped(C, Name, float(NameW));
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
    // End:0x64A
    if(!GRI.bMatchHasBegun)
    {
        // End:0x594
        if(PRI.bReadyToPlay)
        {
            Name = ReadyText;
        }
        // End:0x59F
        else
        {
            Name = NotReadyText;
        }
        // End:0x60C
        if(PRI.bAdmin)
        {
            Name = "Admin -" @ Name;
            C.DrawColor.R = 170;
            C.DrawColor.G = 20;
            C.DrawColor.B = 20;
        }
        // End:0x647
        else
        {
            C.DrawColor = HudClass.default.RedColor * 0.70;
            C.DrawColor.G = 130;
        }
    }
    // End:0x870
    else
    {
        // End:0x821
        if(!PRI.bAdmin)
        {
            // End:0x73E
            if(!PRI.bOutOfLives)
            {
                C.DrawColor = HudClass.default.RedColor * 0.70;
                C.DrawColor.G = 130;
                // End:0x727
                if((PRI.Team.TeamIndex == OwnerTeam) || OwnerPRI.bOnlySpectator)
                {
                    // End:0x70F
                    if(Freon_PRI(PRI) != none)
                    {
                        Name = Freon_PRI(PRI).GetLocationNameTeam();
                    }
                    // End:0x724
                    else
                    {
                        Name = PRI.GetLocationName();
                    }
                }
                // End:0x73B
                else
                {
                    Name = PRI.StringUnknown;
                }
            }
            // End:0x7F9
            else
            {
                C.DrawColor.R = 170;
                C.DrawColor.G = 20;
                C.DrawColor.B = 20;
                // End:0x7E4
                if(((PRI.Team.TeamIndex == OwnerTeam) || OwnerPRI.bOnlySpectator) && Freon_PRI(PRI) != none)
                {
                    Name = Freon_PRI(PRI).GetLocationNameTeam();
                }
                // End:0x7F9
                else
                {
                    Name = PRI.GetLocationName();
                }
            }
            SetCustomLocationColor(C.DrawColor, PRI, PRI == OwnerPRI);
        }
        // End:0x870
        else
        {
            C.DrawColor.R = 170;
            C.DrawColor.G = 20;
            C.DrawColor.B = 20;
            Name = "Admin";
        }
    }
    C.StrLen(Name, XL, YL);
    // End:0x8C4
    if(XL > float(NameW))
    {
        Name = Left(Name, int((float(NameW) / XL) * float(Len(Name))));
    }
    C.SetPos(float(BarX + StatX), float(BarY + StatY));
    C.DrawText(Name);
    DrawRank(C, (BarX + RankX) - (RankW / 2), BarY + RankY, RankW, RankH, Misc_PRI(PRI).Rank);
    // End:0xA4E
    if(Misc_PRI(PRI).AvgPPR != float(0))
    {
        C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
        C.DrawColor = HudClass.default.WhiteColor * 0.550;
        Name = class'Misc_PRI'.static.GetFormattedPPR(Misc_PRI(PRI).AvgPPR);
        C.StrLen(Name, XL, YL);
        C.SetPos(float(BarX + AvgPPRX) - (XL * 0.50), float(BarY + AvgPPRY));
        C.DrawText(Name);
    }
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = HudClass.default.WhiteColor * 0.70;
    Name = string(int(PRI.Score));
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + ScoreX) - (XL * 0.50), float(BarY + ScoreY));
    C.DrawText(Name);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
    C.DrawColor = HudClass.default.WhiteColor * 0.550;
    // End:0xBC8
    if(Misc_PRI(PRI).PlayedRounds > 0)
    {
        XL = PRI.Score / float(Misc_PRI(PRI).PlayedRounds);
    }
    // End:0xBDC
    else
    {
        XL = PRI.Score;
    }
    // End:0xC5E
    if(int((XL - float(int(XL))) * float(10)) < 0)
    {
        // End:0xC1E
        if(int(XL) == 0)
        {
            Name = "-" $ string(int(XL));
        }
        // End:0xC2D
        else
        {
            Name = string(int(XL));
        }
        Name = (Name $ ".") $ string(-int((XL - float(int(XL))) * float(10)));
    }
    // End:0xC99
    else
    {
        Name = string(int(XL));
        Name = (Name $ ".") $ string(int((XL - float(int(XL))) * float(10)));
    }
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + PointsPerX) - (XL * 0.50), float(BarY + PointsPerY));
    C.DrawText(Name);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = HudClass.default.WhiteColor * 0.70;
    Name = string(PRI.Kills);
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + KillsX) - (XL * 0.50), float(BarY + KillsY));
    C.DrawText(Name);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
    C.DrawColor.R = 170;
    C.DrawColor.G = 20;
    C.DrawColor.B = 20;
    Name = string(int(PRI.Deaths));
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + DeathsX) - (XL * 0.50), float(BarY + DeathsY));
    C.DrawText(Name);
    // End:0xFAA
    if(xPRI != none)
    {
        C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
        C.DrawColor = HudClass.default.WhiteColor * 0.70;
        Name = string(xPRI.Thaws);
        C.StrLen(Name, XL, YL);
        C.SetPos(float(BarX + ThawsX) - (XL * 0.50), float(BarY + ThawsY));
        C.DrawText(Name);
    }
    // End:0x10A8
    if(xPRI != none)
    {
        C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
        C.DrawColor.R = 170;
        C.DrawColor.G = 20;
        C.DrawColor.B = 20;
        Name = string(xPRI.Git);
        C.StrLen(Name, XL, YL);
        C.SetPos(float(BarX + GitX) - (XL * 0.50), float(BarY + GitY));
        C.DrawText(Name);
    }
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = HudClass.default.CyanColor * 0.50;
    C.DrawColor.B = 150;
    C.DrawColor.R = 20;
    Name = string(Min(999, PRI.Ping * 4));
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + PingX) - (XL * 0.50), float(BarY + PingY));
    C.DrawText(Name);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
    C.DrawColor = HudClass.default.CyanColor * 0.50;
    C.DrawColor.B = 150;
    C.DrawColor.R = 20;
    Name = string(PRI.PacketLoss);
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + PLX) - (XL * 0.50), float(BarY + PLY));
    C.DrawText(Name);
    //return;    
}

simulated function DrawPlayerTotalsBarFreon(Canvas C, int BarX, int BarY, int BarW, int BarH, string TeamName, Color BackgroundCol, int Score, int Kills, int Thaws, int Ping, float PPR)
{
    local int NameX, NameY, ScoreX, ScoreY, KillsX, KillsY,
	    ThawsX, ThawsY, PingX, PingY, PPRX,
	    PPRY;

    local string Name;
    local float XL, YL;

    NameX = int(float(BarW) * 0.0310);
    NameY = int(C.ClipY * 0.00750);
    ScoreX = int(float(BarW) * 0.490);
    ScoreY = int(C.ClipY * 0.00750);
    KillsX = int(float(BarW) * 0.60);
    KillsY = int(C.ClipY * 0.00750);
    ThawsX = int(float(BarW) * 0.710);
    ThawsY = int(C.ClipY * 0.00750);
    PingX = int(float(BarW) * 0.820);
    PingY = int(C.ClipY * 0.00750);
    PPRX = int(float(BarW) * 0.930);
    PPRY = int(C.ClipY * 0.00750);
    C.DrawColor = BackgroundCol;
    C.DrawColor.A = 200;
    C.SetPos(float(BarX), float(BarY));
    C.DrawTile(BaseTex, float(BarW), float(BarH), 18.0, 107.0, 745.0, 81.0);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = HudClass.default.WhiteColor * 0.70;
    C.SetPos(float(BarX + NameX), float(BarY + NameY));
    C.DrawText(TeamName);
    Name = string(Score);
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + ScoreX) - (XL * 0.50), float(BarY + ScoreY));
    C.DrawText(Name);
    Name = string(Kills);
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + KillsX) - (XL * 0.50), float(BarY + KillsY));
    C.DrawText(Name);
    Name = string(Thaws);
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + ThawsX) - (XL * 0.50), float(BarY + ThawsY));
    C.DrawText(Name);
    C.DrawColor = HudClass.default.CyanColor * 0.50;
    C.DrawColor.B = 150;
    C.DrawColor.R = 20;
    Name = string(Min(999, Ping * 4));
    C.StrLen(Name, XL, YL);
    C.SetPos(float(BarX + PingX) - (XL * 0.50), float(BarY + PingY));
    C.DrawText(Name);
    // End:0x54F
    if(PPR != float(0))
    {
        C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
        C.DrawColor = HudClass.default.WhiteColor * 0.550;
        Name = string(PPR);
        C.StrLen(Name, XL, YL);
        C.SetPos(float(BarX + PPRX) - (XL * 0.50), float(BarY + PPRY) + (YL * 0.250));
        C.DrawText(Name);
    }
    //return;    
}

simulated function DrawTeamBoard(Canvas C, int BoxX, int BoxY, int BoxW, string TeamName, Color TeamCol, array<PlayerReplicationInfo> Players, int MaxPlayers)
{
    local int i;
    local PlayerReplicationInfo PRI, OwnerPRI;
    local Freon_PRI xPRI;
    local int BarX, BarY, BoxH, LabelsBarX, LabelsBarY, LabelsBarW,
	    LabelsBarH, PlayerBoxX, PlayerBoxY, PlayerBoxW, PlayerBoxH,
	    PlayerBoxSeparatorH, PlayerTotalsW, playerTotalsH, TeamScore, TeamKills,
	    TeamThaws, TeamPing;

    local float TeamAvgPPR;
    local int NumPPR;

    OwnerPRI = PlayerController(Owner).PlayerReplicationInfo;
    LabelsBarX = 0;
    LabelsBarY = 0;
    LabelsBarW = BoxW;
    LabelsBarH = int(C.ClipY * 0.070);
    PlayerBoxX = 0;
    PlayerBoxY = LabelsBarY + LabelsBarH;
    PlayerBoxW = BoxW;
    PlayerBoxH = int(C.ClipY * 0.060);
    PlayerBoxSeparatorH = int(C.ClipY * 0.0);
    PlayerTotalsW = BoxW;
    playerTotalsH = int(C.ClipY * 0.040);
    BoxH = PlayerBoxY + ((PlayerBoxH + PlayerBoxSeparatorH) * MaxPlayers);
    // End:0x10D
    if(MaxPlayers >= 2)
    {
        BoxH += playerTotalsH;
    }
    BoxY = int((C.ClipY * 0.50) - (float(BoxH) * 0.50));
    NumPPR = 0;
    DrawLabelsBar(C, BoxX + LabelsBarX, BoxY + LabelsBarY, LabelsBarW, LabelsBarH, TeamCol);
    i = 0;
    J0x17A:
    // End:0x34C [Loop If]
    if(i < Players.Length)
    {
        PRI = Players[i];
        xPRI = Freon_PRI(PRI);
        TeamPing += PRI.Ping;
        TeamScore += int(PRI.Score);
        TeamKills += PRI.Kills;
        // End:0x240
        if(xPRI != none)
        {
            TeamThaws += xPRI.Thaws;
            // End:0x240
            if(xPRI.AvgPPR != float(0))
            {
                TeamAvgPPR += xPRI.AvgPPR;
                ++ NumPPR;
            }
        }
        // End:0x27F
        if(PRI == OwnerPRI)
        {
            C.DrawColor = TeamCol;
            C.DrawColor.A = BaseAlpha;
        }
        // End:0x2C0
        else
        {
            C.DrawColor = HudClass.default.WhiteColor;
            C.DrawColor.A = byte(float(BaseAlpha) * 0.50);
        }
        SetCustomBarColor(C.DrawColor, PRI, PRI == OwnerPRI);
        BarX = BoxX + PlayerBoxX;
        BarY = (BoxY + PlayerBoxY) + ((PlayerBoxH + PlayerBoxSeparatorH) * i);
        DrawPlayerBar(C, BarX, BarY, PlayerBoxW, PlayerBoxH, PRI);
        ++ i;
        // [Loop Continue]
        goto J0x17A;
    }
    // End:0x3FD
    if(Players.Length >= 2)
    {
        TeamPing /= float(Players.Length);
        // End:0x381
        if(NumPPR > 1)
        {
            TeamAvgPPR /= float(NumPPR);
        }
        BarX = BoxX + PlayerBoxX;
        BarY = (BoxY + PlayerBoxY) + ((PlayerBoxH + PlayerBoxSeparatorH) * Players.Length);
        DrawPlayerTotalsBarFreon(C, BarX, BarY, PlayerTotalsW, playerTotalsH, TeamName, TeamCol, TeamScore, TeamKills, TeamThaws, TeamPing, TeamAvgPPR);
    }
    //return;    
}
