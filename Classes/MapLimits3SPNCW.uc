/*******************************************************************************
 * MapLimits3SPNCW generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MapLimits3SPNCW extends Actor
    config(MapLimits3SPNCW)
    notplaceable;

var config array<string> MapLimits;
var config string LastMapName;

static function bool FindMap(string MapName, out int MinPlayers, out int MaxPlayers, out int Probability, out int Group)
{
    local int P, j;
    local string MapLimitsEntry;
    local array<string> Parts;

    j = 0;
    J0x07:
    // End:0x109 [Loop If]
    if(j < default.MapLimits.Length)
    {
        MapLimitsEntry = default.MapLimits[j];
        P = UnresolvedNativeFunction_240(MapLimitsEntry, "?", Parts);
        // End:0x4B
        if(P < 1)
        {
            // [Explicit Continue]
            goto J0xFF;
        }
        // End:0xFF
        if(Parts[0] ~= MapName)
        {
            // End:0x7A
            if(P >= 2)
            {
                MinPlayers = int(Parts[1]);
            }
            // End:0x81
            else
            {
                MinPlayers = 0;
            }
            // End:0xA0
            if(P >= 3)
            {
                MaxPlayers = int(Parts[2]);
            }
            // End:0xAB
            else
            {
                MaxPlayers = 999;
            }
            // End:0xCF
            if(P >= 4)
            {
                Probability = Clamp(int(Parts[3]), 0, 100);
            }
            // End:0xD7
            else
            {
                Probability = 100;
            }
            // End:0xF6
            if(P >= 5)
            {
                Group = int(Parts[4]);
            }
            // End:0xFD
            else
            {
                Group = 0;
            }
            return true;
        }
        J0xFF:
        ++ j;
        // [Loop Continue]
        goto J0x07;
    }
    return false;
    //return;    
}

static function bool IsSuitableMap(string CurrentMapName, string MapName, int NumPlayers)
{
    local int MinPlayers, MaxPlayers, Probability, NewGroup, CurrentGroup, Dice;

    // End:0x26
    if(!FindMap(MapName, MinPlayers, MaxPlayers, Probability, NewGroup))
    {
        return true;
    }
    // End:0x48
    if((NumPlayers < MinPlayers) || NumPlayers > MaxPlayers)
    {
        return false;
    }
    Dice = int(FRand() * float(100));
    // End:0x69
    if(Dice > Probability)
    {
        return false;
    }
    // End:0xC3
    if((Len(CurrentMapName) > 0) && FindMap(CurrentMapName, MinPlayers, MaxPlayers, Probability, CurrentGroup))
    {
        // End:0xC3
        if((CurrentGroup != 0) && NewGroup != 0)
        {
            // End:0xC3
            if(CurrentGroup == NewGroup)
            {
                return false;
            }
        }
    }
    return true;
    //return;    
}

static function SetLastMap(string MapName)
{
    default.LastMapName = MapName;
    //return;    
}

defaultproperties
{
    MapLimits(0)="DM-Rankin?0?999"
}