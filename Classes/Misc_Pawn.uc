/*******************************************************************************
 * Misc_Pawn generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Misc_Pawn extends xPawn
    dependson(Misc_PawnReplicationInfo)
    config(User);

var Misc_Player MyOwner;
var bool bBrightSkins;
var Material SavedBody;
var Material OrigBody;
var Combiner Combined;
var ConstantColor SkinColor;
var ConstantColor OverlayColor;
var Color RedColor;
var Color BlueColor;
var byte OverlayType;
var Color OverlayColors[4];
var Vector LocationHistory[10];
var int NextLocHistSlot;
var bool bWarmedUp;
var int ReWarnTime;
var bool SpawnProtectionEnabled;
var int SpawnProtectionTimer;
var xEmitter InvisEmitter;

replication
{
    // Pos:0x000
    reliable if(Role == ROLE_Authority)
        OverlayType

    // Pos:0x00D
    reliable if(bNetDirty && Role == ROLE_Authority)
        SpawnProtectionEnabled

    // Pos:0xFFFF
    reliable if())
        ServerChangedWeapon
}

function Died(Controller Killer, class<DamageType> DamageType, Vector HitLocation)
{
    // End:0x37
    if(Misc_Player(Controller) != none)
    {
        Misc_Player(Controller).NextRezTime = Level.TimeSeconds + float(1);
    }
    super(Pawn).Died(Killer, DamageType, HitLocation);
    //return;    
}

simulated function Destroyed()
{
    // End:0x2F
    if(InvisEmitter != none)
    {
        InvisEmitter.mRegen = false;
        InvisEmitter.Destroy();
        InvisEmitter = none;
    }
    super.Destroyed();
    //return;    
}

event PostBeginPlay()
{
    super.PostBeginPlay();
    // End:0x1C
    if(Level.Game == none)
    {
        return;
    }
    ActivateSpawnProtection();
    //return;    
}

function PossessedBy(Controller C)
{
    super.PossessedBy(C);
    // End:0x27
    if(bDeleteMe || Controller != C)
    {
        return;
    }
    // End:0x55
    if(Misc_PRI(PlayerReplicationInfo) != none)
    {
        Misc_PRI(PlayerReplicationInfo).PawnReplicationInfo.SetMyPawn(self);
    }
    //return;    
}

function UnPossessed()
{
    // End:0x2E
    if(Misc_PRI(PlayerReplicationInfo) != none)
    {
        Misc_PRI(PlayerReplicationInfo).PawnReplicationInfo.SetMyPawn(none);
    }
    super(Pawn).UnPossessed();
    //return;    
}

function bool InCurrentCombo()
{
    // End:0x42
    if((TAM_GRI(Level.GRI) == none) || TAM_GRI(Level.GRI).bDisableTeamCombos)
    {
        return super.InCurrentCombo();
    }
    return false;
    //return;    
}

function DoCombo(class<Combo> ComboClass)
{
    local int i;

    // End:0x116
    if(ComboClass != none)
    {
        // End:0x25
        if(CurrentCombo == none)
        {
            CurrentCombo = Spawn(ComboClass, self);
        }
        // End:0x116
        if(CurrentCombo != none)
        {
            UnrealMPGameInfo(Level.Game).SpecialEvent(PlayerReplicationInfo, "" $ string(CurrentCombo.Class));
            // End:0x88
            if(ComboClass.Name == 'ComboSpeed')
            {
                i = 0;
            }
            // End:0xF8
            else
            {
                // End:0xAA
                if(ComboClass.Name == 'ComboBerserk')
                {
                    i = 1;
                }
                // End:0xF8
                else
                {
                    // End:0xCD
                    if(ComboClass.Name == 'ComboDefensive')
                    {
                        i = 2;
                    }
                    // End:0xF8
                    else
                    {
                        // End:0xF0
                        if(ComboClass.Name == 'ComboInvis')
                        {
                            i = 3;
                        }
                        // End:0xF8
                        else
                        {
                            i = 4;
                        }
                    }
                }
            }
            TeamPlayerReplicationInfo(PlayerReplicationInfo).Combos[i] += byte(1);
        }
    }
    //return;    
}

function GiveWeaponClass(class<Weapon> WeaponClass)
{
    local Weapon newWeapon;

    // End:0x13
    if((FindInventoryType(WeaponClass)) != none)
    {
        return;
    }
    newWeapon = Spawn(WeaponClass);
    // End:0x3C
    if(newWeapon != none)
    {
        newWeapon.GiveTo(self);
    }
    //return;    
}

function ServerChangedWeapon(Weapon OldWeapon, Weapon newWeapon)
{
    local float InvisTime;

    // End:0x50
    if(bInvis)
    {
        // End:0x45
        if((OldWeapon != none) && OldWeapon.OverlayMaterial == InvisMaterial)
        {
            InvisTime = OldWeapon.ClientOverlayCounter;
        }
        // End:0x50
        else
        {
            InvisTime = 20000.0;
        }
    }
    // End:0x71
    if((HasUDamage()) || bInvis)
    {
        SetWeaponOverlay(none, 0.0, true);
    }
    Weapon = newWeapon;
    // End:0x96
    if(Controller != none)
    {
        Controller.ChangedWeapon();
    }
    PendingWeapon = none;
    // End:0xEB
    if(OldWeapon != none)
    {
        OldWeapon.SetDefaultDisplayProperties();
        OldWeapon.DetachFromPawn(self);
        OldWeapon.GotoState('Hidden');
        OldWeapon.NetUpdateFrequency = 2.0;
    }
    // End:0x139
    if(Weapon != none)
    {
        Weapon.NetUpdateFrequency = 100.0;
        Weapon.AttachToPawn(self);
        Weapon.BringUp(OldWeapon);
        PlayWeaponSwitch(newWeapon);
    }
    // End:0x158
    if(Inventory != none)
    {
        Inventory.OwnerEvent('ChangedWeapon');
    }
    // End:0x175
    if(bInvis)
    {
        SetWeaponOverlay(InvisMaterial, InvisTime, true);
    }
    // End:0x19F
    else
    {
        // End:0x19F
        if(HasUDamage())
        {
            SetWeaponOverlay(UDamageWeaponMaterial, UDamageTime - Level.TimeSeconds, false);
        }
    }
    // End:0x1E6
    if(Weapon != none)
    {
        // End:0x1C5
        if(bBerserk)
        {
            Weapon.StartBerserk();
        }
        // End:0x1E6
        else
        {
            // End:0x1E6
            if(Weapon.bBerserk)
            {
                Weapon.StopBerserk();
            }
        }
    }
    //return;    
}

function RemovePowerups()
{
    local float Adren;

    // End:0x43
    if((TAM_GRI(Level.GRI) == none) || TAM_GRI(Level.GRI).bDisableTeamCombos)
    {
        super.RemovePowerups();
        return;
    }
    // End:0x90
    if((Controller != none) && Misc_DynCombo(CurrentCombo) != none)
    {
        Adren = Controller.Adrenaline;
        super.RemovePowerups();
        Controller.Adrenaline = Adren;
        return;
    }
    super.RemovePowerups();
    //return;    
}

function int ShieldAbsorb(int Dam)
{
    local float Shield;

    // End:0x13
    if(ShieldStrength == float(0))
    {
        return Dam;
    }
    SetOverlayMaterial(ShieldHitMat, ShieldHitMatTime, false);
    PlaySound(sound'ArmorHit', 2, 2.0 * TransientSoundVolume,, 400.0);
    Shield = ShieldStrength - ((float(Dam) * 0.750) + 0.50);
    Dam *= 0.250;
    // End:0x96
    if(Shield < float(0))
    {
        Dam += int(-Shield);
        Shield = 0.0;
    }
    ShieldStrength = Shield;
    return Dam;
    //return;    
}

function TakeDamage(int Damage, Pawn instigatedBy, Vector HitLocation, Vector Momentum, class<DamageType> DamageType)
{
    local Vector zeroVec;

    zeroVec = vect(0.0, 0.0, 0.0);
    // End:0x3A
    if(IsSpawnProtectionEnabled())
    {
        super(Pawn).TakeDamage(0, instigatedBy, HitLocation, zeroVec, DamageType);
    }
    // End:0x59
    else
    {
        super(Pawn).TakeDamage(Damage, instigatedBy, HitLocation, Momentum, DamageType);
    }
    //return;    
}

simulated function SetOverlayMaterial(Material mat, float Time, bool bOverride)
{
    // End:0x16
    if(mat == none)
    {
        OverlayType = 0;
    }
    // End:0x9A
    else
    {
        // End:0x39
        if(mat == ShieldHitMat)
        {
            OverlayType = 1;
            SetTimer(ShieldHitMatTime, false);
        }
        // End:0x9A
        else
        {
            // End:0x9A
            if(OverlayType != 1)
            {
                // End:0x60
                if(mat == shader'LightningHit')
                {
                    OverlayType = 2;
                }
                // End:0x91
                else
                {
                    // End:0x7A
                    if(mat == shader'ShockHitShader')
                    {
                        OverlayType = 3;
                    }
                    // End:0x91
                    else
                    {
                        // End:0x91
                        if(mat == shader'LinkHit')
                        {
                            OverlayType = 4;
                        }
                    }
                }
                SetTimer(ShieldHitMatTime, false);
            }
        }
    }
    super.SetOverlayMaterial(mat, Time, bOverride);
    //return;    
}

simulated function bool CheckValidFemaleDefault()
{
    return (((((((((PlacedFemaleCharacterName ~= "Tamika") || PlacedFemaleCharacterName ~= "Sapphire") || PlacedFemaleCharacterName ~= "Enigma") || PlacedFemaleCharacterName ~= "Cathode") || PlacedFemaleCharacterName ~= "Rylisa") || PlacedFemaleCharacterName ~= "Ophelia") || PlacedFemaleCharacterName ~= "Zarina") || PlacedFemaleCharacterName ~= "Nebri") || PlacedFemaleCharacterName ~= "Subversa") || PlacedFemaleCharacterName ~= "Diva";
    //return;    
}

simulated function bool CheckValidMaleDefault()
{
    return (((((((((PlacedCharacterName ~= "Jakob") || PlacedCharacterName ~= "Gorge") || PlacedCharacterName ~= "Malcolm") || PlacedCharacterName ~= "Xan") || PlacedCharacterName ~= "Brock") || PlacedCharacterName ~= "Gaargod") || PlacedCharacterName ~= "Axon") || PlacedCharacterName ~= "Barktooth") || PlacedCharacterName ~= "Torch") || PlacedCharacterName ~= "WidowMaker";
    //return;    
}

simulated function string CheckAndGetCharacter()
{
    // End:0x49
    if(!CheckValidFemaleDefault() && !CheckValidMaleDefault())
    {
        // End:0x31
        if(!CheckValidFemaleDefault())
        {
            PlacedFemaleCharacterName = "Tamika";
        }
        // End:0x49
        if(!CheckValidMaleDefault())
        {
            PlacedCharacterName = "Jakob";
        }
    }
    // End:0x71
    if((PlayerReplicationInfo != none) && PlayerReplicationInfo.bIsFemale)
    {
        return PlacedFemaleCharacterName;
    }
    // End:0x77
    else
    {
        return PlacedCharacterName;
    }
    //return;    
}

simulated function string GetDefaultCharacter()
{
    local PlayerController P;
    local int MyTeam, OwnerTeam;

    // End:0x31
    if(!class'Misc_Player'.default.bForceRedEnemyModel && !class'Misc_Player'.default.bForceBlueAllyModel)
    {
        return super.GetDefaultCharacter();
    }
    MyTeam = GetTeamNum();
    // End:0x50
    if(MyTeam == 255)
    {
        return CheckAndGetCharacter();
    }
    P = Level.GetLocalPlayerController();
    // End:0x202
    if((P != none) && P.PlayerReplicationInfo != none)
    {
        OwnerTeam = P.GetTeamNum();
        // End:0x154
        if(class'Misc_Player'.default.bUseTeamModels || OwnerTeam == 255)
        {
            // End:0x10D
            if(MyTeam == 1)
            {
                // End:0x103
                if(class'Misc_Player'.default.bForceBlueAllyModel)
                {
                    PlacedCharacterName = class'Misc_Player'.default.BlueAllyModel;
                    PlacedFemaleCharacterName = class'Misc_Player'.default.BlueAllyModel;
                }
                // End:0x10A
                else
                {
                    return CheckAndGetCharacter();
                }
            }
            // End:0x151
            else
            {
                // End:0x14A
                if(class'Misc_Player'.default.bForceRedEnemyModel)
                {
                    PlacedCharacterName = class'Misc_Player'.default.RedEnemyModel;
                    PlacedFemaleCharacterName = class'Misc_Player'.default.RedEnemyModel;
                }
                // End:0x151
                else
                {
                    return CheckAndGetCharacter();
                }
            }
        }
        // End:0x202
        else
        {
            // End:0x202
            if(!class'Misc_Player'.default.bUseTeamModels)
            {
                // End:0x1BE
                if(MyTeam == OwnerTeam)
                {
                    // End:0x1B4
                    if(class'Misc_Player'.default.bForceBlueAllyModel)
                    {
                        PlacedCharacterName = class'Misc_Player'.default.BlueAllyModel;
                        PlacedFemaleCharacterName = class'Misc_Player'.default.BlueAllyModel;
                    }
                    // End:0x1BB
                    else
                    {
                        return CheckAndGetCharacter();
                    }
                }
                // End:0x202
                else
                {
                    // End:0x1FB
                    if(class'Misc_Player'.default.bForceRedEnemyModel)
                    {
                        PlacedCharacterName = class'Misc_Player'.default.RedEnemyModel;
                        PlacedFemaleCharacterName = class'Misc_Player'.default.RedEnemyModel;
                    }
                    // End:0x202
                    else
                    {
                        return CheckAndGetCharacter();
                    }
                }
            }
        }
    }
    return CheckAndGetCharacter();
    //return;    
}

simulated function bool ForceDefaultCharacter()
{
    local PlayerController P;
    local int MyTeam, OwnerTeam;

    // End:0x31
    if(!class'Misc_Player'.default.bForceRedEnemyModel && !class'Misc_Player'.default.bForceBlueAllyModel)
    {
        return super.ForceDefaultCharacter();
    }
    MyTeam = GetTeamNum();
    // End:0x50
    if(MyTeam == 255)
    {
        return super.ForceDefaultCharacter();
    }
    P = Level.GetLocalPlayerController();
    // End:0x132
    if((P != none) && P.PlayerReplicationInfo != none)
    {
        OwnerTeam = P.GetTeamNum();
        // End:0xEC
        if(class'Misc_Player'.default.bUseTeamModels || OwnerTeam == 255)
        {
            // End:0xD9
            if(MyTeam == 1)
            {
                return class'Misc_Player'.default.bForceBlueAllyModel;
            }
            // End:0xE9
            else
            {
                return class'Misc_Player'.default.bForceRedEnemyModel;
            }
        }
        // End:0x132
        else
        {
            // End:0x132
            if(!class'Misc_Player'.default.bUseTeamModels)
            {
                // End:0x122
                if(MyTeam == OwnerTeam)
                {
                    return class'Misc_Player'.default.bForceBlueAllyModel;
                }
                // End:0x132
                else
                {
                    return class'Misc_Player'.default.bForceRedEnemyModel;
                }
            }
        }
    }
    return true;
    //return;    
}

simulated function bool CheckValid(string Name)
{
    return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((Name ~= "Abaddon") || Name ~= "Ambrosia") || Name ~= "Annika") || Name ~= "Arclite") || Name ~= "Aryss") || Name ~= "Asp") || Name ~= "Axon") || Name ~= "Azure") || Name ~= "Baird") || Name ~= "BlackJack") || Name ~= "Barktooth") || Name ~= "Brock") || Name ~= "Brutalis") || Name ~= "Cannonball") || Name ~= "Cathode") || Name ~= "ClanLord") || Name ~= "Cleopatra") || Name ~= "Cobalt") || Name ~= "Corrosion") || Name ~= "Cyclops") || Name ~= "Damarus") || Name ~= "Diva") || Name ~= "Divisor") || Name ~= "Domina") || Name ~= "Dominator") || Name ~= "Drekorig") || Name ~= "Enigma") || Name ~= "Faraleth") || Name ~= "Fate") || Name ~= "Frostbite") || Name ~= "Gaargod") || Name ~= "Garrett") || Name ~= "Gkublok") || Name ~= "Gorge") || Name ~= "Greith") || Name ~= "Guardian") || Name ~= "Harlequin") || Name ~= "Horus") || Name ~= "Hyena") || Name ~= "Jakob") || Name ~= "Kaela") || Name ~= "Kane") || Name ~= "Kareg") || Name ~= "Komek") || Name ~= "Kraagesh") || Name ~= "Kragoth") || Name ~= "Lauren") || Name ~= "Lilith") || Name ~= "Makreth") || Name ~= "Malcolm") || Name ~= "Mandible") || Name ~= "Matrix") || Name ~= "Mekkor") || Name ~= "Memphis") || Name ~= "Mokara") || Name ~= "Motig") || Name ~= "Mr.Crow") || Name ~= "Nebri") || Name ~= "Nebri") || Name ~= "Ophelia") || Name ~= "Othello") || Name ~= "Outlaw") || Name ~= "Prism") || Name ~= "Rae") || Name ~= "Rapier") || Name ~= "Ravage") || Name ~= "Reinha") || Name ~= "Remus") || Name ~= "Renegade") || Name ~= "Riker") || Name ~= "Roc") || Name ~= "Romulus") || Name ~= "Rylisa") || Name ~= "Sapphire") || Name ~= "Satin") || Name ~= "Scarab") || Name ~= "Selig") || Name ~= "Siren") || Name ~= "Skakruk") || Name ~= "Skrilax") || Name ~= "Subversa") || Name ~= "Syzygy") || Name ~= "Tamika") || Name ~= "Thannis") || Name ~= "Torch") || Name ~= "Thorax") || Name ~= "Virus") || Name ~= "Widowmaker") || Name ~= "Wraith") || Name ~= "Xan") || Name ~= "Zarina";
    //return;    
}

simulated function Setup(PlayerRecord Rec, optional bool bLoadNow)
{
    local string DefaultSkin;
    local PlayerController P;

    DefaultSkin = GetDefaultCharacter();
    // End:0x116
    if((PlayerReplicationInfo != none) && ((((((PlayerReplicationInfo.CharacterName ~= "Virus") || PlayerReplicationInfo.CharacterName ~= "Enigma") || PlayerReplicationInfo.CharacterName ~= "Xan") || PlayerReplicationInfo.CharacterName ~= "Cyclops") || PlayerReplicationInfo.CharacterName ~= "Axon") || PlayerReplicationInfo.CharacterName ~= "Matrix") || !CheckValid(PlayerReplicationInfo.CharacterName))
    {
        // End:0x116
        if((Controller == none) || Controller.IsA('Bot'))
        {
            Rec = class'xUtil'.static.FindPlayerRecord(DefaultSkin);
        }
    }
    // End:0x14B
    if((Rec.Species == none) || ForceDefaultCharacter())
    {
        Rec = class'xUtil'.static.FindPlayerRecord(DefaultSkin);
    }
    Species = Rec.Species;
    RagdollOverride = Rec.Ragdoll;
    // End:0x1BB
    if(!Species.static.Setup(self, Rec))
    {
        Rec = class'xUtil'.static.FindPlayerRecord(DefaultSkin);
        // End:0x1BB
        if(!Species.static.Setup(self, Rec))
        {
            return;
        }
    }
    ResetPhysicsBasedAnim();
    // End:0x1DC
    if(Level.NetMode == NM_DedicatedServer)
    {
        return;
    }
    P = Level.GetLocalPlayerController();
    // End:0x1FE
    if(P == none)
    {
        return;
    }
    bNoCoronas = true;
    // End:0x22E
    if(MyOwner == none)
    {
        MyOwner = Misc_Player(P);
        // End:0x22E
        if(MyOwner == none)
        {
            return;
        }
    }
    bBrightSkins = class'Misc_Player'.default.bUseBrightSkins;
    // End:0x2B3
    if(bBrightSkins)
    {
        // End:0x265
        if(OrigBody == none)
        {
            OrigBody = Skins[0];
        }
        // End:0x27F
        if(SkinColor == none)
        {
            SkinColor = new (none) class'ConstantColor';
        }
        // End:0x299
        if(OverlayColor == none)
        {
            OverlayColor = new (none) class'ConstantColor';
        }
        // End:0x2B3
        if(Combined == none)
        {
            Combined = new (none) class'Combiner';
        }
    }
    //return;    
}

simulated function RemoveFlamingEffects()
{
    local int i;

    // End:0x1B
    if(Level.NetMode == NM_DedicatedServer)
    {
        return;
    }
    i = 0;
    J0x22:
    // End:0x108 [Loop If]
    if(i < Attached.Length)
    {
        // End:0xFE
        if(((((Attached[i].IsA('xEmitter') && !Attached[i].IsA('BloodJet')) && !Attached[i].IsA('Emitter_SeeInvis')) && !Attached[i].IsA('SpeedTrail')) && !Attached[i].IsA('RegenCrosses')) && !Attached[i].IsA('OffensiveEffect'))
        {
            xEmitter(Attached[i]).mRegen = false;
        }
        ++ i;
        // [Loop Continue]
        goto J0x22;
    }
    //return;    
}

simulated function Tick(float DeltaTime)
{
    super.Tick(DeltaTime);
    // End:0x26
    if(Level.NetMode == NM_DedicatedServer)
    {
        return;
    }
    // End:0x4B
    if(MyOwner == none)
    {
        MyOwner = Misc_Player(Level.GetLocalPlayerController());
    }
    // End:0x125
    if(MyOwner != none)
    {
        // End:0xE8
        if(bInvis)
        {
            // End:0xA9
            if(MyOwner.bSeeInvis)
            {
                // End:0x96
                if(InvisEmitter == none)
                {
                    InvisEmitter = Spawn(class'Emitter_SeeInvis', self,, Location, Rotation);
                }
                AttachToBone(InvisEmitter, 'spine');
            }
            // End:0xE3
            else
            {
                // End:0xE3
                if(InvisEmitter != none)
                {
                    DetachFromBone(InvisEmitter);
                    InvisEmitter.mRegen = false;
                    InvisEmitter.Destroy();
                    InvisEmitter = none;
                }
            }
            return;
        }
        // End:0x122
        else
        {
            // End:0x122
            if(InvisEmitter != none)
            {
                DetachFromBone(InvisEmitter);
                InvisEmitter.mRegen = false;
                InvisEmitter.Destroy();
                InvisEmitter = none;
            }
        }
    }
    // End:0x130
    else
    {
        // End:0x130
        if(bInvis)
        {
            return;
        }
    }
    // End:0x13B
    if(bPlayedDeath)
    {
        return;
    }
    bBrightSkins = class'Misc_Player'.default.bUseBrightSkins;
    SetSkin(-1);
    //return;    
}

simulated function SetSkin(int OverrideTeamIndex)
{
    // End:0x2D
    if(bBrightSkins)
    {
        // End:0x1F
        if(OverlayType != 0)
        {
            SetOverlaySkin();
        }
        // End:0x2A
        else
        {
            SetBrightSkin(-1);
        }
    }
    // End:0x33
    else
    {
        SetStandardSkin();
    }
    //return;    
}

simulated event PlayDying(class<DamageType> DamageType, Vector HitLoc)
{
    SetStandardSkin();
    bUnlit = false;
    super.PlayDying(DamageType, HitLoc);
    //return;    
}

simulated function SetStandardSkin()
{
    // End:0x18
    if(OrigBody != none)
    {
        Skins[0] = OrigBody;
    }
    bUnlit = true;
    //return;    
}

static simulated function ClampColor(out Color Color)
{
    Color.R = byte((float(Min(Color.R, 100)) / 100.0) * 128.0);
    Color.G = byte((float(Min(Color.G, 100)) / 100.0) * 128.0);
    Color.B = byte((float(Min(Color.B, 100)) / 100.0) * 128.0);
    Color.A = 128;
    //return;    
}

simulated function SetBrightSkin(int OverrideTeamIndex)
{
    local int TeamIndex, OwnerTeam;
    local bool ShowYellow, IsEnemy, GameEnded;

    // End:0x29
    if((MyOwner != none) && MyOwner.IsInState('GameEnded'))
    {
        GameEnded = true;
    }
    // End:0x45
    if((OverrideTeamIndex == -1) && GameEnded)
    {
        return;
    }
    // End:0x5D
    if(OrigBody == none)
    {
        OrigBody = Skins[0];
    }
    // End:0x77
    if(SkinColor == none)
    {
        SkinColor = new (none) class'ConstantColor';
    }
    // End:0x91
    if(OverlayColor == none)
    {
        OverlayColor = new (none) class'ConstantColor';
    }
    // End:0xAB
    if(Combined == none)
    {
        Combined = new (none) class'Combiner';
    }
    // End:0xC8
    if(OverrideTeamIndex != -1)
    {
        TeamIndex = OverrideTeamIndex;
    }
    // End:0xD4
    else
    {
        TeamIndex = GetTeamNum();
    }
    IsEnemy = ((MyOwner != none) && MyOwner.GetTeamNum() != TeamIndex) || TeamIndex == 255;
    ShowYellow = (IsEnemy && IsSpawnProtectionEnabled()) && !GameEnded;
    // End:0x21B
    if(((MyOwner != none) && MyOwner.PlayerReplicationInfo != none) && MyOwner.PlayerReplicationInfo.bOnlySpectator)
    {
        // End:0x210
        if(((Pawn(MyOwner.ViewTarget) != none) && Pawn(MyOwner.ViewTarget).PlayerReplicationInfo != none) && Pawn(MyOwner.ViewTarget).PlayerReplicationInfo.Team != none)
        {
            OwnerTeam = Pawn(MyOwner.ViewTarget).PlayerReplicationInfo.Team.TeamIndex;
        }
        // End:0x218
        else
        {
            OwnerTeam = 255;
        }
    }
    // End:0x230
    else
    {
        OwnerTeam = MyOwner.GetTeamNum();
    }
    // End:0x310
    if((((OverrideTeamIndex == -1) && MyOwner != none) && OwnerTeam != 255) && !class'Misc_Player'.default.bUseTeamColors)
    {
        // End:0x299
        if(ShowYellow)
        {
            SkinColor.Color = class'Misc_Player'.default.Yellow;
        }
        // End:0x30D
        else
        {
            // End:0x2F0
            if((MyOwner.PlayerReplicationInfo != PlayerReplicationInfo) && (OwnerTeam == 255) || TeamIndex != OwnerTeam)
            {
                SkinColor.Color = class'Misc_Player'.default.RedOrEnemy;
            }
            // End:0x30D
            else
            {
                SkinColor.Color = class'Misc_Player'.default.BlueOrAlly;
            }
        }
    }
    // End:0x3E1
    else
    {
        // End:0x362
        if(MyOwner == none)
        {
            // End:0x34B
            if((TeamIndex == 0) || TeamIndex == 255)
            {
                SkinColor.Color = RedColor;
            }
            // End:0x35F
            else
            {
                SkinColor.Color = BlueColor;
            }
        }
        // End:0x3E1
        else
        {
            // End:0x38B
            if(ShowYellow)
            {
                SkinColor.Color = class'Misc_Player'.default.Yellow;
            }
            // End:0x3E1
            else
            {
                // End:0x3C4
                if((TeamIndex == 0) || TeamIndex == 255)
                {
                    SkinColor.Color = class'Misc_Player'.default.RedOrEnemy;
                }
                // End:0x3E1
                else
                {
                    SkinColor.Color = class'Misc_Player'.default.BlueOrAlly;
                }
            }
        }
    }
    ClampColor(SkinColor.Color);
    Combined.CombineOperation = 3;
    Combined.Material1 = GetSkin();
    Combined.Material2 = SkinColor;
    Skins[0] = Combined;
    bUnlit = true;
    //return;    
}

simulated function Material GetSkin()
{
    local Material TempSkin;
    local string Skin;

    // End:0x11
    if(SavedBody != none)
    {
        return SavedBody;
    }
    Skin = string(Skins[0]);
    // End:0x61
    if((Right(Skin, 2) == "_0") || Right(Skin, 2) == "_1")
    {
        Skin = Left(Skin, Len(Skin) - 2);
    }
    // End:0xB9
    else
    {
        // End:0xB9
        if((Right(Skin, 3) == "_0B") || Right(Skin, 3) == "_1B")
        {
            Skin = Right(Skin, Len(Skin) - 6);
            Skin = Left(Skin, Len(Skin) - 3);
        }
    }
    TempSkin = Material(DynamicLoadObject(Skin, class'Material', true));
    // End:0xED
    if(TempSkin == none)
    {
        TempSkin = Skins[0];
    }
    SavedBody = TempSkin;
    return SavedBody;
    //return;    
}

simulated function SetOverlaySkin()
{
    // End:0x1A
    if((OverlayColor == none) || Combined == none)
    {
        return;
    }
    OverlayColor.Color = OverlayColors[OverlayType - 1];
    Combined.Material1 = GetSkin();
    Combined.Material2 = OverlayColor;
    Skins[0] = Combined;
    //return;    
}

function Timer()
{
    OverlayType = 0;
    //return;    
}

simulated function bool IsSpawnProtectionEnabled()
{
    return SpawnProtectionEnabled;
    //return;    
}

function ActivateSpawnProtection()
{
    SpawnProtectionEnabled = true;
    SpawnProtectionTimer = default.SpawnProtectionTimer;
    //return;    
}

function DeactivateSpawnProtection()
{
    // End:0x44
    if(SpawnProtectionEnabled && SpawnProtectionTimer != default.SpawnProtectionTimer)
    {
        // End:0x44
        if(PlayerController(Controller) != none)
        {
            PlayerController(Controller).ReceiveLocalizedMessage(class'Message_SpawnProtection', 0);
        }
    }
    SpawnProtectionEnabled = false;
    SpawnProtectionTimer = 0;
    //return;    
}

function UpdateSpawnProtection()
{
    // End:0x0D
    if(SpawnProtectionTimer == 0)
    {
        return;
    }
    -- SpawnProtectionTimer;
    // End:0x42
    if(PlayerController(Controller) != none)
    {
        PlayerController(Controller).ReceiveLocalizedMessage(class'Message_SpawnProtection', SpawnProtectionTimer);
    }
    // End:0x4F
    if(SpawnProtectionTimer > 0)
    {
        return;
    }
    DeactivateSpawnProtection();
    //return;    
}

defaultproperties
{
    RedColor=(R=100,G=0,B=0,A=0)
    BlueColor=(R=0,G=25,B=100,A=0)
    OverlayColors[0]=(R=128,G=80,B=0,A=128)
    OverlayColors[1]=(R=64,G=96,B=128,A=128)
    OverlayColors[2]=(R=80,G=0,B=110,A=128)
    OverlayColors[3]=(R=64,G=128,B=64,A=128)
    SpawnProtectionTimer=4
    ShieldHitMatTime=0.350
    bPlayOwnFootsteps=false
    RequiredEquipment[0]="XWeapons.ShieldGun"
    RequiredEquipment[1]="XWeapons.AssaultRifle"
}