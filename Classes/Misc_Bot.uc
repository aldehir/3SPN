/*******************************************************************************
 * Misc_Bot generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Misc_Bot extends xBot
    config(User);

var bool ActiveThisRound;

function Reset()
{
    local NavigationPoint P;
    local float Adren;

    Adren = Adrenaline;
    P = StartSpot;
    super(Bot).Reset();
    StartSpot = P;
    // End:0x56
    if((Pawn == none) || !Pawn.InCurrentCombo())
    {
        Adrenaline = Adren;
    }
    // End:0x61
    else
    {
        Adrenaline = 0.10;
    }
    //return;    
}

function SetPawnClass(string inClass, string InCharacter)
{
    local class<Misc_Pawn> pClass;

    // End:0x3D
    if(inClass != "")
    {
        pClass = class<Misc_Pawn>(DynamicLoadObject(inClass, class'Class'));
        // End:0x3D
        if(pClass != none)
        {
            PawnClass = pClass;
        }
    }
    PawnSetupRecord = class'xUtil'.static.FindPlayerRecord(InCharacter);
    PlayerReplicationInfo.SetCharacterName(InCharacter);
    //return;    
}

function PawnDied(Pawn P)
{
    local float Adren;

    Adren = Adrenaline;
    super(Controller).PawnDied(P);
    Adrenaline = Adren;
    // End:0x65
    if((PlayerReplicationInfo != none) && TAM_TeamInfo(PlayerReplicationInfo.Team) != none)
    {
        TAM_TeamInfo(PlayerReplicationInfo.Team).PlayerDied(self);
    }
    //return;    
}

function TryCombo(string ComboName)
{
    local class<Combo> ComboClass;

    // End:0x48
    if((TAM_GRI(Level.GRI) == none) || TAM_GRI(Level.GRI).bDisableTeamCombos)
    {
        super(Bot).TryCombo(ComboName);
        return;
    }
    // End:0x17A
    if(!Pawn.InCurrentCombo() && !NeedsAdrenaline())
    {
        // End:0x8E
        if(ComboName ~= "Random")
        {
            ComboName = ComboNames[Rand(4)];
        }
        // End:0xB8
        else
        {
            // End:0xB8
            if(ComboName ~= "DMRandom")
            {
                ComboName = ComboNames[1 + Rand(4 - 1)];
            }
        }
        ComboName = Level.Game.NewRecommendCombo(ComboName, self);
        // End:0xF5
        if(ComboName ~= "xGame.Combo")
        {
            return;
        }
        ComboClass = class<Combo>(DynamicLoadObject(ComboName, class'Class'));
        // End:0x17A
        if(ComboClass != none)
        {
            // End:0x13E
            if(ComboClass.default.Duration <= float(1))
            {
                super(Bot).TryCombo(ComboName);
                return;
            }
            // End:0x17A
            if(TAM_TeamInfo(PlayerReplicationInfo.Team) != none)
            {
                TAM_TeamInfo(PlayerReplicationInfo.Team).PlayerUsedCombo(self, ComboClass);
            }
        }
    }
    //return;    
}

function AwardAdrenaline(float Amount)
{
    // End:0x85
    if(bAdrenalineEnabled)
    {
        // End:0x67
        if(((TAM_GRI(Level.GRI) == none) || TAM_GRI(Level.GRI).bDisableTeamCombos) && (Pawn != none) && Pawn.InCurrentCombo())
        {
            return;
        }
        Adrenaline = FClamp(Adrenaline + Amount, 0.10, AdrenalineMax);
    }
    //return;    
}

defaultproperties
{
    PlayerReplicationInfoClass=class'Misc_PRI'
    Adrenaline=0.10
}