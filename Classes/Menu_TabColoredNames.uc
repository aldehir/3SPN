/*******************************************************************************
 * Menu_TabColoredNames generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Menu_TabColoredNames extends UT2K3TabPanel
    editinlinenew
    instanced;

var() automated GUILabel l_ColorNameLetters[20];
var() automated GUILabel l_LetterSelection;
var() automated moCheckBox ch_ColorChat;
var() automated moCheckBox ch_ColorScoreboard;
var() automated moCheckBox ch_ColorHUD;
var() automated moCheckBox ch_ColorQ3;
var() automated moCheckBox ch_EnemyNames;
var() automated GUIComboBox co_SavedNames;
var() automated GUIButton bu_SaveName;
var() automated GUIButton bu_DeleteName;
var() automated GUIButton bu_ResetWhite;
var() automated GUIButton bu_Apply;
var() automated GUISlider sl_RedColor;
var() automated GUISlider sl_BlueColor;
var() automated GUISlider sl_GreenColor;
var() automated GUILabel l_RedLabel;
var() automated GUILabel l_BlueLabel;
var() automated GUILabel l_GreenLabel;
var() automated GUISlider sl_LetterSelect;
var() automated moComboBox co_DeathSelect;
var() automated GUILabel l_SettingsLabel;

function bool AllowOpen(string MenuClass)
{
    // End:0x1F
    if((PlayerOwner() == none) || PlayerOwner().PlayerReplicationInfo == none)
    {
        return false;
    }
    return true;
    //return;    
}

event Opened(GUIComponent Sender)
{
    local bool OldDirty;

    OldDirty = class'Menu_Menu3SPN'.default.SettingsDirty;
    // End:0x6C
    if(class'Misc_Player'.default.CurrentSelectedColoredName < class'Misc_Player'.default.ColoredName.Length)
    {
        co_SavedNames.SetIndex(class'Misc_Player'.default.CurrentSelectedColoredName);
        SpecialInitSliderAndLetters(class'Misc_Player'.default.CurrentSelectedColoredName);
    }
    // End:0x72
    else
    {
        InitSliderAndLetters();
    }
    super(GUIMultiComponent).Opened(Sender);
    class'Menu_Menu3SPN'.default.SettingsDirty = OldDirty;
    //return;    
}

function InitComponent(GUIController MyController, GUIComponent MyOwner)
{
    local int i;
    local bool OldDirty;

    super(GUIPanel).InitComponent(MyController, MyOwner);
    OldDirty = class'Menu_Menu3SPN'.default.SettingsDirty;
    i = 0;
    J0x2D:
    // End:0x76 [Loop If]
    if(i < class'Misc_Player'.default.ColoredName.Length)
    {
        co_SavedNames.AddItem(Misc_Player(PlayerOwner()).FindColoredName(i));
        ++ i;
        // [Loop Continue]
        goto J0x2D;
    }
    co_SavedNames.ReadOnly(true);
    // End:0xDC
    if(class'Misc_Player'.default.CurrentSelectedColoredName < class'Misc_Player'.default.ColoredName.Length)
    {
        co_SavedNames.SetIndex(class'Misc_Player'.default.CurrentSelectedColoredName);
        SpecialInitSliderAndLetters(class'Misc_Player'.default.CurrentSelectedColoredName);
    }
    // End:0xE2
    else
    {
        InitSliderAndLetters();
    }
    SetColorSliders(0);
    ch_ColorChat.Checked(class'Misc_Player'.default.bEnableColoredNamesInTalk);
    ch_ColorScoreboard.Checked(class'TAM_Scoreboard'.default.bEnableColoredNamesOnScoreboard);
    ch_ColorHUD.Checked(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD);
    ch_ColorQ3.Checked(class'Misc_Player'.default.bAllowColoredMessages);
    ch_EnemyNames.Checked(class'Misc_Player'.default.bEnableColoredNamesOnEnemies);
    co_DeathSelect.AddItem("Disabled");
    co_DeathSelect.AddItem("Colored Names");
    co_DeathSelect.AddItem("Red/Blue Colored Names");
    co_DeathSelect.ReadOnly(true);
    // End:0x214
    if(class'Misc_DeathMessage'.default.bEnableTeamColoredDeaths)
    {
        co_DeathSelect.SetIndex(2);
    }
    // End:0x236
    else
    {
        // End:0x236
        if(class'Misc_DeathMessage'.default.bDrawColoredNamesInDeathMessages)
        {
            co_DeathSelect.SetIndex(1);
        }
    }
    class'Menu_Menu3SPN'.default.SettingsDirty = OldDirty;
    //return;    
}

function InitSliderAndLetters()
{
    local int i;

    // End:0x14
    if(PlayerOwner().PlayerReplicationInfo == none)
    {
        return;
    }
    i = 0;
    J0x1B:
    // End:0x1A5 [Loop If]
    if(i < Len(PlayerOwner().PlayerReplicationInfo.PlayerName))
    {
        class'Misc_Player'.default.colorname[i].A = byte(255);
        l_ColorNameLetters[i].TextFont = "UT2LargeFont";
        l_ColorNameLetters[i].WinTop = 0.460;
        l_ColorNameLetters[i].WinWidth = 0.0290;
        l_ColorNameLetters[i].WinLeft = (0.50 - ((0.50 * 0.030) * float(Len(PlayerOwner().PlayerReplicationInfo.PlayerName)))) + (0.030 * float(i));
        l_ColorNameLetters[i].StyleName = "TextLabel";
        l_ColorNameLetters[i].Caption = Right(Left(PlayerOwner().PlayerReplicationInfo.PlayerName, i + 1), 1);
        l_ColorNameLetters[i].TextColor = class'Misc_Player'.default.colorname[i];
        l_ColorNameLetters[i].TextAlign = 1;
        ++ i;
        // [Loop Continue]
        goto J0x1B;
    }
    i = Len(PlayerOwner().PlayerReplicationInfo.PlayerName);
    J0x1C2:
    // End:0x1EF [Loop If]
    if(i < 20)
    {
        l_ColorNameLetters[i].Caption = "";
        ++ i;
        // [Loop Continue]
        goto J0x1C2;
    }
    sl_LetterSelect.MinValue = 1.0;
    sl_LetterSelect.WinLeft = 0.50 - ((0.50 * 0.030) * float(Len(PlayerOwner().PlayerReplicationInfo.PlayerName)));
    sl_LetterSelect.MaxValue = float(Min(Len(PlayerOwner().PlayerReplicationInfo.PlayerName), 20));
    sl_LetterSelect.WinWidth = 0.02970 * float(Min(Len(PlayerOwner().PlayerReplicationInfo.PlayerName), 20));
    sl_LetterSelect.BarStyle = none;
    sl_LetterSelect.FillImage = none;
    //return;    
}

function SpecialInitSliderAndLetters(int j)
{
    local int i;

    i = 0;
    J0x07:
    // End:0x1A8 [Loop If]
    if(i < Len(class'Misc_Player'.default.ColoredName[j].SavedName))
    {
        class'Misc_Player'.default.colorname[i].A = byte(255);
        l_ColorNameLetters[i].TextFont = "UT2LargeFont";
        l_ColorNameLetters[i].WinTop = 0.460;
        l_ColorNameLetters[i].WinWidth = 0.0290;
        l_ColorNameLetters[i].WinLeft = (0.50 - ((0.50 * 0.030) * float(Len(class'Misc_Player'.default.ColoredName[j].SavedName)))) + (0.030 * float(i));
        l_ColorNameLetters[i].StyleName = "TextLabel";
        l_ColorNameLetters[i].Caption = Right(Left(class'Misc_Player'.default.ColoredName[j].SavedName, i + 1), 1);
        l_ColorNameLetters[i].TextColor = class'Misc_Player'.default.ColoredName[j].SavedColor[i];
        l_ColorNameLetters[i].TextAlign = 1;
        ++ i;
        // [Loop Continue]
        goto J0x07;
    }
    i = Len(class'Misc_Player'.default.ColoredName[j].SavedName);
    J0x1C9:
    // End:0x1F6 [Loop If]
    if(i < 20)
    {
        l_ColorNameLetters[i].Caption = "";
        ++ i;
        // [Loop Continue]
        goto J0x1C9;
    }
    sl_LetterSelect.MinValue = 1.0;
    sl_LetterSelect.WinLeft = 0.50 - ((0.50 * 0.030) * float(Len(PlayerOwner().PlayerReplicationInfo.PlayerName)));
    sl_LetterSelect.MaxValue = float(Min(Len(PlayerOwner().PlayerReplicationInfo.PlayerName), 20));
    sl_LetterSelect.WinWidth = 0.02970 * float(Min(Len(PlayerOwner().PlayerReplicationInfo.PlayerName), 20));
    sl_LetterSelect.BarStyle = none;
    sl_LetterSelect.FillImage = none;
    //return;    
}

function SetColorSliders(byte offset)
{
    sl_RedColor.SetValue(float(class'Misc_Player'.default.colorname[offset].R));
    sl_GreenColor.SetValue(float(class'Misc_Player'.default.colorname[offset].G));
    sl_BlueColor.SetValue(float(class'Misc_Player'.default.colorname[offset].B));
    //return;    
}

function InternalOnChange(GUIComponent C)
{
    switch(C)
    {
        // End:0x31
        case ch_ColorChat:
            class'Misc_Player'.default.bEnableColoredNamesInTalk = ch_ColorChat.IsChecked();
            // End:0x310
            break;
        // End:0x5B
        case ch_ColorScoreboard:
            class'TAM_Scoreboard'.default.bEnableColoredNamesOnScoreboard = ch_ColorScoreboard.IsChecked();
            // End:0x310
            break;
        // End:0x85
        case ch_ColorHUD:
            class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD = ch_ColorHUD.IsChecked();
            // End:0x310
            break;
        // End:0xAF
        case ch_ColorQ3:
            class'Misc_Player'.default.bAllowColoredMessages = ch_ColorQ3.IsChecked();
            // End:0x310
            break;
        // End:0xD9
        case ch_EnemyNames:
            class'Misc_Player'.default.bEnableColoredNamesOnEnemies = ch_EnemyNames.IsChecked();
            // End:0x310
            break;
        // End:0x129
        case co_DeathSelect:
            class'Misc_DeathMessage'.default.bEnableTeamColoredDeaths = co_DeathSelect.GetIndex() == 2;
            class'Misc_DeathMessage'.default.bDrawColoredNamesInDeathMessages = co_DeathSelect.GetIndex() == 1;
            // End:0x310
            break;
        // End:0x14F
        case sl_LetterSelect:
            SetColorSliders(byte(sl_LetterSelect.Value - float(1)));
            // End:0x310
            break;
        // End:0x1E0
        case sl_RedColor:
            class'Misc_Player'.default.colorname[int(sl_LetterSelect.Value - float(1))].R = byte(sl_RedColor.Value);
            Misc_Player(PlayerOwner()).SetColoredNameOldStyle();
            l_ColorNameLetters[int(sl_LetterSelect.Value - float(1))].TextColor.R = byte(sl_RedColor.Value);
            // End:0x310
            break;
        // End:0x271
        case sl_BlueColor:
            class'Misc_Player'.default.colorname[int(sl_LetterSelect.Value - float(1))].B = byte(sl_BlueColor.Value);
            Misc_Player(PlayerOwner()).SetColoredNameOldStyle();
            l_ColorNameLetters[int(sl_LetterSelect.Value - float(1))].TextColor.B = byte(sl_BlueColor.Value);
            // End:0x310
            break;
        // End:0x302
        case sl_GreenColor:
            class'Misc_Player'.default.colorname[int(sl_LetterSelect.Value - float(1))].G = byte(sl_GreenColor.Value);
            Misc_Player(PlayerOwner()).SetColoredNameOldStyle();
            l_ColorNameLetters[int(sl_LetterSelect.Value - float(1))].TextColor.G = byte(sl_GreenColor.Value);
            // End:0x310
            break;
        // End:0x30D
        case co_SavedNames:
            // End:0x310
            break;
        // End:0xFFFF
        default:
            Misc_Player(PlayerOwner()).ReloadDefaults();
            class'Misc_Player'.static.StaticSaveConfig();
            class'TAM_Scoreboard'.static.StaticSaveConfig();
            class'Misc_DeathMessage'.static.StaticSaveConfig();
            class'Menu_Menu3SPN'.default.SettingsDirty = true;
            //return;
    }    
}

function bool InternalOnClick(GUIComponent Sender)
{
    local int i;

    switch(Sender)
    {
        // End:0x77
        case bu_SaveName:
            Misc_Player(PlayerOwner()).SaveNewColoredName();
            co_SavedNames.ReadOnly(false);
            co_SavedNames.AddItem(Misc_Player(PlayerOwner()).FindColoredName(class'Misc_Player'.default.ColoredName.Length - 1));
            co_SavedNames.ReadOnly(true);
            // End:0x38B
            break;
        // End:0x1E6
        case bu_DeleteName:
            // End:0xD8
            if((class'Misc_Player'.default.ColoredName.Length > co_SavedNames.GetIndex()) && co_SavedNames.GetIndex() >= 0)
            {
                class'Misc_Player'.default.ColoredName.Remove(co_SavedNames.GetIndex(), 1);
            }
            // End:0x190
            if(class'Misc_Player'.default.CurrentSelectedColoredName != 255)
            {
                // End:0x147
                if(class'Misc_Player'.default.CurrentSelectedColoredName > 0)
                {
                    // End:0x136
                    if(class'Misc_Player'.default.CurrentSelectedColoredName >= co_SavedNames.GetIndex())
                    {
                        -- class'Misc_Player'.default.CurrentSelectedColoredName;
                    }
                    // End:0x147
                    else
                    {
                        class'Misc_Player'.default.CurrentSelectedColoredName = 255;
                    }
                }
                // End:0x190
                if((class'Misc_Player'.default.CurrentSelectedColoredName >= class'Misc_Player'.default.ColoredName.Length) || class'Misc_Player'.default.CurrentSelectedColoredName < 0)
                {
                    class'Misc_Player'.default.CurrentSelectedColoredName = 255;
                }
            }
            // End:0x1E3
            if(co_SavedNames.ItemCount() > 0)
            {
                co_SavedNames.ReadOnly(false);
                co_SavedNames.RemoveItem(co_SavedNames.GetIndex());
                co_SavedNames.ReadOnly(true);
            }
            // End:0x38B
            break;
        // End:0x2D3
        case bu_ResetWhite:
            i = 0;
            J0x1F5:
            // End:0x2BF [Loop If]
            if(i < 20)
            {
                class'Misc_Player'.default.colorname[i].R = byte(255);
                class'Misc_Player'.default.colorname[i].G = byte(255);
                class'Misc_Player'.default.colorname[i].B = byte(255);
                l_ColorNameLetters[i].TextColor.R = byte(255);
                l_ColorNameLetters[i].TextColor.G = byte(255);
                l_ColorNameLetters[i].TextColor.B = byte(255);
                ++ i;
                // [Loop Continue]
                goto J0x1F5;
            }
            class'Misc_Player'.default.CurrentSelectedColoredName = 255;
            // End:0x38B
            break;
        // End:0x388
        case bu_Apply:
            // End:0x385
            if((co_SavedNames.GetIndex() < co_SavedNames.ItemCount()) && co_SavedNames.GetIndex() >= 0)
            {
                Misc_Player(PlayerOwner()).SetColoredNameOldStyleCustom(, co_SavedNames.GetIndex());
                class'Misc_Player'.default.CurrentSelectedColoredName = co_SavedNames.GetIndex();
                SpecialInitSliderAndLetters(co_SavedNames.GetIndex());
                SetColorSliders(byte(sl_LetterSelect.Value - float(1)));
            }
            // End:0x38B
            break;
        // End:0xFFFF
        default:
            Misc_Player(PlayerOwner()).ReloadDefaults();
            class'Misc_Player'.static.StaticSaveConfig();
            class'Menu_Menu3SPN'.default.SettingsDirty = true;
            return true;
    }
    //return;    
}

defaultproperties
{
    l_ColorNameLetters[0]=GUILabel'Menu_TabColoredNames.Label0'
    l_ColorNameLetters[1]=GUILabel'Menu_TabColoredNames.Label1'
    l_ColorNameLetters[2]=GUILabel'Menu_TabColoredNames.Label2'
    l_ColorNameLetters[3]=GUILabel'Menu_TabColoredNames.Label3'
    l_ColorNameLetters[4]=GUILabel'Menu_TabColoredNames.Label4'
    l_ColorNameLetters[5]=GUILabel'Menu_TabColoredNames.Label5'
    l_ColorNameLetters[6]=GUILabel'Menu_TabColoredNames.Label6'
    l_ColorNameLetters[7]=GUILabel'Menu_TabColoredNames.Label7'
    l_ColorNameLetters[8]=GUILabel'Menu_TabColoredNames.Label8'
    l_ColorNameLetters[9]=GUILabel'Menu_TabColoredNames.Label9'
    l_ColorNameLetters[10]=GUILabel'Menu_TabColoredNames.Label10'
    l_ColorNameLetters[11]=GUILabel'Menu_TabColoredNames.Label11'
    l_ColorNameLetters[12]=GUILabel'Menu_TabColoredNames.Label12'
    l_ColorNameLetters[13]=GUILabel'Menu_TabColoredNames.Label13'
    l_ColorNameLetters[14]=GUILabel'Menu_TabColoredNames.Label14'
    l_ColorNameLetters[15]=GUILabel'Menu_TabColoredNames.Label15'
    l_ColorNameLetters[16]=GUILabel'Menu_TabColoredNames.Label16'
    l_ColorNameLetters[17]=GUILabel'Menu_TabColoredNames.Label17'
    l_ColorNameLetters[18]=GUILabel'Menu_TabColoredNames.Label18'
    l_ColorNameLetters[19]=GUILabel'Menu_TabColoredNames.Label19'
    begin object name=ColorChatCheck class=moCheckBox
        Caption="Show colored names in chat messages"
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.10
        WinLeft=0.10
        WinWidth=0.80
        OnChange=InternalOnChange
    object end
    // Reference: moCheckBox'Menu_TabColoredNames.ColorChatCheck'
    ch_ColorChat=ColorChatCheck
    begin object name=ColorScoreboardCheck class=moCheckBox
        Caption="Show colored names on scoreboard"
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.150
        WinLeft=0.10
        WinWidth=0.80
        OnChange=InternalOnChange
    object end
    // Reference: moCheckBox'Menu_TabColoredNames.ColorScoreboardCheck'
    ch_ColorScoreboard=ColorScoreboardCheck
    begin object name=ColorHUDCheck class=moCheckBox
        Caption="Show colored names on HUD"
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.20
        WinLeft=0.10
        WinWidth=0.80
        OnChange=InternalOnChange
    object end
    // Reference: moCheckBox'Menu_TabColoredNames.ColorHUDCheck'
    ch_ColorHUD=ColorHUDCheck
    begin object name=Colorq3Check class=moCheckBox
        Caption="Show colored text in chat messages(Q3 Style)"
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.30
        WinLeft=0.10
        WinWidth=0.80
        OnChange=InternalOnChange
    object end
    // Reference: moCheckBox'Menu_TabColoredNames.Colorq3Check'
    ch_ColorQ3=Colorq3Check
    begin object name=EnemyNamesCheck class=moCheckBox
        Caption="Show colored enemy names on targeting"
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.250
        WinLeft=0.10
        WinWidth=0.80
        OnChange=InternalOnChange
    object end
    // Reference: moCheckBox'Menu_TabColoredNames.EnemyNamesCheck'
    ch_EnemyNames=EnemyNamesCheck
    begin object name=ComboSaved class=GUIComboBox
        WinTop=0.60
        WinLeft=0.140
        WinWidth=0.30
        WinHeight=0.040
        OnChange=InternalOnChange
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIComboBox'Menu_TabColoredNames.ComboSaved'
    co_SavedNames=ComboSaved
    begin object name=ButtonSave class=GUIButton
        Caption="Save"
        WinTop=0.650
        WinLeft=0.140
        WinWidth=0.130
        WinHeight=0.0750
        OnClick=InternalOnClick
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIButton'Menu_TabColoredNames.ButtonSave'
    bu_SaveName=ButtonSave
    begin object name=ButtonDelete class=GUIButton
        Caption="Delete"
        WinTop=0.650
        WinLeft=0.30
        WinWidth=0.140
        WinHeight=0.0750
        OnClick=InternalOnClick
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIButton'Menu_TabColoredNames.ButtonDelete'
    bu_DeleteName=ButtonDelete
    begin object name=ButtonWhite class=GUIButton
        Caption="Reset Colors"
        WinTop=0.740
        WinLeft=0.50
        WinWidth=0.40
        WinHeight=0.10
        OnClick=InternalOnClick
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIButton'Menu_TabColoredNames.ButtonWhite'
    bu_ResetWhite=ButtonWhite
    begin object name=ButtonApply class=GUIButton
        Caption="Use This Name"
        WinTop=0.740
        WinLeft=0.140
        WinWidth=0.30
        WinHeight=0.10
        OnClick=InternalOnClick
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIButton'Menu_TabColoredNames.ButtonApply'
    bu_Apply=ButtonApply
    begin object name=RedSlider class=GUISlider
        MaxValue=255.0
        bIntSlider=true
        WinTop=0.60
        WinLeft=0.60
        WinWidth=0.30
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=InternalOnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabColoredNames.RedSlider'
    sl_RedColor=RedSlider
    begin object name=BlueSlider class=GUISlider
        MaxValue=255.0
        bIntSlider=true
        WinTop=0.70
        WinLeft=0.60
        WinWidth=0.30
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=InternalOnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabColoredNames.BlueSlider'
    sl_BlueColor=BlueSlider
    begin object name=GreenSlider class=GUISlider
        MaxValue=255.0
        bIntSlider=true
        WinTop=0.650
        WinLeft=0.60
        WinWidth=0.30
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=InternalOnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabColoredNames.GreenSlider'
    sl_GreenColor=GreenSlider
    begin object name=RedLabel class=GUILabel
        Caption="Red"
        TextColor=(R=255,G=0,B=0,A=255)
        WinTop=0.590
        WinLeft=0.50
    object end
    // Reference: GUILabel'Menu_TabColoredNames.RedLabel'
    l_RedLabel=RedLabel
    begin object name=BlueLabel class=GUILabel
        Caption="Blue"
        TextColor=(R=64,G=0,B=255,A=255)
        WinTop=0.690
        WinLeft=0.50
    object end
    // Reference: GUILabel'Menu_TabColoredNames.BlueLabel'
    l_BlueLabel=BlueLabel
    begin object name=GreenLabel class=GUILabel
        Caption="Green"
        TextColor=(R=64,G=255,B=0,A=255)
        WinTop=0.640
        WinLeft=0.50
    object end
    // Reference: GUILabel'Menu_TabColoredNames.GreenLabel'
    l_GreenLabel=GreenLabel
    begin object name=LetterSlider class=GUISlider
        Value=1.0
        bIntSlider=true
        WinTop=0.510
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=InternalOnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabColoredNames.LetterSlider'
    sl_LetterSelect=LetterSlider
    begin object name=ColorDeathCombo class=moComboBox
        Caption="Death Message Color:"
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.350
        WinLeft=0.170
        WinWidth=0.660
        OnChange=InternalOnChange
    object end
    // Reference: moComboBox'Menu_TabColoredNames.ColorDeathCombo'
    co_DeathSelect=ColorDeathCombo
    begin object name=SettingsLabel class=GUILabel
        Caption="Only the active name can be saved on the server!"
        TextAlign=1
        TextColor=(R=255,G=255,B=0,A=255)
        WinTop=0.90
        WinLeft=0.10
        WinWidth=0.80
    object end
    // Reference: GUILabel'Menu_TabColoredNames.SettingsLabel'
    l_SettingsLabel=SettingsLabel
}