/*******************************************************************************
 * NewNet_ShockBeamEffect generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class NewNet_ShockBeamEffect extends ShockBeamEffect;

function AimAt(Vector hl, Vector hn)
{
    // End:0x26
    if(bNetOwner && Level.NetMode == NM_Client)
    {
        return;
    }
    super.AimAt(hl, hn);
    //return;    
}

simulated function PostBeginPlay()
{
    // End:0x26
    if(bNetOwner && Level.NetMode == NM_Client)
    {
        return;
    }
    super(Actor).PostBeginPlay();
    //return;    
}

simulated function PostNetBeginPlay()
{
    local PlayerController PC;

    super.PostNetBeginPlay();
    // End:0x21
    if(Level.NetMode != NM_Client)
    {
        return;
    }
    PC = Level.GetLocalPlayerController();
    // End:0x74
    if(((PC != none) && PC.Pawn != none) && PC.Pawn == Instigator)
    {
        Destroy();
    }
    //return;    
}

simulated function SpawnEffects()
{
    local ShockBeamCoil Coil;
    local xWeaponAttachment Attachment;
    local PlayerController PC;

    // End:0x6B
    if(Level.NetMode == NM_Client)
    {
        PC = Level.GetLocalPlayerController();
        // End:0x6B
        if(((PC != none) && PC.Pawn != none) && PC.Pawn == Instigator)
        {
            return;
        }
    }
    // End:0x1B9
    if(Instigator != none)
    {
        // End:0x100
        if(Instigator.IsFirstPerson())
        {
            // End:0xDD
            if((Instigator.Weapon != none) && Instigator.Weapon.Instigator == Instigator)
            {
                SetLocation(Instigator.Weapon.GetEffectStart());
            }
            // End:0xEE
            else
            {
                SetLocation(Instigator.Location);
            }
            Spawn(MuzFlashClass,,, Location);
        }
        // End:0x1B9
        else
        {
            Attachment = xPawn(Instigator).WeaponAttachment;
            // End:0x161
            if((Attachment != none) && (Level.TimeSeconds - Attachment.LastRenderTime) < float(1))
            {
                SetLocation(Attachment.GetTipLocation());
            }
            // End:0x1B1
            else
            {
                SetLocation((Instigator.Location + (Instigator.EyeHeight * vect(0.0, 0.0, 1.0))) + (Normal(mSpawnVecA - Instigator.Location) * 25.0));
            }
            Spawn(MuzFlash3Class);
        }
    }
    // End:0x20D
    if((EffectIsRelevant(mSpawnVecA + (HitNormal * float(2)), false)) && HitNormal != vect(0.0, 0.0, 0.0))
    {
        SpawnImpactEffects(rotator(HitNormal), mSpawnVecA + (HitNormal * float(2)));
    }
    // End:0x2DD
    if((((!Level.bDropDetail && Level.DetailMode != 0) && VSize(Location - mSpawnVecA) > float(40)) && !Level.GetLocalPlayerController().BeyondViewDistance(Location, 0.0)) || (Instigator != none) && Instigator.IsFirstPerson())
    {
        Coil = Spawn(CoilClass, Owner,, Location, Rotation);
        // End:0x2DD
        if(Coil != none)
        {
            Coil.mSpawnVecA = mSpawnVecA;
        }
    }
    //return;    
}

defaultproperties
{
    CoilClass=class'NewNet_ShockBeamCoil'
}