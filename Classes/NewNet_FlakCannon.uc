/*******************************************************************************
 * NewNet_FlakCannon generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class NewNet_FlakCannon extends FlakCannon
    config(User)
    hidedropdown
    cacheexempt;

const MAX_PROJECTILE_FUDGE = 0.075;
const MAX_PROJECTILE_FUDGE_ALT = 0.075;

struct ReplicatedRotator
{
    var int Yaw;
    var int Pitch;
};

struct ReplicatedVector
{
    var float X;
    var float Y;
    var float Z;
};

var NewNet_TimeStamp t;
var TAM_Mutator M;
var Rotator RandSeed[9];
var int RandIndex;

replication
{
    // Pos:0x000
    reliable if(Role < ROLE_Authority)
        NewNet_OldServerStartFire, NewNet_ServerStartFire

    // Pos:0x00D
    reliable if((Role == ROLE_Authority) && bNetOwner)
        RandSeed
}

function DisableNet()
{
    NewNet_FlakFire(FireMode[0]).bUseEnhancedNetCode = false;
    NewNet_FlakFire(FireMode[0]).PingDT = 0.0;
    NewNet_FlakAltFire(FireMode[1]).bUseEnhancedNetCode = false;
    NewNet_FlakAltFire(FireMode[1]).PingDT = 0.0;
    //return;    
}

simulated function float RateSelf()
{
    // End:0x11
    if(Instigator == none)
    {
        return -2.0;
    }
    return super(Weapon).RateSelf();
    //return;    
}

simulated function BringUp(optional Weapon PrevWeapon)
{
    // End:0x0D
    if(Instigator == none)
    {
        return;
    }
    super(Weapon).BringUp(PrevWeapon);
    //return;    
}

simulated function bool PutDown()
{
    // End:0x0D
    if(Instigator == none)
    {
        return false;
    }
    return super(Weapon).PutDown();
    //return;    
}

simulated event ClientStartFire(int Mode)
{
    // End:0x3D
    if((Level.NetMode != NM_Client) || !class'Misc_Player'.static.UseNewNet())
    {
        super(Weapon).ClientStartFire(Mode);
    }
    // End:0x48
    else
    {
        NewNet_ClientStartFire(Mode);
    }
    //return;    
}

simulated event NewNet_ClientStartFire(int Mode)
{
    local ReplicatedRotator R;
    local ReplicatedVector V;
    local Vector Start;
    local float stamp;

    // End:0x48
    if(Pawn(Owner).Controller.IsInState('GameEnded') || Pawn(Owner).Controller.IsInState('RoundEnded'))
    {
        return;
    }
    // End:0x23F
    if(Role < ROLE_Authority)
    {
        // End:0x23C
        if((AltReadyToFire(Mode)) && StartFire(Mode))
        {
            // End:0xCE
            if(!ReadyToFire(Mode))
            {
                // End:0xA6
                if(t == none)
                {
                    // End:0xA5
                    foreach DynamicActors(class'NewNet_TimeStamp', t)
                    {
                        // End:0xA5
                        break;                        
                    }                    
                }
                stamp = t.ClientTimeStamp;
                NewNet_OldServerStartFire(byte(Mode), stamp);
                return;
            }
            // End:0xEE
            if(t == none)
            {
                // End:0xED
                foreach DynamicActors(class'NewNet_TimeStamp', t)
                {
                    // End:0xED
                    break;                    
                }                
            }
            // End:0x121
            if(NewNet_FlakAltFire(FireMode[Mode]) != none)
            {
                NewNet_FlakAltFire(FireMode[Mode]).DoInstantFireEffect();
            }
            // End:0x151
            else
            {
                // End:0x151
                if(NewNet_FlakFire(FireMode[Mode]) != none)
                {
                    NewNet_FlakFire(FireMode[Mode]).DoInstantFireEffect();
                }
            }
            R.Pitch = Pawn(Owner).Controller.Rotation.Pitch;
            R.Yaw = Pawn(Owner).Controller.Rotation.Yaw;
            Start = Pawn(Owner).Location + Pawn(Owner).EyePosition();
            V.X = Start.X;
            V.Y = Start.Y;
            V.Z = Start.Z;
            NewNet_ServerStartFire(byte(Mode), t.ClientTimeStamp, R, V);
        }
    }
    // End:0x24A
    else
    {
        StartFire(Mode);
    }
    //return;    
}

simulated function bool AltReadyToFire(int Mode)
{
    local int alt;
    local float F;

    F = 0.0150;
    // End:0x1D
    if(!ReadyToFire(Mode))
    {
        return false;
    }
    // End:0x32
    if(Mode == 0)
    {
        alt = 1;
    }
    // End:0x39
    else
    {
        alt = 0;
    }
    // End:0xEC
    if(((((FireMode[alt] != FireMode[Mode]) && FireMode[alt].bModeExclusive) && FireMode[alt].bIsFiring) || !FireMode[Mode].AllowFire()) || FireMode[Mode].NextFireTime > ((Level.TimeSeconds + FireMode[Mode].PreFireTime) - F))
    {
        return false;
    }
    return true;
    //return;    
}

function NewNet_ServerStartFire(byte Mode, float ClientTimeStamp, ReplicatedRotator R, ReplicatedVector V)
{
    // End:0x20
    if(M == none)
    {
        // End:0x1F
        foreach DynamicActors(class'TAM_Mutator', M)
        {
            // End:0x1F
            break;            
        }        
    }
    // End:0x92
    if((Team_GameBase(Level.Game) != none) && Misc_Player(Instigator.Controller) != none)
    {
        Misc_Player(Instigator.Controller).NotifyServerStartFire(ClientTimeStamp, M.ClientTimeStamp, M.AverDT);
    }
    // End:0xF6
    if((Instigator != none) && Instigator.Weapon != self)
    {
        // End:0xDB
        if(Instigator.Weapon == none)
        {
            Instigator.ServerChangedWeapon(none, self);
        }
        // End:0xF4
        else
        {
            Instigator.Weapon.SynchronizeWeapon(self);
        }
        return;
    }
    // End:0x17E
    if(NewNet_FlakFire(FireMode[Mode]) != none)
    {
        NewNet_FlakFire(FireMode[Mode]).PingDT = FMin((M.ClientTimeStamp - ClientTimeStamp) + (1.750 * M.AverDT), 0.0750);
        NewNet_FlakFire(FireMode[Mode]).bUseEnhancedNetCode = true;
    }
    // End:0x203
    else
    {
        // End:0x203
        if(NewNet_FlakAltFire(FireMode[Mode]) != none)
        {
            NewNet_FlakAltFire(FireMode[Mode]).PingDT = FMin((M.ClientTimeStamp - ClientTimeStamp) + (1.750 * M.AverDT), 0.0750);
            NewNet_FlakAltFire(FireMode[Mode]).bUseEnhancedNetCode = true;
        }
    }
    // End:0x4F4
    if((FireMode[Mode].NextFireTime <= (Level.TimeSeconds + FireMode[Mode].PreFireTime)) && StartFire(Mode))
    {
        FireMode[Mode].ServerStartFireTime = Level.TimeSeconds;
        FireMode[Mode].bServerDelayStartFire = false;
        // End:0x3C4
        if(NewNet_FlakFire(FireMode[Mode]) != none)
        {
            NewNet_FlakFire(FireMode[Mode]).savedVec.X = V.X;
            NewNet_FlakFire(FireMode[Mode]).savedVec.Y = V.Y;
            NewNet_FlakFire(FireMode[Mode]).savedVec.Z = V.Z;
            NewNet_FlakFire(FireMode[Mode]).SavedRot.Yaw = R.Yaw;
            NewNet_FlakFire(FireMode[Mode]).SavedRot.Pitch = R.Pitch;
            NewNet_FlakFire(FireMode[Mode]).bUseReplicatedInfo = IsReasonable(NewNet_FlakFire(FireMode[Mode]).savedVec);
        }
        // End:0x4F1
        else
        {
            // End:0x4F1
            if(NewNet_FlakAltFire(FireMode[Mode]) != none)
            {
                NewNet_FlakAltFire(FireMode[Mode]).savedVec.X = V.X;
                NewNet_FlakAltFire(FireMode[Mode]).savedVec.Y = V.Y;
                NewNet_FlakAltFire(FireMode[Mode]).savedVec.Z = V.Z;
                NewNet_FlakAltFire(FireMode[Mode]).SavedRot.Yaw = R.Yaw;
                NewNet_FlakAltFire(FireMode[Mode]).SavedRot.Pitch = R.Pitch;
                NewNet_FlakAltFire(FireMode[Mode]).bUseReplicatedInfo = IsReasonable(NewNet_FlakAltFire(FireMode[Mode]).savedVec);
            }
        }
    }
    // End:0x544
    else
    {
        // End:0x52A
        if(FireMode[Mode].AllowFire())
        {
            FireMode[Mode].bServerDelayStartFire = true;
        }
        // End:0x544
        else
        {
            ClientForceAmmoUpdate(Mode, AmmoAmount(Mode));
        }
    }
    //return;    
}

function bool IsReasonable(Vector V)
{
    local Vector LocDiff;
    local float clErr;

    // End:0x1F
    if((Owner == none) || Pawn(Owner) == none)
    {
        return true;
    }
    LocDiff = V - (Pawn(Owner).Location + Pawn(Owner).EyePosition());
    clErr = LocDiff Dot LocDiff;
    return clErr < 750.0;
    //return;    
}

function SendNewRandSeed()
{
    local Rotator R;
    local int i;
    local float Spread;

    Spread = class'NewNet_FlakFire'.default.Spread;
    i = 0;
    J0x1B:
    // End:0x99 [Loop If]
    if(i < 9)
    {
        R.Yaw = int(Spread * (FRand() - 0.50));
        R.Pitch = int(Spread * (FRand() - 0.50));
        R.Roll = int(Spread * (FRand() - 0.50));
        RandSeed[i] = R;
        ++ i;
        // [Loop Continue]
        goto J0x1B;
    }
    RandIndex = 0;
    //return;    
}

simulated function Rotator GetRandRot()
{
    // End:0x13
    if(RandIndex > 8)
    {
        RandIndex = 0;
    }
    ++ RandIndex;
    return RandSeed[RandIndex - 1];
    //return;    
}

simulated event PostNetBeginPlay()
{
    super(Actor).PostNetBeginPlay();
    SendNewRandSeed();
    //return;    
}

function NewNet_OldServerStartFire(byte Mode, float ClientTimeStamp)
{
    // End:0x20
    if(M == none)
    {
        // End:0x1F
        foreach DynamicActors(class'TAM_Mutator', M)
        {
            // End:0x1F
            break;            
        }        
    }
    // End:0xA8
    if(NewNet_FlakFire(FireMode[Mode]) != none)
    {
        NewNet_FlakFire(FireMode[Mode]).PingDT = FMin((M.ClientTimeStamp - ClientTimeStamp) + (1.750 * M.AverDT), 0.0750);
        NewNet_FlakFire(FireMode[Mode]).bUseEnhancedNetCode = true;
    }
    // End:0x12D
    else
    {
        // End:0x12D
        if(NewNet_FlakAltFire(FireMode[Mode]) != none)
        {
            NewNet_FlakAltFire(FireMode[Mode]).PingDT = FMin((M.ClientTimeStamp - ClientTimeStamp) + (1.750 * M.AverDT), 0.0750);
            NewNet_FlakAltFire(FireMode[Mode]).bUseEnhancedNetCode = true;
        }
    }
    ServerStartFire(Mode);
    //return;    
}

defaultproperties
{
    FireModeClass[0]=class'NewNet_FlakFire'
    FireModeClass[1]=class'NewNet_FlakAltFire'
}