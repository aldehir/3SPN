/*******************************************************************************
 * Misc_DynComboManager generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Misc_DynComboManager extends Info
    dependson(Misc_DynCombo)
    dependson(Misc_DynComboReplicationInfo)
    hidecategories(Movement,Collision,Lighting,LightColor,Karma,Force);

struct ComboData
{
    var float Adrenaline;
    var float cost;
    var float Duration;
    var byte Type;
    var class<Combo> Class;
    var float LastUpdate;
};

var Misc_DynComboReplicationInfo ComboRI;
var byte TeamIndex;
var bool bComboRunning;
var array<ComboData> Combos;
var byte Affected;
var byte Count;
var byte LastCount;
var float TotalTick;
var byte NextCombo;

function Timer()
{
    // End:0x0D
    if(!bComboRunning)
    {
        return;
    }
    CountAffected();
    UpdateClients();
    //return;    
}

function UpdateClients()
{
    local int i;

    ComboRI.bRunning = bComboRunning;
    // End:0x128
    if(bComboRunning)
    {
        // End:0xD7
        if(Affected > 0)
        {
            i = 0;
            J0x33:
            // End:0xD7 [Loop If]
            if(i < Combos.Length)
            {
                // End:0x52
                if(i > 4)
                {
                    // [Explicit Break]
                    goto J0xD7;
                }
                ComboRI.Combos[i].Type = Combos[i].Type;
                ComboRI.Combos[i].Time = (((Combos[i].Adrenaline * Combos[i].Duration) * 0.010) / float(Affected)) + float(1);
                ++ i;
                J0xD7:
                // [Loop Continue]
                goto J0x33;
            }
        }
        // End:0x128 [Loop If]
        if(i < 4)
        {
            ComboRI.Combos[i].Time = 0.0;
            ComboRI.Combos[i].Type = 0;
            ++ i;
            // [Loop Continue]
            goto J0xD7;
        }
    }
    ComboRI.NetUpdateTime = Level.TimeSeconds - float(1);
    //return;    
}

function PlayerSpawned(Controller C)
{
    local int i;

    // End:0x69
    if(((((C == none) || xPawn(C.Pawn) == none) || C.PlayerReplicationInfo == none) || C.GetTeamNum() != TeamIndex) || Combos.Length == 0)
    {
        return;
    }
    // End:0x8D
    if(xPawn(C.Pawn).CurrentCombo != none)
    {
        return;
    }
    xPawn(C.Pawn).CurrentCombo = UnresolvedNativeFunction_97(class'Misc_DynCombo', xPawn(C.Pawn));
    // End:0xEE
    if(Misc_DynCombo(xPawn(C.Pawn).CurrentCombo) == none)
    {
        return;
    }
    Misc_DynCombo(xPawn(C.Pawn).CurrentCombo).ComboManager = self;
    i = 0;
    J0x121:
    // End:0x176 [Loop If]
    if(i < Combos.Length)
    {
        Misc_DynCombo(xPawn(C.Pawn).CurrentCombo).AddCombo(Combos[i].Class);
        ++ i;
        // [Loop Continue]
        goto J0x121;
    }
    CountAffected();
    UpdateClients();
    //return;    
}

function PlayerUsedCombo(Controller Player, class<Combo> ComboClass)
{
    local Controller C;
    local byte i, Type;

    // End:0x0D
    if(ComboClass == none)
    {
        return;
    }
    // End:0x32
    if(TeamIndex == 255)
    {
        TeamIndex = byte(Player.GetTeamNum());
    }
    i = 0;
    J0x3A:
    // End:0x9A [Loop If]
    if(i <= Combos.Length)
    {
        // End:0x71
        if(i == Combos.Length)
        {
            Combos.Length = Combos.Length + 1;
            // [Explicit Break]
            goto J0x9A;
        }
        // End:0x90
        if(Combos[i].Class == ComboClass)
        {
            // [Explicit Break]
            goto J0x9A;
        }
        ++ i;
        J0x9A:
        // [Loop Continue]
        goto J0x3A;
    }
    // End:0xB5
    if(class<ComboDefensive>(ComboClass) != none)
    {
        Type = 1;
    }
    // End:0x10E
    else
    {
        // End:0xD0
        if(class<ComboSpeed>(ComboClass) != none)
        {
            Type = 2;
        }
        // End:0x10E
        else
        {
            // End:0xEB
            if(class<ComboBerserk>(ComboClass) != none)
            {
                Type = 3;
            }
            // End:0x10E
            else
            {
                // End:0x106
                if(class<ComboInvis>(ComboClass) != none)
                {
                    Type = 4;
                }
                // End:0x10E
                else
                {
                    Type = 7;
                }
            }
        }
    }
    Combos[i].cost = ComboClass.default.AdrenalineCost;
    Combos[i].Adrenaline += Combos[i].cost;
    Combos[i].Class = ComboClass;
    Combos[i].Type = Type;
    Combos[i].Duration = ComboClass.default.Duration;
    Affected = 0;
    C = Level.ControllerList;
    J0x1C2:
    // End:0x33C [Loop If]
    if(C != none)
    {
        // End:0x21E
        if(((C.PlayerReplicationInfo == none) || C.PlayerReplicationInfo.Team == none) || xPawn(C.Pawn) == none)
        {
        }
        // End:0x325
        else
        {
            // End:0x325
            if(C.GetTeamNum() == TeamIndex)
            {
                ++ Affected;
                // End:0x2F5
                if(xPawn(C.Pawn).CurrentCombo == none)
                {
                    xPawn(C.Pawn).CurrentCombo = UnresolvedNativeFunction_97(class'Misc_DynCombo', xPawn(C.Pawn));
                    // End:0x2C9
                    if(Misc_DynCombo(xPawn(C.Pawn).CurrentCombo) == none)
                    {
                        ClearData();
                        return;
                    }
                    Misc_DynCombo(xPawn(C.Pawn).CurrentCombo).ComboManager = self;
                }
                Misc_DynCombo(xPawn(C.Pawn).CurrentCombo).AddCombo(ComboClass);
            }
        }
        C = C.nextController;
        // [Loop Continue]
        goto J0x1C2;
    }
    Combos[i].LastUpdate = TotalTick;
    NextCombo = 0;
    Count = 0;
    // End:0x37E
    if(!bComboRunning)
    {
        bComboRunning = true;
        Enable('Tick');
    }
    UpdateClients();
    Player.Adrenaline = FMax(0.10, Player.Adrenaline - Combos[i].cost);
    SetTimer(3.0, true);
    //return;    
}

function PlayerDied(Controller Player)
{
    // End:0x23
    if(!bComboRunning || Player.Pawn != none)
    {
        return;
    }
    CountAffected(Player);
    UpdateClients();
    //return;    
}

function Tick(float DeltaTime)
{
    // End:0x28
    if(!bComboRunning)
    {
        Disable('Tick');
        SetTimer(0.0, false);
        TotalTick = 0.0;
        return;
    }
    TotalTick += DeltaTime;
    // End:0x1AD
    if(Combos[NextCombo].Adrenaline > 0.0)
    {
        DeltaTime = TotalTick - Combos[NextCombo].LastUpdate;
        Combos[NextCombo].Adrenaline -= (((Combos[NextCombo].cost * DeltaTime) / Combos[NextCombo].Duration) * float(Affected));
        // End:0x187
        if(Combos[NextCombo].Adrenaline <= 0.0)
        {
            ClearDynCombosOf(Combos[NextCombo].Class);
            Combos[NextCombo].Class = none;
            Combos[NextCombo].Adrenaline = 0.0;
            Combos[NextCombo].cost = 0.0;
            Combos[NextCombo].Duration = 0.0;
            Combos[NextCombo].Type = 0;
            Combos[NextCombo].LastUpdate = 0.0;
            Combos.Remove(NextCombo, 1);
        }
        // End:0x1AD
        else
        {
            ++ Count;
            Combos[NextCombo].LastUpdate = TotalTick;
            ++ NextCombo;
        }
    }
    // End:0x208
    if(NextCombo >= Combos.Length)
    {
        NextCombo = 0;
        // End:0x1DC
        if(Count == 0)
        {
            ClearData();
            return;
        }
        // End:0x1F5
        if(LastCount > Count)
        {
            UpdateClients();
        }
        LastCount = Count;
        Count = 0;
    }
    //return;    
}

function ClearDynCombosOf(class<Combo> ComboClass)
{
    local Controller C;

    C = Level.ControllerList;
    J0x14:
    // End:0xD8 [Loop If]
    if(C != none)
    {
        // End:0xC1
        if(xPawn(C.Pawn) != none)
        {
            // End:0xC1
            if((Misc_DynCombo(xPawn(C.Pawn).CurrentCombo) != none) && Misc_DynCombo(xPawn(C.Pawn).CurrentCombo).ComboManager == self)
            {
                Misc_DynCombo(xPawn(C.Pawn).CurrentCombo).RemoveCombo(ComboClass);
            }
        }
        C = C.nextController;
        // [Loop Continue]
        goto J0x14;
    }
    //return;    
}

function ClearDynCombos()
{
    local Controller C;

    C = Level.ControllerList;
    J0x14:
    // End:0xD0 [Loop If]
    if(C != none)
    {
        // End:0xB9
        if(xPawn(C.Pawn) != none)
        {
            // End:0xB9
            if((Misc_DynCombo(xPawn(C.Pawn).CurrentCombo) != none) && Misc_DynCombo(xPawn(C.Pawn).CurrentCombo).ComboManager == self)
            {
                Misc_DynCombo(xPawn(C.Pawn).CurrentCombo).Destroy();
            }
        }
        C = C.nextController;
        // [Loop Continue]
        goto J0x14;
    }
    //return;    
}

function ClearData()
{
    bComboRunning = false;
    NextCombo = 0;
    TotalTick = 0.0;
    Count = 0;
    LastCount = 0;
    SetTimer(0.0, false);
    ClearDynCombos();
    Combos.Remove(0, Combos.Length);
    UpdateClients();
    //return;    
}

function CountAffected(optional Controller Exclude)
{
    local Controller C;

    Affected = 0;
    C = Level.ControllerList;
    J0x1C:
    // End:0xB2 [Loop If]
    if(C != none)
    {
        // End:0x94
        if(((((Exclude != none) && C == Exclude) || C.PlayerReplicationInfo == none) || C.GetTeamNum() != TeamIndex) || xPawn(C.Pawn) == none)
        {
        }
        // End:0x9B
        else
        {
            ++ Affected;
        }
        C = C.nextController;
        // [Loop Continue]
        goto J0x1C;
    }
    // End:0xC5
    if(Affected == 0)
    {
        ClearData();
    }
    //return;    
}

defaultproperties
{
    TeamIndex=255
}