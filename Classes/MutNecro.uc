/*******************************************************************************
 * MutNecro generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MutNecro extends Mutator
    hidecategories(Movement,Collision,Lighting,LightColor,Karma,Force)
    config;

var() config bool bShowSpawnMessage;
var() config bool bBotsCanNecro;
var() config Color SpawnMessageColour;
var() xPlayer NotifyPlayer[32];
var() localized string PropsDisplayText[2];
var() localized string PropsDescText[2];
var() class<NecroCombo> NecroComboClass;

function string RecommendCombo(string ComboName)
{
    // End:0x98
    if((bBotsCanNecro && ComboName != "xGame.ComboDefensive") && ComboName != "3SPNv3210CW.NecroCombo")
    {
        // End:0x7C
        if(FRand() < 0.750)
        {
            ComboName = "3SPNv3210CW.NecroCombo";
        }
        // End:0x98
        else
        {
            ComboName = "xGame.ComboDefensive";
        }
    }
    // End:0xB8
    if(NextMutator != none)
    {
        return NextMutator.RecommendCombo(ComboName);
    }
    return ComboName;
    //return;    
}

function ModifyPlayer(Pawn Other)
{
    super.ModifyPlayer(Other);
    // End:0x9F
    if(bShowSpawnMessage && PlayerController(Other.Controller) != none)
    {
        PlayerController(Other.Controller).ClientMessage(Level.Game.MakeColorCode(SpawnMessageColour) $ "To revive a teammate press B,B,F,F with 100 adren.");
    }
    //return;    
}

function Timer()
{
    local byte i;

    i = 0;
    J0x08:
    // End:0x71 [Loop If]
    if(i < 32)
    {
        // End:0x67
        if(NotifyPlayer[i] != none)
        {
            NotifyPlayer[i].ClientReceiveCombo("3SPNv3210CW.NecroCombo");
            NotifyPlayer[i] = none;
        }
        ++ i;
        // [Loop Continue]
        goto J0x08;
    }
    //return;    
}

function bool IsRelevant(Actor Other, out byte bSuperRelevant)
{
    local byte i;

    // End:0x11E
    if(xPlayer(Other) != none)
    {
        i = 0;
        J0x18:
        // End:0xC7 [Loop If]
        if(i < 16)
        {
            // End:0x64
            if(xPlayer(Other).ComboNameList[i] ~= "3SPNv3210CW.NecroCombo")
            {
                // [Explicit Break]
                goto J0xC7;
                // [Explicit Continue]
                goto J0xBD;
            }
            // End:0xBD
            if(xPlayer(Other).ComboNameList[i] == "")
            {
                xPlayer(Other).ComboNameList[i] = "3SPNv3210CW.NecroCombo";
                J0xBD:
                // [Explicit Break]
                goto J0xC7;
            }
            ++ i;
            J0xC7:
            // [Loop Continue]
            goto J0x18;
        }
        i = 0;
        J0xCF:
        // End:0x11E [Loop If]
        if(i < 32)
        {
            // End:0x114
            if(NotifyPlayer[i] == none)
            {
                NotifyPlayer[i] = xPlayer(Other);
                SetTimer(0.50, false);
                // [Explicit Break]
                goto J0x11E;
            }
            ++ i;
            J0x11E:
            // [Loop Continue]
            goto J0xCF;
        }
    }
    // End:0x146
    if(NextMutator != none)
    {
        return NextMutator.IsRelevant(Other, bSuperRelevant);
    }
    // End:0x148
    else
    {
        return true;
    }
    //return;    
}

function GetServerDetails(out ServerResponseLine ServerState)
{
    local int i;

    i = ServerState.ServerInfo.Length;
    ServerState.ServerInfo.Length = i + 3;
    ServerState.ServerInfo[i].Key = "Mutator";
    ServerState.ServerInfo[i].Value = GetHumanReadableName();
    ServerState.ServerInfo[i + 1].Key = "Necro Combo Version";
    ServerState.ServerInfo[i + 1].Value = "3.7CW (April 2013)";
    ServerState.ServerInfo[i + 2].Key = "Necro Score Award";
    ServerState.ServerInfo[i + 2].Value = string(class'NecroCombo'.default.NecroScoreAward);
    //return;    
}

static function FillPlayInfo(PlayInfo PlayInfo)
{
    super(Info).FillPlayInfo(PlayInfo);
    PlayInfo.UnresolvedNativeFunction_98("Necro Combo v3", "bBotsCanNecro", default.PropsDisplayText[0], 0, 10, "Check");
    PlayInfo.UnresolvedNativeFunction_98("Necro Combo v3", "bShowSpawnMessage", default.PropsDisplayText[1], 0, 10, "Check");
    // End:0xB4
    if(default.NecroComboClass != none)
    {
        default.NecroComboClass.static.FillPlayInfo(PlayInfo);
        PlayInfo.UnresolvedNativeFunction_98();
    }
    //return;    
}

static function string GetDescriptionText(string PropName)
{
    switch(PropName)
    {
        // End:0x21
        case "bBotsCanNecro":
            return default.PropsDescText[0];
        // End:0x3F
        case "bShowSpawnMessage":
            return default.PropsDescText[1];
        // End:0xFFFF
        default:
            //return;
    }    
}

defaultproperties
{
    bBotsCanNecro=true
    SpawnMessageColour=(R=155,G=48,B=255,A=255)
    PropsDisplayText[0]="Bots Can Perform Necro Combo"
    PropsDisplayText[1]="Show How To Resurrect Message"
    PropsDescText[0]="Should bots use the necro combo? (true by default)"
    PropsDescText[1]="Show the (To resurrect a teammate press B,B,F,F with 100 adren) spawn message? (True by default)."
    NecroComboClass=class'NecroCombo'
    bAddToServerPackages=true
    GroupName="Combo Necromancy"
    FriendlyName="Combo Necromancy - v3.8CW"
    Description="Resurrect a team mate from the dead! Support for Invasion and Team Games based on number of lives. (To resurrect a teammate press B,B,F,F with 100 adren)"
}