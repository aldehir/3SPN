/*******************************************************************************
 * Team_HUDBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Team_HUDBase extends HudCTeamDeathMatch
    config(User)
    transient
    abstract;

struct StatsListStruct
{
    var string ListName;
    var array<string> RowNames;
    var array<string> RowValues;
};

var Texture TeamTex;
var Material TrackedPlayer;
var int OldRoundTime;
var Misc_Player MyOwner;
var Color FullHealthColor;
var Color NameColor;
var Color LocationColor;
var Color LowYellowColor;
var Color HighYellowColor;
var StatsListStruct StatsLists[2];
var int CurrentStatsList;
var array<Vector> TargetingLines;
var Actor TargetingActor;

exec function ShowStats()
{
    bShowLocalStats = !bShowLocalStats;
    Misc_Player(PlayerOwner).bFirstOpen = bShowLocalStats;
    //return;    
}

function Draw2DLocationDot(Canvas C, Vector loc, float OffsetX, float OffsetY, float ScaleX, float ScaleY)
{
    local Rotator Dir;
    local float Angle, Scaling;
    local Actor Start;

    // End:0x4D
    if(PlayerOwner.Pawn == none)
    {
        // End:0x3F
        if(PlayerOwner.ViewTarget != none)
        {
            Start = PlayerOwner.ViewTarget;
        }
        // End:0x4A
        else
        {
            Start = PlayerOwner;
        }
    }
    // End:0x61
    else
    {
        Start = PlayerOwner.Pawn;
    }
    Dir = rotator(loc - Start.Location);
    Angle = (float(int(float(Dir.Yaw - PlayerOwner.Rotation.Yaw)) & 65535) * 6.28320) / float(65536);
    C.Style = 5;
    C.SetPos((OffsetX * C.ClipX) + ((ScaleX * C.ClipX) * Sin(Angle)), (OffsetY * C.ClipY) - ((ScaleY * C.ClipY) * Cos(Angle)));
    Scaling = ((24.0 * C.ClipX) * (0.450 * HudScale)) / float(1600);
    C.UnresolvedNativeFunction_97(LocationDot, Scaling, Scaling, 340.0, 432.0, 78.0, 78.0);
    //return;    
}

simulated function bool ShouldDrawPlayer(Misc_PRI PRI)
{
    // End:0x67
    if(((((PRI == none) || PRI.PawnReplicationInfo == none) || PRI.bOutOfLives) || PRI.Team == none) || PRI == PlayerOwner.PlayerReplicationInfo)
    {
        return false;
    }
    return true;
    //return;    
}

simulated function DrawPlayers(Canvas C)
{
    local int i, Team;
    local float XL, YL, MaxNamePos;
    local int PosX, PosY;
    local float Scale;
    local string Name;
    local int listy, Space, NameY, NameX, Height, Width,
	    Health, StartHealth, allies, Enemies;

    local Misc_PRI PRI;

    // End:0x0D
    if(MyOwner == none)
    {
        return;
    }
    // End:0x42
    if(PlayerOwner.PlayerReplicationInfo.Team != none)
    {
        Team = PlayerOwner.GetTeamNum();
    }
    // End:0xA6
    else
    {
        // End:0x83
        if((Pawn(PlayerOwner.ViewTarget) == none) || Pawn(PlayerOwner.ViewTarget).GetTeamNum() == 255)
        {
            return;
        }
        Team = Pawn(PlayerOwner.ViewTarget).GetTeamNum();
    }
    listy = int((0.080 * HudScale) * C.ClipY);
    Space = int((0.0050 * HudScale) * C.ClipY);
    Scale = FMax(HudScale, 0.750);
    Height = int((C.ClipY * 0.02550) * Scale);
    Width = int((C.ClipX * 0.130) * Scale);
    NameX = int((C.ClipX * 0.0250) * Scale);
    MaxNamePos = 0.990 * float(Width - NameX);
    C.Font = GetFontSizeIndex(C, -3 + int(Scale * 1.250));
    C.UnresolvedNativeFunction_97("Test", XL, YL);
    NameY = int(float(int(float(Height) * 0.60)) - (YL * 0.50));
    i = 0;
    J0x201:
    // End:0xB00 [Loop If]
    if(i < MyOwner.GameReplicationInfo.PRIArray.Length)
    {
        PRI = Misc_PRI(MyOwner.GameReplicationInfo.PRIArray[i]);
        // End:0x25E
        if(!ShouldDrawPlayer(PRI))
        {
            // [Explicit Continue]
            goto J0xAF6;
        }
        // End:0x275
        if(!class'Misc_Player'.default.bShowTeamInfo)
        {
            // [Explicit Continue]
            goto J0xAF6;
        }
        // End:0x7BD
        if(PRI.Team.TeamIndex == Team)
        {
            // End:0x2A5
            if(allies > 9)
            {
                // [Explicit Continue]
                goto J0xAF6;
            }
            PosY = listy + ((Height + Space) * allies);
            PosX = int(C.ClipX * 0.010);
            C.SetPos(float(PosX), float(PosY));
            C.DrawColor = default.BlackColor;
            C.DrawColor.A = 100;
            C.UnresolvedNativeFunction_97(TeamTex, float(Width), float(Height), 168.0, 211.0, 166.0, 44.0);
            C.SetPos(float(PosX), float(PosY));
            C.DrawColor = default.WhiteColor;
            C.UnresolvedNativeFunction_97(TeamTex, (C.ClipX * 0.01950) * Scale, (C.ClipY * 0.0260) * Scale, 119.0, 258.0, 54.0, 55.0);
            // End:0x414
            if(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD)
            {
                Name = PRI.GetColoredName();
            }
            // End:0x428
            else
            {
                Name = PRI.PlayerName;
            }
            C.DrawColor = NameColor;
            C.SetPos(float(PosX + NameX), float(PosY + NameY));
            class'Misc_Util'.static.DrawTextClipped(C, Name, MaxNamePos);
            Health = PRI.PawnReplicationInfo.Health + PRI.PawnReplicationInfo.Shield;
            // End:0x4FD
            if(TAM_TeamInfo(PRI.Team) != none)
            {
                StartHealth = TAM_TeamInfo(PRI.Team).StartingHealth;
            }
            // End:0x581
            else
            {
                // End:0x53B
                if(TAM_TeamInfoRed(PRI.Team) != none)
                {
                    StartHealth = TAM_TeamInfoRed(PRI.Team).StartingHealth;
                }
                // End:0x581
                else
                {
                    // End:0x579
                    if(TAM_TeamInfoBlue(PRI.Team) != none)
                    {
                        StartHealth = TAM_TeamInfoBlue(PRI.Team).StartingHealth;
                    }
                    // End:0x581
                    else
                    {
                        StartHealth = 200;
                    }
                }
            }
            // End:0x651
            if(Health < StartHealth)
            {
                C.DrawColor.B = 0;
                C.DrawColor.R = byte(Min(255, int(float(511) * (float(StartHealth - Health) / float(StartHealth)))));
                // End:0x636
                if(C.DrawColor.R == 255)
                {
                    C.DrawColor.G = byte(Min(255, int(float(511) * (float(Health) / float(StartHealth)))));
                }
                // End:0x64E
                else
                {
                    C.DrawColor.G = byte(255);
                }
            }
            // End:0x665
            else
            {
                C.DrawColor = FullHealthColor;
            }
            C.SetPos(float(PosX) + ((0.00220 * Scale) * C.ClipX), float(PosY) + ((0.00350 * Scale) * C.ClipY));
            C.UnresolvedNativeFunction_97(TeamTex, (C.ClipX * 0.01650) * Scale, (C.ClipY * 0.01850) * Scale, 340.0, 432.0, 78.0, 78.0);
            C.DrawColor = WhiteColor;
            Draw2DLocationDot(C, PRI.PawnReplicationInfo.Position, (float(PosX) / C.ClipX) + (0.0060 * Scale), (float(PosY) / C.ClipY) + (0.0080 * Scale), 0.0080 * Scale, 0.010 * Scale);
            ++ allies;
            // [Explicit Continue]
            goto J0xAF6;
        }
        // End:0x7CC
        if(Enemies > 9)
        {
            // [Explicit Continue]
            goto J0xAF6;
        }
        PosY = listy + ((Height + Space) * Enemies);
        PosX = int(C.ClipX * 0.990);
        C.SetPos(float(PosX - Width), float(PosY));
        C.DrawColor = default.BlackColor;
        C.DrawColor.A = 100;
        C.UnresolvedNativeFunction_97(TeamTex, float(Width), float(Height), 168.0, 211.0, 166.0, 44.0);
        C.SetPos(float(PosX) - ((C.ClipX * 0.01950) * Scale), float(PosY));
        C.DrawColor = default.WhiteColor;
        C.UnresolvedNativeFunction_97(TeamTex, (C.ClipX * 0.01950) * Scale, (C.ClipY * 0.0260) * Scale, 119.0, 258.0, 54.0, 55.0);
        // End:0x960
        if(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD)
        {
            Name = PRI.GetColoredName();
        }
        // End:0x974
        else
        {
            Name = PRI.PlayerName;
        }
        C.UnresolvedNativeFunction_97(Name, XL, YL);
        XL = float(Min(int(XL), int(MaxNamePos)));
        C.DrawColor = NameColor;
        C.SetPos((float(PosX) - XL) - float(NameX), float(PosY + NameY));
        class'Misc_Util'.static.DrawTextClipped(C, Name, MaxNamePos);
        C.DrawColor = HudColorTeam[PRI.Team.TeamIndex];
        C.SetPos(float(PosX) - ((0.01650 * Scale) * C.ClipX), float(PosY) + ((0.00350 * Scale) * C.ClipY));
        C.UnresolvedNativeFunction_97(TeamTex, (C.ClipX * 0.01650) * Scale, (C.ClipY * 0.01850) * Scale, 340.0, 432.0, 78.0, 78.0);
        ++ Enemies;
        J0xAF6:
        ++ i;
        // [Loop Continue]
        goto J0x201;
    }
    //return;    
}

simulated function DrawPlayersExtended(Canvas C)
{
    local int i, Team;
    local float XL, YL, MaxNamePos;
    local int PosX, PosY;
    local float Scale;
    local string Name;
    local int listy, Space, NameY, NameX, Height, Width;

    local Misc_PRI PRI;
    local int Health, StartHealth, allies, Enemies;

    // End:0x0D
    if(MyOwner == none)
    {
        return;
    }
    // End:0x42
    if(PlayerOwner.PlayerReplicationInfo.Team != none)
    {
        Team = PlayerOwner.GetTeamNum();
    }
    // End:0xA6
    else
    {
        // End:0x83
        if((Pawn(PlayerOwner.ViewTarget) == none) || Pawn(PlayerOwner.ViewTarget).GetTeamNum() == 255)
        {
            return;
        }
        Team = Pawn(PlayerOwner.ViewTarget).GetTeamNum();
    }
    listy = int((0.080 * HudScale) * C.ClipY);
    Scale = 0.750;
    Height = int(C.ClipY * 0.020);
    Space = int(float(Height) + (0.00750 * C.ClipY));
    NameX = int(C.ClipX * 0.020);
    C.Font = GetFontSizeIndex(C, -3);
    C.UnresolvedNativeFunction_97("Test", XL, YL);
    NameY = int(float(int(float(Height) * 0.60)) - (YL * 0.50));
    i = 0;
    J0x19F:
    // End:0xDF3 [Loop If]
    if(i < MyOwner.GameReplicationInfo.PRIArray.Length)
    {
        PRI = Misc_PRI(MyOwner.GameReplicationInfo.PRIArray[i]);
        // End:0x1FC
        if(!ShouldDrawPlayer(PRI))
        {
            // [Explicit Continue]
            goto J0xDE9;
        }
        // End:0x213
        if(!class'Misc_Player'.default.bShowTeamInfo)
        {
            // [Explicit Continue]
            goto J0xDE9;
        }
        // End:0xA5B
        if(PRI.Team.TeamIndex == Team)
        {
            // End:0x243
            if(allies > 9)
            {
                // [Explicit Continue]
                goto J0xDE9;
            }
            Space = int(float(Height) + (0.00750 * C.ClipY));
            Width = int(C.ClipX * 0.140);
            MaxNamePos = 0.780 * float(Width - NameX);
            PosY = listy + ((Height + Space) * allies);
            PosX = int(C.ClipX * 0.010);
            C.SetPos(float(PosX), float(PosY));
            C.DrawColor = default.BlackColor;
            C.DrawColor.A = 100;
            C.UnresolvedNativeFunction_97(TeamTex, float(Width + PosX), float(Height), 168.0, 211.0, 166.0, 44.0);
            C.SetPos(float(PosX * 2), float(PosY) + (float(Height) * 1.10));
            C.UnresolvedNativeFunction_97(TeamTex, float(Width), float(Height), 168.0, 211.0, 166.0, 44.0);
            C.SetPos(float(PosX), float(PosY));
            C.DrawColor = default.WhiteColor;
            C.UnresolvedNativeFunction_97(TeamTex, (C.ClipX * 0.01950) * Scale, (C.ClipY * 0.0260) * Scale, 119.0, 258.0, 54.0, 55.0);
            // End:0x47B
            if(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD)
            {
                Name = PRI.GetColoredName();
            }
            // End:0x48F
            else
            {
                Name = PRI.PlayerName;
            }
            C.DrawColor = NameColor;
            C.SetPos(float(PosX + NameX), float(PosY + NameY));
            class'Misc_Util'.static.DrawTextClipped(C, Name, MaxNamePos);
            MaxNamePos = 0.80 * float(Width - NameX);
            Name = PRI.GetLocationName();
            C.UnresolvedNativeFunction_97(Name, XL, YL);
            // End:0x56C
            if(XL > MaxNamePos)
            {
                Name = Left(Name, int((MaxNamePos / XL) * float(Len(Name))));
            }
            C.SetPos(float(PosX + NameX), (float(PosY) + (float(Height) * 1.10)) + float(NameY));
            C.DrawColor = LocationColor;
            C.UnresolvedNativeFunction_97(Name);
            Health = PRI.PawnReplicationInfo.Health + PRI.PawnReplicationInfo.Shield;
            // End:0x646
            if(TAM_TeamInfo(PRI.Team) != none)
            {
                StartHealth = TAM_TeamInfo(PRI.Team).StartingHealth;
            }
            // End:0x6CA
            else
            {
                // End:0x684
                if(TAM_TeamInfoRed(PRI.Team) != none)
                {
                    StartHealth = TAM_TeamInfoRed(PRI.Team).StartingHealth;
                }
                // End:0x6CA
                else
                {
                    // End:0x6C2
                    if(TAM_TeamInfoBlue(PRI.Team) != none)
                    {
                        StartHealth = TAM_TeamInfoBlue(PRI.Team).StartingHealth;
                    }
                    // End:0x6CA
                    else
                    {
                        StartHealth = 200;
                    }
                }
            }
            // End:0x798
            if(Health < StartHealth)
            {
                C.DrawColor.B = 0;
                C.DrawColor.R = byte(Min(200, int(float(400) * (float(StartHealth - Health) / float(StartHealth)))));
                // End:0x77F
                if(C.DrawColor.R == 200)
                {
                    C.DrawColor.G = byte(Min(200, int(float(400) * (float(Health) / float(StartHealth)))));
                }
                // End:0x795
                else
                {
                    C.DrawColor.G = 200;
                }
            }
            // End:0x7AC
            else
            {
                C.DrawColor = FullHealthColor;
            }
            C.SetPos(float(PosX) + ((0.00220 * Scale) * C.ClipX), float(PosY) + ((0.00350 * Scale) * C.ClipY));
            C.UnresolvedNativeFunction_97(TeamTex, (C.ClipX * 0.01650) * Scale, (C.ClipY * 0.01850) * Scale, 340.0, 432.0, 78.0, 78.0);
            Name = string(Health);
            C.UnresolvedNativeFunction_97(Name, XL, YL);
            C.SetPos(((float(PosX) * 1.50) + float(Width)) - XL, float(PosY + NameY));
            C.UnresolvedNativeFunction_97(Name);
            Name = string(PRI.PawnReplicationInfo.Adrenaline);
            C.UnresolvedNativeFunction_97(Name, XL, YL);
            C.SetPos(((float(PosX) * 1.50) + float(Width)) - XL, (float(PosY) + (float(Height) * 1.10)) + float(NameY));
            // End:0x994
            if(PRI.PawnReplicationInfo.Adrenaline < 100)
            {
                C.DrawColor = LowYellowColor;
            }
            // End:0x9A8
            else
            {
                C.DrawColor = HighYellowColor;
            }
            C.UnresolvedNativeFunction_97(Name);
            C.DrawColor = WhiteColor;
            Draw2DLocationDot(C, PRI.PawnReplicationInfo.Position, (float(PosX) / C.ClipX) + (0.0060 * Scale), (float(PosY) / C.ClipY) + (0.0080 * Scale), 0.0080 * Scale, 0.010 * Scale);
            ++ allies;
            // [Explicit Continue]
            goto J0xDE9;
        }
        // End:0xA6A
        if(Enemies > 9)
        {
            // [Explicit Continue]
            goto J0xDE9;
        }
        Space = int(0.0050 * C.ClipY);
        Width = int(C.ClipX * 0.110);
        MaxNamePos = 0.990 * float(Width - NameX);
        PosY = listy + ((Height + Space) * Enemies);
        PosX = int(C.ClipX * 0.990);
        C.SetPos(float(PosX - Width), float(PosY));
        C.DrawColor = default.BlackColor;
        C.DrawColor.A = 100;
        C.UnresolvedNativeFunction_97(TeamTex, float(Width), float(Height), 168.0, 211.0, 166.0, 44.0);
        C.SetPos(float(PosX) - ((C.ClipX * 0.01950) * Scale), float(PosY));
        C.DrawColor = default.WhiteColor;
        C.UnresolvedNativeFunction_97(TeamTex, (C.ClipX * 0.01950) * Scale, (C.ClipY * 0.0260) * Scale, 119.0, 258.0, 54.0, 55.0);
        // End:0xC53
        if(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD)
        {
            Name = PRI.GetColoredName();
        }
        // End:0xC67
        else
        {
            Name = PRI.PlayerName;
        }
        C.UnresolvedNativeFunction_97(Name, XL, YL);
        XL = float(Min(int(XL), int(MaxNamePos)));
        C.DrawColor = NameColor;
        C.SetPos((float(PosX) - XL) - float(NameX), float(PosY + NameY));
        class'Misc_Util'.static.DrawTextClipped(C, Name, MaxNamePos);
        C.DrawColor = HudColorTeam[PRI.Team.TeamIndex];
        C.SetPos(float(PosX) - ((0.0160 * Scale) * C.ClipX), float(PosY) + ((0.00350 * Scale) * C.ClipY));
        C.UnresolvedNativeFunction_97(TeamTex, (C.ClipX * 0.01650) * Scale, (C.ClipY * 0.01850) * Scale, 340.0, 432.0, 78.0, 78.0);
        ++ Enemies;
        J0xDE9:
        ++ i;
        // [Loop Continue]
        goto J0x19F;
    }
    //return;    
}

simulated function DrawSpectatingHud(Canvas C)
{
    super.DrawSpectatingHud(C);
    // End:0x76
    if((PlayerOwner.PlayerReplicationInfo != none) && PlayerOwner.PlayerReplicationInfo.bOnlySpectator)
    {
        // End:0x59
        if(class'Misc_Player'.default.bAdminVisionInSpec)
        {
            DrawAdminVision(C);
        }
        // End:0x76
        if(class'Misc_Player'.default.bDrawTargetingLineInSpec)
        {
            DrawTargetingLine(C);
        }
    }
    //return;    
}

simulated function DrawHudPassC(Canvas C)
{
    super.DrawHudPassC(C);
    // End:0x76
    if((PlayerOwner.PlayerReplicationInfo != none) && PlayerOwner.PlayerReplicationInfo.bOnlySpectator)
    {
        // End:0x59
        if(class'Misc_Player'.default.bAdminVisionInSpec)
        {
            DrawAdminVision(C);
        }
        // End:0x76
        if(class'Misc_Player'.default.bDrawTargetingLineInSpec)
        {
            DrawTargetingLine(C);
        }
    }
    //return;    
}

simulated function UpdateRankAndSpread(Canvas C)
{
    // End:0x0D
    if(MyOwner == none)
    {
        return;
    }
    // End:0x2F
    if(!class'Misc_Player'.default.bExtendedInfo)
    {
        DrawPlayers(C);
    }
    // End:0x3A
    else
    {
        DrawPlayersExtended(C);
    }
    //return;    
}

simulated function UpdateHUD()
{
    local Color Red, Blue;
    local int Team;

    // End:0x2E
    if(MyOwner == none)
    {
        MyOwner = Misc_Player(PlayerOwner);
        // End:0x2E
        if(MyOwner == none)
        {
            super.UpdateHUD();
            return;
        }
    }
    // End:0x278
    if(class'Misc_Player'.default.bMatchHUDToSkins)
    {
        // End:0xC5
        if(MyOwner.PlayerReplicationInfo.bOnlySpectator)
        {
            // End:0xC0
            if((Pawn(MyOwner.ViewTarget) != none) && Pawn(MyOwner.ViewTarget).GetTeamNum() != 255)
            {
                Team = Pawn(MyOwner.ViewTarget).GetTeamNum();
            }
            // End:0xC2
            else
            {
                return;
            }
        }
        // End:0xDA
        else
        {
            Team = MyOwner.GetTeamNum();
        }
        Red = UnresolvedNativeFunction_98(class'Misc_Player'.default.RedOrEnemy, float(2));
        Blue = UnresolvedNativeFunction_98(class'Misc_Player'.default.BlueOrAlly, float(2));
        Red.A = HudColorRed.A;
        Blue.A = HudColorBlue.A;
        // End:0x25F
        if(!class'Misc_Player'.default.bUseTeamColors)
        {
            // End:0x1DC
            if(Team == 0)
            {
                HudColorRed = Blue;
                HudColorBlue = Red;
                HudColorTeam[0] = Blue;
                HudColorTeam[1] = Red;
                TeamSymbols[0].Tints[0] = Blue;
                TeamSymbols[0].Tints[1] = Blue;
                TeamSymbols[1].Tints[0] = Red;
                TeamSymbols[1].Tints[1] = Red;
            }
            // End:0x25C
            else
            {
                HudColorBlue = Blue;
                HudColorRed = Red;
                HudColorTeam[1] = Blue;
                HudColorTeam[0] = Red;
                TeamSymbols[0].Tints[0] = Red;
                TeamSymbols[0].Tints[1] = Red;
                TeamSymbols[1].Tints[0] = Blue;
                TeamSymbols[1].Tints[1] = Blue;
            }
        }
        // End:0x275
        else
        {
            HudColorRed = Red;
            HudColorBlue = Blue;
        }
    }
    // End:0x304
    else
    {
        HudColorRed = default.HudColorRed;
        HudColorBlue = default.HudColorBlue;
        HudColorTeam[0] = default.HudColorTeam[0];
        HudColorTeam[1] = default.HudColorTeam[1];
        TeamSymbols[0].Tints[0] = default.HudColorTeam[0];
        TeamSymbols[0].Tints[1] = default.HudColorTeam[0];
        TeamSymbols[1].Tints[0] = default.HudColorTeam[1];
        TeamSymbols[1].Tints[1] = default.HudColorTeam[1];
    }
    super.UpdateHUD();
    //return;    
}

simulated function DrawAdminVision(Canvas C)
{
    local Pawn Pawn;

    // End:0x37
    foreach AllActors(class'Pawn', Pawn)
    {
        // End:0x23
        if(PawnOwner == Pawn)
        {
            continue;            
        }
        C.UnresolvedNativeFunction_97(Pawn, false, true);        
    }    
    //return;    
}

simulated function DrawTargetingLine(Canvas C)
{
    local Vector TargetPoint1, TargetPoint2, loc, Dir;
    local int i;
    local Actor ViewActor;
    local Rotator Rot;

    // End:0x0D
    if(PlayerOwner == none)
    {
        return;
    }
    PlayerOwner.PlayerCalcView(ViewActor, loc, Rot);
    Dir = vector(Rot);
    // End:0x5A
    if(TargetingActor != ViewActor)
    {
        TargetingLines.Length = 0;
        TargetingActor = ViewActor;
    }
    // End:0x67
    if(ViewActor == none)
    {
        return;
    }
    i = TargetingLines.Length;
    // End:0xE0
    if((i == 0) || Dir != TargetingLines[i - 1])
    {
        // End:0xC0
        if(i > 100)
        {
            TargetingLines.Remove(0, i - 100);
            i = TargetingLines.Length;
        }
        TargetingLines.Length = i + 1;
        TargetingLines[i] = Dir;
    }
    i = 0;
    J0xE7:
    // End:0x1D1 [Loop If]
    if(i < (TargetingLines.Length - 1))
    {
        // End:0x117
        if((TargetingLines[i] Dot Dir) <= float(0))
        {
            // [Explicit Continue]
            goto J0x1C7;
        }
        // End:0x137
        if((TargetingLines[i + 1] Dot Dir) <= float(0))
        {
            // [Explicit Continue]
            goto J0x1C7;
        }
        TargetPoint1 = C.WorldToScreen(loc + (TargetingLines[i] * float(2)));
        TargetPoint2 = C.WorldToScreen(loc + (TargetingLines[i + 1] * float(2)));
        DrawCanvasLine(TargetPoint1.X, TargetPoint1.Y, TargetPoint2.X, TargetPoint2.Y, RedColor);
        J0x1C7:
        ++ i;
        // [Loop Continue]
        goto J0xE7;
    }
    //return;    
}

function CheckCountdown(GameReplicationInfo GRI)
{
    local Misc_BaseGRI G;

    G = Misc_BaseGRI(GRI);
    // End:0x84
    if(((((G == none) || G.MinsPerRound == 0) || G.RoundTime == 0) || G.RoundTime == OldRoundTime) || GRI.Winner != none)
    {
        super(HudCDeathmatch).CheckCountdown(GRI);
        return;
    }
    OldRoundTime = G.RoundTime;
    // End:0xBD
    if((OldRoundTime > 30) && G.MinsPerRound < 2)
    {
        return;
    }
    // End:0xE6
    if(OldRoundTime == 60)
    {
        PlayerOwner.PlayStatusAnnouncement(LongCountName[3], 1, true);
    }
    // End:0x171
    else
    {
        // End:0x10F
        if(OldRoundTime == 30)
        {
            PlayerOwner.PlayStatusAnnouncement(LongCountName[4], 1, true);
        }
        // End:0x171
        else
        {
            // End:0x138
            if(OldRoundTime == 20)
            {
                PlayerOwner.PlayStatusAnnouncement(LongCountName[5], 1, true);
            }
            // End:0x171
            else
            {
                // End:0x171
                if((OldRoundTime <= 5) && OldRoundTime > 0)
                {
                    PlayerOwner.PlayStatusAnnouncement(CountDownName[OldRoundTime - 1], 1, true);
                }
            }
        }
    }
    //return;    
}

simulated function DrawTimer(Canvas C)
{
    local Misc_BaseGRI GRI;
    local int Minutes, Hours, Seconds;

    GRI = Misc_BaseGRI(PlayerOwner.GameReplicationInfo);
    // End:0x26
    if(GRI == none)
    {
        return;
    }
    // End:0x9C
    if(GRI.MinsPerRound > 0)
    {
        Seconds = GRI.RoundTime;
        // End:0x99
        if((GRI.TimeLimit > 0) && GRI.RoundTime > GRI.RemainingTime)
        {
            Seconds = GRI.RemainingTime;
        }
    }
    // End:0xDB
    else
    {
        // End:0xC7
        if(GRI.TimeLimit > 0)
        {
            Seconds = GRI.RemainingTime;
        }
        // End:0xDB
        else
        {
            Seconds = GRI.ElapsedTime;
        }
    }
    TimerBackground.Tints[TeamIndex] = HudColorBlack;
    TimerBackground.Tints[TeamIndex].A = 150;
    DrawSpriteWidget(C, TimerBackground);
    DrawSpriteWidget(C, TimerBackgroundDisc);
    DrawSpriteWidget(C, TimerIcon);
    TimerMinutes.OffsetX = default.TimerMinutes.OffsetX - 80;
    TimerSeconds.OffsetX = default.TimerSeconds.OffsetX - 80;
    TimerDigitSpacer[0].OffsetX = default.TimerDigitSpacer[0].OffsetX;
    TimerDigitSpacer[1].OffsetX = default.TimerDigitSpacer[1].OffsetX;
    // End:0x2AD
    if(Seconds > 3600)
    {
        Hours = Seconds / 3600;
        Seconds -= (Hours * 3600);
        DrawNumericWidget(C, TimerHours, DigitsBig);
        TimerHours.Value = Hours;
        // End:0x22F
        if(Hours > 9)
        {
            TimerMinutes.OffsetX = default.TimerMinutes.OffsetX;
            TimerSeconds.OffsetX = default.TimerSeconds.OffsetX;
        }
        // End:0x29B
        else
        {
            TimerMinutes.OffsetX = default.TimerMinutes.OffsetX - 40;
            TimerSeconds.OffsetX = default.TimerSeconds.OffsetX - 40;
            TimerDigitSpacer[0].OffsetX = default.TimerDigitSpacer[0].OffsetX - 32;
            TimerDigitSpacer[1].OffsetX = default.TimerDigitSpacer[1].OffsetX - 32;
        }
        DrawSpriteWidget(C, TimerDigitSpacer[0]);
    }
    DrawSpriteWidget(C, TimerDigitSpacer[1]);
    Minutes = Seconds / 60;
    Seconds -= (Minutes * 60);
    TimerMinutes.Value = Min(Minutes, 60);
    TimerSeconds.Value = Min(Seconds, 60);
    DrawNumericWidget(C, TimerMinutes, DigitsBig);
    DrawNumericWidget(C, TimerSeconds, DigitsBig);
    //return;    
}

function DisplayEnemyName(Canvas C, PlayerReplicationInfo PRI)
{
    PlayerOwner.ReceiveLocalizedMessage(class'Message_PlayerName', 0, PRI);
    //return;    
}

simulated function DisplayLocalMessages(Canvas C)
{
    super(HudBase).DisplayLocalMessages(C);
    DrawStatsList(C, 0, 0.20);
    DrawStatsList(C, 1, 0.80);
    //return;    
}

function DrawStatsList(Canvas C, int Index, float XPos)
{
    local float Y, XL, YL;
    local int i;

    // End:0x1A
    if(Len(StatsLists[Index].ListName) == 0)
    {
        return;
    }
    Y = 0.350;
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -3);
    C.DrawColor = default.WhiteColor;
    C.DrawScreenText(StatsLists[Index].ListName, XPos, Y, 5);
    C.UnresolvedNativeFunction_97(StatsLists[Index].ListName, XL, YL);
    Y += ((YL * float(2)) / C.ClipY);
    C.DrawColor = UnresolvedNativeFunction_98(default.WhiteColor, 0.70);
    i = 0;
    J0x105:
    // End:0x1F4 [Loop If]
    if(i < StatsLists[Index].RowNames.Length)
    {
        C.DrawScreenText((string(i + 1) $ ". ") $ StatsLists[Index].RowNames[i], XPos - 0.10, Y, 6);
        C.DrawScreenText(StatsLists[Index].RowValues[i], XPos + 0.10, Y, 4);
        C.UnresolvedNativeFunction_97(StatsLists[Index].RowNames[i], XL, YL);
        Y += (YL / C.ClipY);
        ++ i;
        // [Loop Continue]
        goto J0x105;
    }
    //return;    
}

defaultproperties
{
    TeamTex=Texture'HUDContent.Generic.HUD'
    TrackedPlayer=Texture'textures.chair'
    FullHealthColor=(R=0,G=100,B=200,A=255)
    NameColor=(R=200,G=200,B=200,A=255)
    LocationColor=(R=175,G=130,B=0,A=255)
    LowYellowColor=(R=120,G=120,B=0,A=255)
    HighYellowColor=(R=200,G=200,B=0,A=255)
    CurrentStatsList=1
}