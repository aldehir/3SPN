/*******************************************************************************
 * Misc_PlayerDataManager_ServerLink generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Misc_PlayerDataManager_ServerLink extends Actor
    notplaceable;

var array<Misc_PlayerData> PlayerDataArray;
var string ServerLinkAddress;
var int ServerLinkPort;
var string ServerLinkAccount;
var string ServerLinkPassword;
var Misc_ServerLink ServerLink;

function ConfigureServerLink(string ServerLinkAddressIn, int ServerLinkPortIn, string ServerLinkAccountIn, string ServerLinkPasswordIn)
{
    ServerLinkAddress = ServerLinkAddressIn;
    ServerLinkPort = ServerLinkPortIn;
    ServerLinkAccount = ServerLinkAccountIn;
    ServerLinkPassword = ServerLinkPasswordIn;
    //return;    
}

function PostBeginPlay()
{
    super.PostBeginPlay();
    SetTimer(30.0, true);
    //return;    
}

function Destroyed()
{
    // End:0x21
    if(ServerLink != none)
    {
        ServerLink.Close();
        ServerLink = none;
    }
    super.Destroyed();
    //return;    
}

function Misc_ServerLink GetServerLink()
{
    // End:0x11
    if(ServerLink != none)
    {
        return ServerLink;
    }
    ServerLink = UnresolvedNativeFunction_97(class'Misc_ServerLink');
    // End:0x98
    if(ServerLink != none)
    {
        ServerLink.__OnReceivedStats__Delegate = self.ReceiveStats;
        ServerLink.__OnReceivedListName__Delegate = self.ReceiveListName;
        ServerLink.__OnReceivedListIdx__Delegate = self.ReceiveListIdx;
        ServerLink.Connect(ServerLinkAddress, ServerLinkPort, ServerLinkAccount, ServerLinkPassword);
    }
    return ServerLink;
    //return;    
}

function Misc_PlayerData PlayerJoined(Misc_Player P)
{
    local Misc_PlayerData PD;
    local Misc_ServerLink SL;
    local string StatsID;
    local int i;

    LogInternal("PlayerJoined: " $ P.PlayerReplicationInfo.PlayerName);
    StatsID = class'Misc_Util'.static.GetStatsID(P);
    // End:0x80
    if(StatsID == "")
    {
        LogInternal("No stats ID for " $ P.PlayerReplicationInfo.PlayerName);
        return none;
    }
    i = 0;
    J0x87:
    // End:0x144 [Loop If]
    if(i < PlayerDataArray.Length)
    {
        PD = PlayerDataArray[i];
        // End:0xB6
        if(PD == none)
        {
            // [Explicit Continue]
            goto J0x13A;
        }
        // End:0x13A
        if(PD.StatsID == StatsID)
        {
            LogInternal("Existing player record found for " $ P.PlayerReplicationInfo.PlayerName);
            class'Misc_PlayerData'.static.AttachPlayerRecord(P, PD);
            P.LoadPlayerData();
            return PD;
        }
        J0x13A:
        ++ i;
        // [Loop Continue]
        goto J0x87;
    }
    PD = new class'Misc_PlayerData';
    class'Misc_PlayerData'.static.ResetTrackedData(PD.Current);
    class'Misc_PlayerData'.static.ResetStats(PD);
    class'Misc_PlayerData'.static.AttachPlayerRecord(P, PD);
    PD.StatsReceived = false;
    i = PlayerDataArray.Length;
    PlayerDataArray.Length = i + 1;
    PlayerDataArray[i] = PD;
    SL = GetServerLink();
    // End:0x24C
    if(SL != none)
    {
        LogInternal("Requesting stats for player " $ P.PlayerReplicationInfo.PlayerName);
        SL.RequestStats(i, PD.StatsID);
    }
    return none;
    //return;    
}

function PlayerLeft(Misc_Player P)
{
    LogInternal("PlayerLeft: " $ P.PlayerReplicationInfo.PlayerName);
    P.StorePlayerData();
    // End:0x69
    if(P.PlayerData != none)
    {
        class'Misc_PlayerData'.static.DetachPlayerRecord(P.PlayerData);
    }
    //return;    
}

function PlayerChangedName(Misc_Player P)
{
    local string PlayerName;

    LogInternal("PlayerChangedName: " $ P.PlayerReplicationInfo.PlayerName);
    PlayerName = class'Misc_Util'.static.StripColor(P.PlayerReplicationInfo.PlayerName);
    ReplaceText(PlayerName, " ", "_");
    ReplaceText(PlayerName, "]", "_");
    // End:0xAF
    if(P.PlayerData != none)
    {
        P.PlayerData.OwnerName = PlayerName;
    }
    //return;    
}

function ReceiveStats(int PlayerIndex, float Rank, float AvgPPR)
{
    local Misc_PlayerData PD;

    // End:0x12
    if(PlayerIndex >= PlayerDataArray.Length)
    {
        return;
    }
    PD = PlayerDataArray[PlayerIndex];
    PD.Rank = Rank;
    PD.AvgPPR = AvgPPR;
    PD.StatsReceived = true;
    // End:0x88
    if(PD.Owner != none)
    {
        PD.Owner.LoadPlayerDataStats();
    }
    //return;    
}

function ReceiveListName(string ListName)
{
    // End:0x3B
    if(Team_GameBase(Level.Game) != none)
    {
        Team_GameBase(Level.Game).SendStatsListNameToPlayers(ListName);
    }
    //return;    
}

function ReceiveListIdx(int PlayerIndex, string PlayerName, string PlayerStat)
{
    // End:0x45
    if(Team_GameBase(Level.Game) != none)
    {
        Team_GameBase(Level.Game).SendStatsListIdxToPlayers(PlayerIndex, PlayerName, PlayerStat);
    }
    //return;    
}

function FinishMatch()
{
    local Misc_PlayerData PD;
    local Misc_ServerLink SL;
    local int i, PlayerCnt;
    local string TimeString, TeamScoreStr, MapName;
    local Team_GameBase TGB;

    SL = GetServerLink();
    // End:0x19
    if(SL == none)
    {
        return;
    }
    TGB = Team_GameBase(Level.Game);
    // End:0xFA
    if(((TGB != none) && TGB.Teams[0] != none) && TGB.Teams[1] != none)
    {
        // End:0xB3
        if((TGB.Teams[0].Score == float(0)) && TGB.Teams[1].Score == float(0))
        {
            return;
        }
        TeamScoreStr = (string(int(TGB.Teams[0].Score)) $ ",") $ string(int(TGB.Teams[1].Score));
    }
    LogInternal("Registering match stats...");
    TimeString = class'Misc_Util'.static.GetTimeStringFromLevel(Level);
    // End:0x163
    if(TimeString == "")
    {
        LogInternal("Error: Unable to get match time");
        return;
    }
    PlayerCnt = 0;
    i = 0;
    J0x171:
    // End:0x267 [Loop If]
    if(i < PlayerDataArray.Length)
    {
        PD = PlayerDataArray[i];
        // End:0x1A0
        if(PD == none)
        {
            // [Explicit Continue]
            goto J0x25D;
        }
        // End:0x1CC
        if(PD.Owner != none)
        {
            PD.Owner.StorePlayerData();
        }
        // End:0x256
        if(((((PD.Current.Score == float(0)) && PD.Current.Kills == 0) && PD.Current.Deaths == 0) && PD.Current.Thaws == 0) && PD.Current.Git == 0)
        {
            // [Explicit Continue]
            goto J0x25D;
        }
        ++ PlayerCnt;
        J0x25D:
        ++ i;
        // [Loop Continue]
        goto J0x171;
    }
    // End:0x292
    if(PlayerCnt == 0)
    {
        LogInternal("No active players in match");
        return;
    }
    MapName = class'Misc_Util'.static.GetMapName(Level);
    LogInternal((((("Registering match with time: " $ TimeString) $ ", map: ") $ MapName) $ ", team scores: ") $ TeamScoreStr);
    SL.RegisterGame(TimeString, MapName, TeamScoreStr);
    i = 0;
    J0x325:
    // End:0x4FA [Loop If]
    if(i < PlayerDataArray.Length)
    {
        PD = PlayerDataArray[i];
        // End:0x354
        if(PD == none)
        {
            // [Explicit Continue]
            goto J0x4F0;
        }
        // End:0x3DE
        if(((((PD.Current.Score == float(0)) && PD.Current.Kills == 0) && PD.Current.Deaths == 0) && PD.Current.Thaws == 0) && PD.Current.Git == 0)
        {
            // [Explicit Continue]
            goto J0x4F0;
        }
        LogInternal(((((("Sending results for " $ PD.OwnerID) $ " - ") $ PD.OwnerName) $ " (index:") $ string(PD.StatsIndex)) $ ")");
        SL.RegisterStats(TimeString, PD.OwnerName, PD.StatsID, PD.TeamIdx, PD.Current.Rounds, PD.Current.Score, PD.Current.Kills, PD.Current.Deaths, PD.Current.Thaws, PD.Current.Git);
        J0x4F0:
        ++ i;
        // [Loop Continue]
        goto J0x325;
    }
    //return;    
}

function GetRandomStats()
{
    local Misc_ServerLink SL;

    SL = GetServerLink();
    // End:0x19
    if(SL == none)
    {
        return;
    }
    SL.RequestStatsList();
    //return;    
}

function Timer()
{
    local Misc_PlayerData PD;
    local Misc_ServerLink SL;
    local int i;

    SL = GetServerLink();
    // End:0x8E
    if(SL != none)
    {
        i = 0;
        J0x1E:
        // End:0x8E [Loop If]
        if(i < PlayerDataArray.Length)
        {
            PD = PlayerDataArray[i];
            // End:0x4D
            if(PD == none)
            {
                // [Explicit Continue]
                goto J0x84;
            }
            // End:0x84
            if(PD.StatsReceived == false)
            {
                SL.RequestStats(i, PD.StatsID);
            }
            J0x84:
            ++ i;
            // [Loop Continue]
            goto J0x1E;
        }
    }
    super.Timer();
    //return;    
}

defaultproperties
{
    bHidden=true
    bSkipActorPropertyReplication=true
    bOnlyDirtyReplication=true
    RemoteRole=0
}