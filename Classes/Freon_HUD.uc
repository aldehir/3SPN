/*******************************************************************************
 * Freon_HUD generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Freon_HUD extends TAM_HUD
    config(User)
    transient;

var Texture FrozenBeacon;
var float ThawBarWidth;
var float ThawBarHeight;
var Texture ThawBackMat;
var Texture ThawBarMat;

static function bool IsTargetInFrontOfPlayer(Canvas C, Actor Target, out Vector ScreenPos, Vector CamLoc, Rotator CamRot)
{
    // End:0x28
    if(((Target.Location - CamLoc) Dot vector(CamRot)) < float(0))
    {
        return false;
    }
    ScreenPos = C.WorldToScreen(Target.Location + (vect(0.0, 0.0, 1.0) * Target.CollisionHeight));
    // End:0x9D
    if((ScreenPos.X <= float(0)) || ScreenPos.X >= C.ClipX)
    {
        return false;
    }
    // End:0xD0
    if((ScreenPos.Y <= float(0)) || ScreenPos.Y >= C.ClipY)
    {
        return false;
    }
    return true;
    //return;    
}

function DrawCustomBeacon(Canvas C, Pawn P, float ScreenLocX, float ScreenLocY)
{
    local Vector ScreenLoc, CamLoc;
    local Rotator CamRot;
    local float Distance, scaledist, Scale, XL, YL;

    local byte pawnTeam, OwnerTeam;
    local string Info, Name;

    // End:0x42
    if(((FrozenBeacon == none) || P.PlayerReplicationInfo == none) || P.PlayerReplicationInfo.Team == none)
    {
        return;
    }
    pawnTeam = byte(P.PlayerReplicationInfo.Team.TeamIndex);
    OwnerTeam = byte(PlayerOwner.GetTeamNum());
    // End:0xB5
    if(!PlayerOwner.PlayerReplicationInfo.bOnlySpectator && pawnTeam != OwnerTeam)
    {
        return;
    }
    C.GetCameraLocation(CamLoc, CamRot);
    Distance = VSize(CamLoc - P.Location);
    // End:0x105
    if(Distance > PlayerOwner.TeamBeaconMaxDist)
    {
        return;
    }
    // End:0x148
    if(!IsTargetInFrontOfPlayer(C, P, ScreenLoc, CamLoc, CamRot) || !FastTrace(P.Location, CamLoc))
    {
        return;
    }
    scaledist = PlayerOwner.TeamBeaconMaxDist * FClamp(0.040 * P.CollisionRadius, 1.0, 2.0);
    Scale = FClamp((0.280 * (scaledist - Distance)) / scaledist, 0.10, 0.250);
    // End:0x1E3
    if(Distance <= class'Freon_Trigger'.default.CollisionRadius)
    {
        C.DrawColor = class'Freon_PRI'.default.FrozenColor;
    }
    // End:0x208
    else
    {
        C.DrawColor = class'Freon_PRI'.default.FrozenColor * 0.750;
    }
    C.Style = 1;
    // End:0x4A2
    if(Distance < PlayerOwner.TeamBeaconPlayerInfoMaxDist)
    {
        C.Font = C.SmallFont;
        // End:0x286
        if(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD)
        {
            Name = Misc_PRI(P.PlayerReplicationInfo).GetColoredName();
        }
        // End:0x2A3
        else
        {
            Name = P.PlayerReplicationInfo.PlayerName;
        }
        Info = ((Name $ " (") $ string(P.Health)) $ "%)";
        C.TextSize(Info, XL, YL);
        C.SetPos(ScreenLoc.X - (0.1250 * float(FrozenBeacon.USize)), (ScreenLoc.Y - (0.1250 * float(FrozenBeacon.VSize))) - YL);
        C.DrawTextClipped(Info, false);
        C.SetPos(ScreenLoc.X + ((1.250 * float(FrozenBeacon.USize)) * Scale), ScreenLoc.Y + ((0.10 * float(FrozenBeacon.VSize)) * Scale));
        C.DrawTileStretched(ThawBackMat, ThawBarWidth, (float(FrozenBeacon.VSize) * Scale) * 0.50);
        C.SetPos(ScreenLoc.X + ((1.250 * float(FrozenBeacon.USize)) * Scale), ScreenLoc.Y + ((0.10 * float(FrozenBeacon.VSize)) * Scale));
        C.DrawTileStretched(ThawBarMat, ThawBarWidth * (float(P.Health) / 100.0), (float(FrozenBeacon.VSize) * Scale) * 0.50);
    }
    C.SetPos(ScreenLoc.X - ((0.1250 * float(FrozenBeacon.USize)) * Scale), ScreenLoc.Y - ((0.1250 * float(FrozenBeacon.VSize)) * Scale));
    C.DrawTile(FrozenBeacon, float(FrozenBeacon.USize) * Scale, float(FrozenBeacon.VSize) * Scale, 0.0, 0.0, float(FrozenBeacon.USize), float(FrozenBeacon.VSize));
    //return;    
}

simulated function bool ShouldDrawPlayer(Misc_PRI PRI)
{
    // End:0x23
    if((PRI == none) || PRI.Team == none)
    {
        return false;
    }
    // End:0x90
    if(((Freon_PawnReplicationInfo(PRI.PawnReplicationInfo) == none) || PRI.bOutOfLives && !Freon_PawnReplicationInfo(PRI.PawnReplicationInfo).bFrozen) || PRI == PlayerOwner.PlayerReplicationInfo)
    {
        return false;
    }
    return true;
    //return;    
}

simulated function DrawPlayers(Canvas C)
{
    local int i, Team;
    local float XL, YL, MaxNamePos;
    local int PosX, PosY;
    local float Scale;
    local string Name;
    local int listy, Space, NameY, NameX, Height, Width,
	    Health, StartHealth, allies, Enemies;

    local Misc_PRI PRI;

    // End:0x0D
    if(MyOwner == none)
    {
        return;
    }
    // End:0x42
    if(PlayerOwner.PlayerReplicationInfo.Team != none)
    {
        Team = PlayerOwner.GetTeamNum();
    }
    // End:0xA6
    else
    {
        // End:0x83
        if((Pawn(PlayerOwner.ViewTarget) == none) || Pawn(PlayerOwner.ViewTarget).GetTeamNum() == 255)
        {
            return;
        }
        Team = Pawn(PlayerOwner.ViewTarget).GetTeamNum();
    }
    listy = int((0.080 * HudScale) * C.ClipY);
    Space = int((0.0050 * HudScale) * C.ClipY);
    Scale = FMax(HudScale, 0.750);
    Height = int((C.ClipY * 0.02550) * Scale);
    Width = int((C.ClipX * 0.130) * Scale);
    NameX = int((C.ClipX * 0.0250) * Scale);
    MaxNamePos = 0.990 * float(Width - NameX);
    C.Font = GetFontSizeIndex(C, -3 + int(Scale * 1.250));
    C.StrLen("Test", XL, YL);
    NameY = int(float(int(float(Height) * 0.60)) - (YL * 0.50));
    i = 0;
    J0x201:
    // End:0xCB3 [Loop If]
    if(i < MyOwner.GameReplicationInfo.PRIArray.Length)
    {
        PRI = Misc_PRI(MyOwner.GameReplicationInfo.PRIArray[i]);
        // End:0x25E
        if(!ShouldDrawPlayer(PRI))
        {
            // [Explicit Continue]
            goto J0xCA9;
        }
        // End:0x275
        if(!class'Misc_Player'.default.bShowTeamInfo)
        {
            // [Explicit Continue]
            goto J0xCA9;
        }
        // End:0x8B2
        if(PRI.Team.TeamIndex == Team)
        {
            // End:0x2A5
            if(allies > 9)
            {
                // [Explicit Continue]
                goto J0xCA9;
            }
            PosY = listy + ((Height + Space) * allies);
            PosX = int(C.ClipX * 0.010);
            C.SetPos(float(PosX), float(PosY));
            // End:0x362
            if((Freon_PawnReplicationInfo(PRI.PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(PRI.PawnReplicationInfo).bFrozen)
            {
                C.DrawColor = class'Freon_PRI'.default.FrozenColor * 0.60;
            }
            // End:0x376
            else
            {
                C.DrawColor = default.BlackColor;
            }
            C.DrawColor.A = 100;
            C.DrawTile(TeamTex, float(Width), float(Height), 168.0, 211.0, 166.0, 44.0);
            C.SetPos(float(PosX), float(PosY));
            C.DrawColor = default.WhiteColor;
            C.DrawTile(TeamTex, (C.ClipX * 0.01950) * Scale, (C.ClipY * 0.0260) * Scale, 119.0, 258.0, 54.0, 55.0);
            // End:0x477
            if(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD)
            {
                Name = PRI.GetColoredName();
            }
            // End:0x48B
            else
            {
                Name = PRI.PlayerName;
            }
            C.DrawColor = NameColor;
            C.SetPos(float(PosX + NameX), float(PosY + NameY));
            class'Misc_Util'.static.DrawTextClipped(C, Name, MaxNamePos);
            // End:0x57A
            if((Freon_PawnReplicationInfo(PRI.PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(PRI.PawnReplicationInfo).bFrozen)
            {
                Health = PRI.PawnReplicationInfo.Health;
                C.DrawColor = class'Freon_PRI'.default.FrozenColor * (0.50 + (float(Health) * 0.0050));
            }
            // End:0x75A
            else
            {
                Health = PRI.PawnReplicationInfo.Health + PRI.PawnReplicationInfo.Shield;
                // End:0x5F2
                if(TAM_TeamInfo(PRI.Team) != none)
                {
                    StartHealth = TAM_TeamInfo(PRI.Team).StartingHealth;
                }
                // End:0x676
                else
                {
                    // End:0x630
                    if(TAM_TeamInfoRed(PRI.Team) != none)
                    {
                        StartHealth = TAM_TeamInfoRed(PRI.Team).StartingHealth;
                    }
                    // End:0x676
                    else
                    {
                        // End:0x66E
                        if(TAM_TeamInfoBlue(PRI.Team) != none)
                        {
                            StartHealth = TAM_TeamInfoBlue(PRI.Team).StartingHealth;
                        }
                        // End:0x676
                        else
                        {
                            StartHealth = 200;
                        }
                    }
                }
                // End:0x746
                if(Health < StartHealth)
                {
                    C.DrawColor.B = 0;
                    C.DrawColor.R = byte(Min(255, int(float(511) * (float(StartHealth - Health) / float(StartHealth)))));
                    // End:0x72B
                    if(C.DrawColor.R == 255)
                    {
                        C.DrawColor.G = byte(Min(255, int(float(511) * (float(Health) / float(StartHealth)))));
                    }
                    // End:0x743
                    else
                    {
                        C.DrawColor.G = byte(255);
                    }
                }
                // End:0x75A
                else
                {
                    C.DrawColor = FullHealthColor;
                }
            }
            C.SetPos(float(PosX) + ((0.00220 * Scale) * C.ClipX), float(PosY) + ((0.00350 * Scale) * C.ClipY));
            C.DrawTile(TeamTex, (C.ClipX * 0.01650) * Scale, (C.ClipY * 0.01850) * Scale, 340.0, 432.0, 78.0, 78.0);
            C.DrawColor = WhiteColor;
            Draw2DLocationDot(C, PRI.PawnReplicationInfo.Position, (float(PosX) / C.ClipX) + (0.0060 * Scale), (float(PosY) / C.ClipY) + (0.0080 * Scale), 0.0080 * Scale, 0.010 * Scale);
            ++ allies;
            // [Explicit Continue]
            goto J0xCA9;
        }
        // End:0x8C1
        if(Enemies > 9)
        {
            // [Explicit Continue]
            goto J0xCA9;
        }
        PosY = listy + ((Height + Space) * Enemies);
        PosX = int(C.ClipX * 0.990);
        C.SetPos(float(PosX - Width), float(PosY));
        // End:0x985
        if((Freon_PawnReplicationInfo(PRI.PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(PRI.PawnReplicationInfo).bFrozen)
        {
            C.DrawColor = class'Freon_PRI'.default.FrozenColor * 0.60;
        }
        // End:0x999
        else
        {
            C.DrawColor = default.BlackColor;
        }
        C.DrawColor.A = 100;
        C.DrawTile(TeamTex, float(Width), float(Height), 168.0, 211.0, 166.0, 44.0);
        C.SetPos(float(PosX) - ((C.ClipX * 0.01950) * Scale), float(PosY));
        C.DrawColor = default.WhiteColor;
        C.DrawTile(TeamTex, (C.ClipX * 0.01950) * Scale, (C.ClipY * 0.0260) * Scale, 119.0, 258.0, 54.0, 55.0);
        // End:0xAB8
        if(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD)
        {
            Name = PRI.GetColoredName();
        }
        // End:0xACC
        else
        {
            Name = PRI.PlayerName;
        }
        C.TextSize(Name, XL, YL);
        XL = float(Min(int(XL), int(MaxNamePos)));
        C.DrawColor = NameColor;
        C.SetPos((float(PosX) - XL) - float(NameX), float(PosY + NameY));
        class'Misc_Util'.static.DrawTextClipped(C, Name, MaxNamePos);
        // End:0xBC0
        if((Freon_PawnReplicationInfo(PRI.PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(PRI.PawnReplicationInfo).bFrozen)
        {
            C.DrawColor = class'Freon_PRI'.default.FrozenColor;
        }
        // End:0xBEC
        else
        {
            C.DrawColor = HudColorTeam[PRI.Team.TeamIndex];
        }
        C.SetPos(float(PosX) - ((0.01650 * Scale) * C.ClipX), float(PosY) + ((0.00350 * Scale) * C.ClipY));
        C.DrawTile(TeamTex, (C.ClipX * 0.01650) * Scale, (C.ClipY * 0.01850) * Scale, 340.0, 432.0, 78.0, 78.0);
        ++ Enemies;
        J0xCA9:
        ++ i;
        // [Loop Continue]
        goto J0x201;
    }
    //return;    
}

simulated function DrawPlayersExtended(Canvas C)
{
    local int i, Team;
    local float XL, YL, MaxNamePos;
    local int PosX, PosY;
    local float Scale;
    local string Name;
    local int listy, Space, NameY, NameX, Height, Width;

    local Misc_PRI PRI;
    local int Health, StartHealth, allies, Enemies;

    // End:0x0D
    if(MyOwner == none)
    {
        return;
    }
    // End:0x42
    if(PlayerOwner.PlayerReplicationInfo.Team != none)
    {
        Team = PlayerOwner.GetTeamNum();
    }
    // End:0xA6
    else
    {
        // End:0x83
        if((Pawn(PlayerOwner.ViewTarget) == none) || Pawn(PlayerOwner.ViewTarget).GetTeamNum() == 255)
        {
            return;
        }
        Team = Pawn(PlayerOwner.ViewTarget).GetTeamNum();
    }
    listy = int((0.080 * HudScale) * C.ClipY);
    Scale = 0.750;
    Height = int(C.ClipY * 0.020);
    Space = int(float(Height) + (0.00750 * C.ClipY));
    NameX = int(C.ClipX * 0.020);
    C.Font = GetFontSizeIndex(C, -3);
    C.StrLen("Test", XL, YL);
    NameY = int(float(int(float(Height) * 0.60)) - (YL * 0.50));
    i = 0;
    J0x19F:
    // End:0x1001 [Loop If]
    if(i < MyOwner.GameReplicationInfo.PRIArray.Length)
    {
        PRI = Misc_PRI(MyOwner.GameReplicationInfo.PRIArray[i]);
        // End:0x1FC
        if(!ShouldDrawPlayer(PRI))
        {
            // [Explicit Continue]
            goto J0xFF7;
        }
        // End:0x213
        if(!class'Misc_Player'.default.bShowTeamInfo)
        {
            // [Explicit Continue]
            goto J0xFF7;
        }
        // End:0xBAB
        if(PRI.Team.TeamIndex == Team)
        {
            // End:0x243
            if(allies > 9)
            {
                // [Explicit Continue]
                goto J0xFF7;
            }
            Space = int(float(Height) + (0.00750 * C.ClipY));
            Width = int(C.ClipX * 0.140);
            MaxNamePos = 0.780 * float(Width - NameX);
            PosY = listy + ((Height + Space) * allies);
            PosX = int(C.ClipX * 0.010);
            C.SetPos(float(PosX), float(PosY));
            // End:0x35E
            if((Freon_PawnReplicationInfo(PRI.PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(PRI.PawnReplicationInfo).bFrozen)
            {
                C.DrawColor = class'Freon_PRI'.default.FrozenColor * 0.60;
            }
            // End:0x372
            else
            {
                C.DrawColor = default.BlackColor;
            }
            C.DrawColor.A = 100;
            C.DrawTile(TeamTex, float(Width + PosX), float(Height), 168.0, 211.0, 166.0, 44.0);
            C.SetPos(float(PosX * 2), float(PosY) + (float(Height) * 1.10));
            C.DrawTile(TeamTex, float(Width), float(Height), 168.0, 211.0, 166.0, 44.0);
            C.SetPos(float(PosX), float(PosY));
            C.DrawColor = default.WhiteColor;
            C.DrawTile(TeamTex, (C.ClipX * 0.01950) * Scale, (C.ClipY * 0.0260) * Scale, 119.0, 258.0, 54.0, 55.0);
            // End:0x4DE
            if(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD)
            {
                Name = PRI.GetColoredName();
            }
            // End:0x4F2
            else
            {
                Name = PRI.PlayerName;
            }
            C.DrawColor = NameColor;
            C.SetPos(float(PosX + NameX), float(PosY + NameY));
            class'Misc_Util'.static.DrawTextClipped(C, Name, MaxNamePos);
            MaxNamePos = 0.80 * float(Width - NameX);
            Name = PRI.GetLocationName();
            C.StrLen(Name, XL, YL);
            // End:0x5CF
            if(XL > MaxNamePos)
            {
                Name = Left(Name, int((MaxNamePos / XL) * float(Len(Name))));
            }
            C.SetPos(float(PosX + NameX), (float(PosY) + (float(Height) * 1.10)) + float(NameY));
            // End:0x667
            if((Freon_PawnReplicationInfo(PRI.PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(PRI.PawnReplicationInfo).bFrozen)
            {
                C.DrawColor = class'Freon_PRI'.default.FrozenColor;
            }
            // End:0x67B
            else
            {
                C.DrawColor = LocationColor;
            }
            C.DrawText(Name);
            // End:0x71E
            if((Freon_PawnReplicationInfo(PRI.PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(PRI.PawnReplicationInfo).bFrozen)
            {
                Health = PRI.PawnReplicationInfo.Health;
                C.DrawColor = class'Freon_PRI'.default.FrozenColor * (0.50 + (float(Health) * 0.0050));
            }
            // End:0x8FC
            else
            {
                Health = PRI.PawnReplicationInfo.Health + PRI.PawnReplicationInfo.Shield;
                // End:0x796
                if(TAM_TeamInfo(PRI.Team) != none)
                {
                    StartHealth = TAM_TeamInfo(PRI.Team).StartingHealth;
                }
                // End:0x81A
                else
                {
                    // End:0x7D4
                    if(TAM_TeamInfoRed(PRI.Team) != none)
                    {
                        StartHealth = TAM_TeamInfoRed(PRI.Team).StartingHealth;
                    }
                    // End:0x81A
                    else
                    {
                        // End:0x812
                        if(TAM_TeamInfoBlue(PRI.Team) != none)
                        {
                            StartHealth = TAM_TeamInfoBlue(PRI.Team).StartingHealth;
                        }
                        // End:0x81A
                        else
                        {
                            StartHealth = 200;
                        }
                    }
                }
                // End:0x8E8
                if(Health < StartHealth)
                {
                    C.DrawColor.B = 0;
                    C.DrawColor.R = byte(Min(200, int(float(400) * (float(StartHealth - Health) / float(StartHealth)))));
                    // End:0x8CF
                    if(C.DrawColor.R == 200)
                    {
                        C.DrawColor.G = byte(Min(200, int(float(400) * (float(Health) / float(StartHealth)))));
                    }
                    // End:0x8E5
                    else
                    {
                        C.DrawColor.G = 200;
                    }
                }
                // End:0x8FC
                else
                {
                    C.DrawColor = FullHealthColor;
                }
            }
            C.SetPos(float(PosX) + ((0.00220 * Scale) * C.ClipX), float(PosY) + ((0.00350 * Scale) * C.ClipY));
            C.DrawTile(TeamTex, (C.ClipX * 0.01650) * Scale, (C.ClipY * 0.01850) * Scale, 340.0, 432.0, 78.0, 78.0);
            Name = string(Health);
            C.StrLen(Name, XL, YL);
            C.SetPos(((float(PosX) * 1.50) + float(Width)) - XL, float(PosY + NameY));
            C.DrawText(Name);
            Name = string(PRI.PawnReplicationInfo.Adrenaline);
            C.StrLen(Name, XL, YL);
            C.SetPos(((float(PosX) * 1.50) + float(Width)) - XL, (float(PosY) + (float(Height) * 1.10)) + float(NameY));
            // End:0xAE4
            if(PRI.PawnReplicationInfo.Adrenaline < 100)
            {
                C.DrawColor = LowYellowColor;
            }
            // End:0xAF8
            else
            {
                C.DrawColor = HighYellowColor;
            }
            C.DrawText(Name);
            C.DrawColor = WhiteColor;
            Draw2DLocationDot(C, PRI.PawnReplicationInfo.Position, (float(PosX) / C.ClipX) + (0.0060 * Scale), (float(PosY) / C.ClipY) + (0.0080 * Scale), 0.0080 * Scale, 0.010 * Scale);
            ++ allies;
            // [Explicit Continue]
            goto J0xFF7;
        }
        // End:0xBBA
        if(Enemies > 9)
        {
            // [Explicit Continue]
            goto J0xFF7;
        }
        Space = int(0.0050 * C.ClipY);
        Width = int(C.ClipX * 0.110);
        MaxNamePos = 0.990 * float(Width - NameX);
        PosY = listy + ((Height + Space) * Enemies);
        PosX = int(C.ClipX * 0.990);
        C.SetPos(float(PosX - Width), float(PosY));
        // End:0xCD3
        if((Freon_PawnReplicationInfo(PRI.PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(PRI.PawnReplicationInfo).bFrozen)
        {
            C.DrawColor = class'Freon_PRI'.default.FrozenColor * 0.60;
        }
        // End:0xCE7
        else
        {
            C.DrawColor = default.BlackColor;
        }
        C.DrawColor.A = 100;
        C.DrawTile(TeamTex, float(Width), float(Height), 168.0, 211.0, 166.0, 44.0);
        C.SetPos(float(PosX) - ((C.ClipX * 0.01950) * Scale), float(PosY));
        C.DrawColor = default.WhiteColor;
        C.DrawTile(TeamTex, (C.ClipX * 0.01950) * Scale, (C.ClipY * 0.0260) * Scale, 119.0, 258.0, 54.0, 55.0);
        // End:0xE06
        if(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD)
        {
            Name = PRI.GetColoredName();
        }
        // End:0xE1A
        else
        {
            Name = PRI.PlayerName;
        }
        C.TextSize(Name, XL, YL);
        XL = float(Min(int(XL), int(MaxNamePos)));
        C.DrawColor = NameColor;
        C.SetPos((float(PosX) - XL) - float(NameX), float(PosY + NameY));
        class'Misc_Util'.static.DrawTextClipped(C, Name, MaxNamePos);
        // End:0xF0E
        if((Freon_PawnReplicationInfo(PRI.PawnReplicationInfo) != none) && Freon_PawnReplicationInfo(PRI.PawnReplicationInfo).bFrozen)
        {
            C.DrawColor = class'Freon_PRI'.default.FrozenColor;
        }
        // End:0xF3A
        else
        {
            C.DrawColor = HudColorTeam[PRI.Team.TeamIndex];
        }
        C.SetPos(float(PosX) - ((0.0160 * Scale) * C.ClipX), float(PosY) + ((0.00350 * Scale) * C.ClipY));
        C.DrawTile(TeamTex, (C.ClipX * 0.01650) * Scale, (C.ClipY * 0.01850) * Scale, 340.0, 432.0, 78.0, 78.0);
        ++ Enemies;
        J0xFF7:
        ++ i;
        // [Loop Continue]
        goto J0x19F;
    }
    //return;    
}

defaultproperties
{
    FrozenBeacon=Texture'textures.Flake'
    ThawBarWidth=50.0
    ThawBarHeight=10.0
    ThawBackMat=Texture'InterfaceContent.Menu.BorderBoxD'
    ThawBarMat=Texture'ONSInterface-TX.HealthBar'
}