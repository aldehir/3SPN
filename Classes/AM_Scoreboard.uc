/*******************************************************************************
 * AM_Scoreboard generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AM_Scoreboard extends TAM_Scoreboard
    hidecategories(Movement,Collision,Lighting,LightColor,Karma,Force)
    config;

simulated function DrawLabelsBar(Canvas C, int BarX, int BarY, int BarW, int BarH, Color BackgroundCol)
{
    local int NameX, NameY, StatX, StatY, ScoreX, ScoreY,
	    PointsPerX, PointsPerY, WinsX, WinsY, DeathsX,
	    DeathsY, PingX, PingY, PLX, PLY;

    local float XL, YL;
    local string Name;

    NameX = int(float(BarW) * 0.0310);
    NameY = int(C.ClipY * 0.010);
    StatX = int(float(BarW) * 0.0510);
    StatY = int(C.ClipY * 0.0350);
    ScoreX = int(float(BarW) * 0.660);
    ScoreY = int(C.ClipY * 0.010);
    PointsPerX = int(float(BarW) * 0.660);
    PointsPerY = int(C.ClipY * 0.0350);
    WinsX = int(float(BarW) * 0.80);
    WinsY = int(C.ClipY * 0.010);
    DeathsX = int(float(BarW) * 0.80);
    DeathsY = int(C.ClipY * 0.0350);
    PingX = int(float(BarW) * 0.920);
    PingY = int(C.ClipY * 0.010);
    PLX = int(float(BarW) * 0.920);
    PLY = int(C.ClipY * 0.0350);
    C.DrawColor = BackgroundCol;
    C.DrawColor.A = BaseAlpha;
    C.SetPos(float(BarX), float(BarY));
    C.UnresolvedNativeFunction_97(BaseTex, float(BarW), float(BarH), 17.0, 31.0, 751.0, 71.0);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.WhiteColor, 0.70);
    C.SetPos(float(BarX + NameX), float(BarY + NameY));
    C.UnresolvedNativeFunction_97("Name", true);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.RedColor, 0.70);
    C.DrawColor.G = 130;
    Name = "Location";
    C.SetPos(float(BarX + StatX), float(BarY + StatY));
    C.UnresolvedNativeFunction_97(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.WhiteColor, 0.70);
    Name = "Score";
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + ScoreX) - (XL * 0.50), float(BarY + ScoreY));
    C.UnresolvedNativeFunction_97(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -3);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.WhiteColor, 0.550);
    Name = "PPR";
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + PointsPerX) - (XL * 0.50), float(BarY + PointsPerY));
    C.UnresolvedNativeFunction_97(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.WhiteColor, 0.70);
    Name = "Wins";
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + WinsX) - (XL * 0.50), float(BarY + WinsY));
    C.UnresolvedNativeFunction_97(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -3);
    C.DrawColor.R = 170;
    C.DrawColor.G = 20;
    C.DrawColor.B = 20;
    Name = "Deaths";
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + DeathsX) - (XL * 0.50), float(BarY + DeathsY));
    C.UnresolvedNativeFunction_97(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.CyanColor, 0.50);
    C.DrawColor.B = 150;
    C.DrawColor.R = 20;
    Name = "Ping";
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + PingX) - (XL * 0.50), float(BarY + PingY));
    C.UnresolvedNativeFunction_97(Name, true);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -3);
    Name = "P/L";
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + PLX) - (XL * 0.50), float(BarY + PLY));
    C.UnresolvedNativeFunction_97(Name, true);
    //return;    
}

simulated function DrawPlayerBar(Canvas C, int BarX, int BarY, int BarW, int BarH, PlayerReplicationInfo PRI)
{
    local int NameX, NameY, NameW, StatX, StatY, ScoreX,
	    ScoreY, PointsPerX, PointsPerY, WinsX, WinsY,
	    DeathsX, DeathsY, PingX, PingY, PLX,
	    PLY;

    local string Name;
    local float XL, YL;
    local Misc_PRI OwnerPRI;
    local float Score;

    OwnerPRI = Misc_PRI(PlayerController(Owner).PlayerReplicationInfo);
    NameX = int(float(BarW) * 0.0310);
    NameY = int(C.ClipY * 0.00750);
    NameW = int(float(BarW) * 0.470);
    StatX = int(float(BarW) * 0.0510);
    StatY = int(C.ClipY * 0.0350);
    ScoreX = int(float(BarW) * 0.660);
    ScoreY = int(C.ClipY * 0.00750);
    PointsPerX = int(float(BarW) * 0.660);
    PointsPerY = int(C.ClipY * 0.0350);
    WinsX = int(float(BarW) * 0.80);
    WinsY = int(C.ClipY * 0.00750);
    DeathsX = int(float(BarW) * 0.80);
    DeathsY = int(C.ClipY * 0.0350);
    PingX = int(float(BarW) * 0.920);
    PingY = int(C.ClipY * 0.00750);
    PLX = int(float(BarW) * 0.920);
    PLY = int(C.ClipY * 0.0350);
    C.SetPos(float(BarX), float(BarY));
    C.UnresolvedNativeFunction_97(BaseTex, float(BarW), float(BarH), 18.0, 107.0, 745.0, 81.0);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    // End:0x2B2
    if(PRI.bOutOfLives || Misc_PRI(PRI) == none)
    {
        Name = PRI.PlayerName;
        C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.WhiteColor, 0.40);
    }
    // End:0x340
    else
    {
        // End:0x307
        if((default.bEnableColoredNamesOnScoreboard && Misc_PRI(PRI) != none) && Misc_PRI(PRI).GetColoredName() != "")
        {
            Name = Misc_PRI(PRI).GetColoredName();
        }
        // End:0x31B
        else
        {
            Name = PRI.PlayerName;
        }
        C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.WhiteColor, 0.70);
    }
    C.SetPos(float(BarX + NameX), float(BarY + NameY));
    class'Misc_Util'.static.DrawTextClipped(C, Name, float(NameW));
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
    // End:0x4AB
    if(!GRI.bMatchHasBegun)
    {
        // End:0x3F5
        if(PRI.bReadyToPlay)
        {
            Name = ReadyText;
        }
        // End:0x400
        else
        {
            Name = NotReadyText;
        }
        // End:0x46D
        if(PRI.bAdmin)
        {
            Name = "Admin -" @ Name;
            C.DrawColor.R = 170;
            C.DrawColor.G = 20;
            C.DrawColor.B = 20;
        }
        // End:0x4A8
        else
        {
            C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.RedColor, 0.70);
            C.DrawColor.G = 130;
        }
    }
    // End:0x68B
    else
    {
        // End:0x63C
        if(!PRI.bAdmin)
        {
            // End:0x57C
            if(!PRI.bOutOfLives)
            {
                C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.RedColor, 0.70);
                C.DrawColor.G = 130;
                // End:0x565
                if(OwnerPRI.bOnlySpectator)
                {
                    // End:0x54D
                    if(Freon_PRI(PRI) != none)
                    {
                        Name = Freon_PRI(PRI).GetLocationNameTeam();
                    }
                    // End:0x562
                    else
                    {
                        Name = PRI.GetLocationName();
                    }
                }
                // End:0x579
                else
                {
                    Name = PRI.StringUnknown;
                }
            }
            // End:0x614
            else
            {
                C.DrawColor.R = 170;
                C.DrawColor.G = 20;
                C.DrawColor.B = 20;
                // End:0x5FF
                if(OwnerPRI.bOnlySpectator && Freon_PRI(PRI) != none)
                {
                    Name = Freon_PRI(PRI).GetLocationNameTeam();
                }
                // End:0x614
                else
                {
                    Name = PRI.GetLocationName();
                }
            }
            SetCustomLocationColor(C.DrawColor, PRI, PRI == OwnerPRI);
        }
        // End:0x68B
        else
        {
            C.DrawColor.R = 170;
            C.DrawColor.G = 20;
            C.DrawColor.B = 20;
            Name = "Admin";
        }
    }
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    // End:0x6DF
    if(XL > float(NameW))
    {
        Name = Left(Name, int((float(NameW) / XL) * float(Len(Name))));
    }
    C.SetPos(float(BarX + StatX), float(BarY + StatY));
    C.UnresolvedNativeFunction_97(Name);
    Score = PRI.Score % float(10000);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.WhiteColor, 0.70);
    Name = string(int(Score));
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + ScoreX) - (XL * 0.50), float(BarY + ScoreY));
    C.UnresolvedNativeFunction_97(Name);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.WhiteColor, 0.550);
    // End:0x8A0
    if(Misc_PRI(PRI).PlayedRounds > 0)
    {
        XL = Score / float(Misc_PRI(PRI).PlayedRounds);
    }
    // End:0x8AB
    else
    {
        XL = Score;
    }
    // End:0x92D
    if(int((XL - float(int(XL))) * float(10)) < 0)
    {
        // End:0x8ED
        if(int(XL) == 0)
        {
            Name = "-" $ string(int(XL));
        }
        // End:0x8FC
        else
        {
            Name = string(int(XL));
        }
        Name = (Name $ ".") $ string(-int((XL - float(int(XL))) * float(10)));
    }
    // End:0x968
    else
    {
        Name = string(int(XL));
        Name = (Name $ ".") $ string(int((XL - float(int(XL))) * float(10)));
    }
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + PointsPerX) - (XL * 0.50), float(BarY + PointsPerY));
    C.UnresolvedNativeFunction_97(Name);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.WhiteColor, 0.70);
    Name = string(int(PRI.Score / float(10000)));
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + WinsX) - (XL * 0.50), float(BarY + WinsY));
    C.UnresolvedNativeFunction_97(Name);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
    C.DrawColor.R = 170;
    C.DrawColor.G = 20;
    C.DrawColor.B = 20;
    Name = string(int(PRI.Deaths));
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + DeathsX) - (XL * 0.50), float(BarY + DeathsY));
    C.UnresolvedNativeFunction_97(Name);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.CyanColor, 0.50);
    C.DrawColor.B = 150;
    C.DrawColor.R = 20;
    Name = string(Min(999, PRI.Ping * 4));
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + PingX) - (XL * 0.50), float(BarY + PingY));
    C.UnresolvedNativeFunction_97(Name);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -4);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.CyanColor, 0.50);
    C.DrawColor.B = 150;
    C.DrawColor.R = 20;
    Name = string(PRI.PacketLoss);
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + PLX) - (XL * 0.50), float(BarY + PLY));
    C.UnresolvedNativeFunction_97(Name);
    //return;    
}

simulated function DrawPlayerTotalsBar(Canvas C, int BarX, int BarY, int BarW, int BarH, string TeamName, Color BackgroundCol, int Score, int Kills, int Ping, float PPR)
{
    local int NameX, NameY, ScoreX, ScoreY, WinsX, WinsY,
	    PingX, PingY;

    local string Name;
    local float XL, YL;

    NameX = int(float(BarW) * 0.0310);
    NameY = int(C.ClipY * 0.00750);
    ScoreX = int(float(BarW) * 0.660);
    ScoreY = int(C.ClipY * 0.00750);
    WinsX = int(float(BarW) * 0.80);
    WinsY = int(C.ClipY * 0.00750);
    PingX = int(float(BarW) * 0.920);
    PingY = int(C.ClipY * 0.00750);
    C.DrawColor = BackgroundCol;
    C.DrawColor.A = 200;
    C.SetPos(float(BarX), float(BarY));
    C.UnresolvedNativeFunction_97(BaseTex, float(BarW), float(BarH), 18.0, 107.0, 745.0, 81.0);
    C.Font = PlayerController(Owner).myHUD.GetFontSizeIndex(C, -2);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.WhiteColor, 0.70);
    C.SetPos(float(BarX + NameX), float(BarY + NameY));
    C.UnresolvedNativeFunction_97(TeamName);
    Name = string(int(float(Score) % float(10000)));
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + ScoreX) - (XL * 0.50), float(BarY + ScoreY));
    C.UnresolvedNativeFunction_97(Name);
    Name = string(Score / 10000);
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + WinsX) - (XL * 0.50), float(BarY + WinsY));
    C.UnresolvedNativeFunction_97(Name);
    C.DrawColor = UnresolvedNativeFunction_98(HudClass.default.CyanColor, 0.50);
    C.DrawColor.B = 150;
    C.DrawColor.R = 20;
    Name = string(Min(999, Ping * 4));
    C.UnresolvedNativeFunction_97(Name, XL, YL);
    C.SetPos(float(BarX + PingX) - (XL * 0.50), float(BarY + PingY));
    C.UnresolvedNativeFunction_97(Name);
    //return;    
}

simulated event UpdateScoreBoard(Canvas C)
{
    local PlayerReplicationInfo PRI, OwnerPRI;
    local int i;
    local array<PlayerReplicationInfo> Players, Specs;
    local int HeaderX, HeaderY, HeaderW, HeaderH, ScoreBoardX, ScoreBoardY,
	    ScoreBoardW, SpecBoxX, SpecBoxY, SpecBoxW;

    local Color BackgroundCol;

    Players.Length = 0;
    Specs.Length = 0;
    BackgroundCol.R = 120;
    BackgroundCol.G = 120;
    BackgroundCol.B = 120;
    BackgroundCol.A = byte(float(BaseAlpha) * 0.50);
    OwnerPRI = PlayerController(Owner).PlayerReplicationInfo;
    i = 0;
    J0x72:
    // End:0x17D [Loop If]
    if(i < GRI.PRIArray.Length)
    {
        PRI = GRI.PRIArray[i];
        // End:0xDC
        if(PRI.bOnlySpectator)
        {
            Specs.Insert(Specs.Length, 1);
            Specs[Specs.Length - 1] = PRI;
            // [Explicit Continue]
            goto J0x173;
        }
        // End:0x11A
        if((Level.TimeSeconds - float(LastUpdateTime)) > float(4))
        {
            Misc_Player(Owner).ServerUpdateStats(TeamPlayerReplicationInfo(PRI));
        }
        // End:0x14F
        if(Players.Length < MaxTeamSize)
        {
            Players.Insert(Players.Length, 1);
            Players[Players.Length - 1] = PRI;
            // [Explicit Continue]
            goto J0x173;
        }
        // End:0x173
        if(PRI == OwnerPRI)
        {
            Players[Players.Length - 1] = PRI;
        }
        J0x173:
        ++ i;
        // [Loop Continue]
        goto J0x72;
    }
    MaxTeamPlayers = Max(MaxTeamPlayers, Players.Length);
    HeaderX = 0;
    HeaderY = 0;
    HeaderW = int(C.ClipX);
    HeaderH = int(C.ClipY * 0.080);
    ScoreBoardX = int(C.ClipX * 0.30);
    ScoreBoardY = int(C.ClipY * 0.230);
    ScoreBoardW = int(C.ClipX * 0.40);
    SpecBoxX = int(C.ClipX * 0.80);
    SpecBoxY = int(C.ClipY * 0.9150);
    SpecBoxW = int(C.ClipX * 0.160);
    C.Style = 5;
    DrawHeader(C, HeaderX, HeaderY, HeaderW, HeaderH);
    DrawTeamBoard(C, ScoreBoardX, ScoreBoardY, ScoreBoardW, "Total", BackgroundCol, Players, MaxTeamPlayers);
    // End:0x30A
    if(Specs.Length > 0)
    {
        DrawSpecList(C, SpecBoxX, SpecBoxY, SpecBoxW, Specs);
    }
    // End:0x340
    if((Level.TimeSeconds - float(LastUpdateTime)) > float(4))
    {
        LastUpdateTime = int(Level.TimeSeconds);
    }
    bDisplayMessages = true;
    //return;    
}
