/*******************************************************************************
 * Misc_ComboBerserk generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Misc_ComboBerserk extends ComboBerserk
    hidecategories(Movement,Collision,Lighting,LightColor,Karma,Force);

function StartEffect(xPawn P)
{
    super.StartEffect(P);
    SetTimer(0.90, true);
    Timer();
    //return;    
}

function Timer()
{
    local Weapon heldWeapon;
    local int Ammo;
    local float Add;

    // End:0x23D
    if(Pawn(Owner).Role == ROLE_Authority)
    {
        heldWeapon = Pawn(Owner).Weapon;
        // End:0x44
        if(heldWeapon == none)
        {
            return;
        }
        Ammo = heldWeapon.AmmoAmount(0);
        // End:0xEE
        if(heldWeapon.GetAmmoClass(0) != none)
        {
            // End:0xC1
            if(heldWeapon.static.GetAmmoClass(0).default.InitialAmount > 0)
            {
                Add = float(Max(int(float(heldWeapon.static.GetAmmoClass(0).default.InitialAmount) * 0.10), 1));
            }
            // End:0xEE
            else
            {
                Add = float(Max(int((float(heldWeapon.MaxAmmo(0)) / 2.50) * 0.10), 1));
            }
        }
        heldWeapon.AmmoCharge[0] = Min(heldWeapon.MaxAmmo(0), int(float(heldWeapon.AmmoCharge[0]) + Add));
        // End:0x16B
        if((heldWeapon.GetAmmoClass(1) == none) || heldWeapon.GetAmmoClass(0) == heldWeapon.GetAmmoClass(1))
        {
            return;
        }
        Ammo = heldWeapon.AmmoAmount(1);
        // End:0x1D2
        if(heldWeapon.static.GetAmmoClass(1).default.InitialAmount > 0)
        {
            Add = float(Max(int(float(heldWeapon.static.GetAmmoClass(1).default.InitialAmount) * 0.10), 1));
        }
        // End:0x1FF
        else
        {
            Add = float(Max(int((float(heldWeapon.MaxAmmo(1)) / 2.50) * 0.10), 1));
        }
        heldWeapon.AmmoCharge[1] = Min(heldWeapon.MaxAmmo(1), int(float(heldWeapon.AmmoCharge[1]) + Add));
    }
    //return;    
}
