/*******************************************************************************
 * Menu_TabMisc generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Menu_TabMisc extends UT2K3TabPanel
    editinlinenew
    instanced;

function InitComponent(GUIController MyController, GUIComponent MyOwner)
{
    local Misc_Player MP;
    local TAM_GRI GRI;

    super(GUIPanel).InitComponent(MyController, MyOwner);
    MP = Misc_Player(UnresolvedNativeFunction_99());
    // End:0x2B
    if(MP == none)
    {
        return;
    }
    GRI = TAM_GRI(UnresolvedNativeFunction_99().Level.GRI);
    moCheckBox(Controls[1]).Checked(class'Misc_Player'.default.bDisableSpeed);
    moCheckBox(Controls[2]).Checked(class'Misc_Player'.default.bDisableBooster);
    moCheckBox(Controls[3]).Checked(class'Misc_Player'.default.bDisableBerserk);
    moCheckBox(Controls[4]).Checked(class'Misc_Player'.default.bDisableInvis);
    moCheckBox(Controls[5]).Checked(class'Misc_Player'.default.bMatchHUDToSkins);
    moCheckBox(Controls[6]).Checked(!class'Misc_Player'.default.bShowTeamInfo);
    moCheckBox(Controls[7]).Checked(!class'Misc_Player'.default.bShowCombos);
    moCheckBox(Controls[14]).Checked(class'Misc_Player'.default.bExtendedInfo);
    moCheckBox(Controls[16]).Checked(!class'Misc_Pawn'.default.bPlayOwnFootsteps);
    moCheckBox(Controls[17]).Checked(class'Misc_Player'.default.bAutoScreenShot);
    moCheckBox(Controls[8]).Checked(!class'Misc_Player'.default.bUseHitSounds);
    GUISlider(Controls[9]).Value = class'Misc_Player'.default.SoundHitVolume;
    GUISlider(Controls[18]).Value = class'Misc_Player'.default.SoundAloneVolume;
    moCheckBox(Controls[21]).Checked(class'Misc_Player'.default.bEnableEnhancedNetCode);
    moCheckBox(Controls[22]).Checked(class'Misc_Player'.default.bDisableEndCeremonySound);
    moCheckBox(Controls[25]).Checked(class'Misc_Player'.default.AutoSyncSettings);
    // End:0x332
    if(GRI != none)
    {
        // End:0x303
        if((GRI.TimeOuts == 0) && !UnresolvedNativeFunction_99().PlayerReplicationInfo.bAdmin)
        {
            GUIButton(Controls[20]).DisableMe();
        }
        // End:0x32F
        if(GRI.EnableNewNet == false)
        {
            moCheckBox(Controls[21]).DisableMe();
        }
    }
    // End:0x349
    else
    {
        GUIButton(Controls[20]).DisableMe();
    }
    //return;    
}

function OnChange(GUIComponent C)
{
    local bool B;

    // End:0x377
    if(moCheckBox(C) != none)
    {
        B = moCheckBox(C).IsChecked();
        // End:0x55
        if(C == Controls[1])
        {
            class'Misc_Player'.default.bDisableSpeed = B;
        }
        // End:0x374
        else
        {
            // End:0x80
            if(C == Controls[2])
            {
                class'Misc_Player'.default.bDisableBooster = B;
            }
            // End:0x374
            else
            {
                // End:0xAB
                if(C == Controls[3])
                {
                    class'Misc_Player'.default.bDisableBerserk = B;
                }
                // End:0x374
                else
                {
                    // End:0xD6
                    if(C == Controls[4])
                    {
                        class'Misc_Player'.default.bDisableInvis = B;
                    }
                    // End:0x374
                    else
                    {
                        // End:0x101
                        if(C == Controls[5])
                        {
                            class'Misc_Player'.default.bMatchHUDToSkins = B;
                        }
                        // End:0x374
                        else
                        {
                            // End:0x12E
                            if(C == Controls[6])
                            {
                                class'Misc_Player'.default.bShowTeamInfo = !B;
                            }
                            // End:0x374
                            else
                            {
                                // End:0x15B
                                if(C == Controls[7])
                                {
                                    class'Misc_Player'.default.bShowCombos = !B;
                                }
                                // End:0x374
                                else
                                {
                                    // End:0x186
                                    if(C == Controls[14])
                                    {
                                        class'Misc_Player'.default.bExtendedInfo = B;
                                    }
                                    // End:0x374
                                    else
                                    {
                                        // End:0x247
                                        if(C == Controls[16])
                                        {
                                            class'UnrealPawn'.default.bPlayOwnFootsteps = !B;
                                            class'xPawn'.default.bPlayOwnFootsteps = !B;
                                            class'Misc_Pawn'.default.bPlayOwnFootsteps = !B;
                                            class'Misc_Pawn'.static.StaticSaveConfig();
                                            // End:0x242
                                            if(xPawn(UnresolvedNativeFunction_99().Pawn) != none)
                                            {
                                                xPawn(UnresolvedNativeFunction_99().Pawn).bPlayOwnFootsteps = !B;
                                                xPawn(UnresolvedNativeFunction_99().Pawn).SaveConfig();
                                            }
                                            return;
                                        }
                                        // End:0x374
                                        else
                                        {
                                            // End:0x272
                                            if(C == Controls[17])
                                            {
                                                class'Misc_Player'.default.bAutoScreenShot = B;
                                            }
                                            // End:0x374
                                            else
                                            {
                                                // End:0x2D9
                                                if(C == Controls[8])
                                                {
                                                    class'Misc_Player'.default.bUseHitSounds = !B;
                                                    // End:0x2BF
                                                    if(B)
                                                    {
                                                        GUISlider(Controls[9]).DisableMe();
                                                    }
                                                    // End:0x2D6
                                                    else
                                                    {
                                                        GUISlider(Controls[9]).EnableMe();
                                                    }
                                                }
                                                // End:0x374
                                                else
                                                {
                                                    // End:0x321
                                                    if(C == Controls[21])
                                                    {
                                                        class'Misc_Player'.default.bEnableEnhancedNetCode = B;
                                                        // End:0x31E
                                                        if(!B)
                                                        {
                                                            Misc_Player(UnresolvedNativeFunction_99()).SetNetCodeDisabled();
                                                        }
                                                    }
                                                    // End:0x374
                                                    else
                                                    {
                                                        // End:0x34C
                                                        if(C == Controls[22])
                                                        {
                                                            class'Misc_Player'.default.bDisableEndCeremonySound = B;
                                                        }
                                                        // End:0x374
                                                        else
                                                        {
                                                            // End:0x374
                                                            if(C == Controls[25])
                                                            {
                                                                class'Misc_Player'.default.AutoSyncSettings = B;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    // End:0x3F1
    else
    {
        // End:0x3F1
        if(GUISlider(C) != none)
        {
            switch(C)
            {
                // End:0x3BE
                case Controls[9]:
                    class'Misc_Player'.default.SoundHitVolume = GUISlider(C).Value;
                    // End:0x3F1
                    break;
                // End:0x3EE
                case Controls[18]:
                    class'Misc_Player'.default.SoundAloneVolume = GUISlider(C).Value;
                    // End:0x3F1
                    break;
                // End:0xFFFF
                default:
                }
            }
            Misc_Player(UnresolvedNativeFunction_99()).SetupCombos();
            Misc_Player(UnresolvedNativeFunction_99()).ReloadDefaults();
            class'Misc_Player'.static.StaticSaveConfig();
            class'Menu_Menu3SPN'.default.SettingsDirty = true;
            //return;            
}

function bool OnClick(GUIComponent C)
{
    // End:0x36
    if(C == Controls[20])
    {
        Misc_Player(UnresolvedNativeFunction_99()).CallTimeout();
        Controller.CloseMenu();
    }
    // End:0x9F
    else
    {
        // End:0x6C
        if(C == Controls[23])
        {
            Misc_Player(UnresolvedNativeFunction_99()).LoadSettings();
            Controller.CloseMenu();
        }
        // End:0x9F
        else
        {
            // End:0x9F
            if(C == Controls[24])
            {
                Misc_Player(UnresolvedNativeFunction_99()).SaveSettings();
                Controller.CloseMenu();
            }
        }
    }
    return true;
    //return;    
}

defaultproperties
{
    begin object name=TabBackground class=GUIImage
        Image=Texture'InterfaceContent.Menu.ScoreBoxA'
        ImageColor=(R=0,G=0,B=0,A=255)
        ImageStyle=1
        WinHeight=1.0
        bNeverFocus=true
    object end
    // Reference: GUIImage'Menu_TabMisc.TabBackground'
    Controls(0)=TabBackground
    begin object name=SpeedCheck class=moCheckBox
        Caption="Disable Speed."
        OnCreateComponent=InternalOnCreateComponent
        Hint="Disables the Speed adrenaline combo if checked."
        WinTop=0.190
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.SpeedCheck'
    Controls(1)=SpeedCheck
    begin object name=BoosterCheck class=moCheckBox
        Caption="Disable Booster."
        OnCreateComponent=InternalOnCreateComponent
        Hint="Disables the Booster adrenaline combo if checked."
        WinTop=0.2350
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.BoosterCheck'
    Controls(2)=BoosterCheck
    begin object name=BerserkCheck class=moCheckBox
        Caption="Disable Berserk."
        OnCreateComponent=InternalOnCreateComponent
        Hint="Disables the Berserk adrenaline combo if checked."
        WinTop=0.280
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.BerserkCheck'
    Controls(3)=BerserkCheck
    begin object name=InvisCheck class=moCheckBox
        Caption="Disable Invisibility."
        OnCreateComponent=InternalOnCreateComponent
        Hint="Disables the Invisibility adrenaline combo if checked."
        WinTop=0.3250
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.InvisCheck'
    Controls(4)=InvisCheck
    begin object name=MatchCheck class=moCheckBox
        Caption="Match HUD color to brightskins."
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.550
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.MatchCheck'
    Controls(5)=MatchCheck
    begin object name=TeamCheck class=moCheckBox
        Caption="Disable Team Info."
        OnCreateComponent=InternalOnCreateComponent
        Hint="Disables showing team members and enemies on the HUD."
        WinTop=0.4150
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.TeamCheck'
    Controls(6)=TeamCheck
    begin object name=ComboCheck class=moCheckBox
        Caption="Disable Combo List."
        OnCreateComponent=InternalOnCreateComponent
        Hint="Disables showing combo info on the lower right portion of the HUD."
        WinTop=0.5050
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.ComboCheck'
    Controls(7)=ComboCheck
    begin object name=HitsoundsCheck class=moCheckBox
        Caption="Disable Hitsounds."
        OnCreateComponent=InternalOnCreateComponent
        Hint="Disables damage-dependant hitsounds (the lower the pitch, the greater the damage)."
        WinTop=0.690
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.HitsoundsCheck'
    Controls(8)=HitsoundsCheck
    begin object name=HitVolumeSlider class=GUISlider
        MaxValue=2.0
        WinTop=0.74750
        WinLeft=0.50
        WinWidth=0.40
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabMisc.HitVolumeSlider'
    Controls(9)=HitVolumeSlider
    begin object name=HitVolumeLabel class=GUILabel
        Caption="Hitsound Volume:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.730
        WinLeft=0.10
    object end
    // Reference: GUILabel'Menu_TabMisc.HitVolumeLabel'
    Controls(10)=HitVolumeLabel
    begin object name=HitSoundsLabel class=GUILabel
        Caption="Sounds:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.60
        WinLeft=0.050
    object end
    // Reference: GUILabel'Menu_TabMisc.HitSoundsLabel'
    Controls(11)=HitSoundsLabel
    begin object name=ComboLabel class=GUILabel
        Caption="Combos:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.1450
        WinLeft=0.050
    object end
    // Reference: GUILabel'Menu_TabMisc.ComboLabel'
    Controls(12)=ComboLabel
    begin object name=HUDLabel class=GUILabel
        Caption="HUD:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.370
        WinLeft=0.050
    object end
    // Reference: GUILabel'Menu_TabMisc.HUDLabel'
    Controls(13)=HUDLabel
    begin object name=ExtendCheck class=moCheckBox
        Caption="Extended Teammate info."
        OnCreateComponent=InternalOnCreateComponent
        Hint="Displays extra teammate info; health and location name."
        WinTop=0.460
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.ExtendCheck'
    Controls(14)=ExtendCheck
    begin object name=DummyObject class=GUILabel
        TextColor=(R=255,G=255,B=255,A=0)
        bVisible=false
    object end
    // Reference: GUILabel'Menu_TabMisc.DummyObject'
    Controls(15)=DummyObject
    begin object name=StepsCheck class=moCheckBox
        Caption="Disable own footsteps."
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.0550
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.StepsCheck'
    Controls(16)=StepsCheck
    begin object name=ShotCheck class=moCheckBox
        Caption="Take end-game screenshot."
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.10
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.ShotCheck'
    Controls(17)=ShotCheck
    begin object name=AloneVolumeSlider class=GUISlider
        MaxValue=2.0
        WinTop=0.79250
        WinLeft=0.50
        WinWidth=0.40
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabMisc.AloneVolumeSlider'
    Controls(18)=AloneVolumeSlider
    begin object name=AloneVolumeLabel class=GUILabel
        Caption="Alone Volume:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.7750
        WinLeft=0.10
    object end
    // Reference: GUILabel'Menu_TabMisc.AloneVolumeLabel'
    Controls(19)=AloneVolumeLabel
    begin object name=TimeoutButton class=GUIButton
        Caption="Attempt Timeout"
        StyleName="SquareMenuButton"
        WinTop=0.910
        WinLeft=0.550
        WinWidth=0.40
        WinHeight=0.080
        OnClick=OnClick
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIButton'Menu_TabMisc.TimeoutButton'
    Controls(20)=TimeoutButton
    begin object name=NewNetCheck class=moCheckBox
        Caption="Enable Enhanced NetCode."
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.010
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.NewNetCheck'
    Controls(21)=NewNetCheck
    begin object name=CeremonySoundsCheck class=moCheckBox
        Caption="Disable End Ceremony Sounds."
        OnCreateComponent=InternalOnCreateComponent
        Hint="Disables end ceremony sounds."
        WinTop=0.6450
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.CeremonySoundsCheck'
    Controls(22)=CeremonySoundsCheck
    begin object name=LoadSettingsButton class=GUIButton
        Caption="Load Settings"
        StyleName="SquareMenuButton"
        WinTop=0.910
        WinLeft=0.050
        WinWidth=0.250
        WinHeight=0.080
        OnClick=OnClick
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIButton'Menu_TabMisc.LoadSettingsButton'
    Controls(23)=LoadSettingsButton
    begin object name=SaveSettingsButton class=GUIButton
        Caption="Save Settings"
        StyleName="SquareMenuButton"
        WinTop=0.910
        WinLeft=0.30
        WinWidth=0.250
        WinHeight=0.080
        OnClick=OnClick
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIButton'Menu_TabMisc.SaveSettingsButton'
    Controls(24)=SaveSettingsButton
    begin object name=SyncSettingsCheck class=moCheckBox
        Caption="Sync Settings With The Server Automatically."
        OnCreateComponent=InternalOnCreateComponent
        Hint="Sync Settings With The Server Automatically."
        WinTop=0.840
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabMisc.SyncSettingsCheck'
    Controls(25)=SyncSettingsCheck
}