/*******************************************************************************
 * Misc_PRI generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Misc_PRI extends xPlayerReplicationInfo
    dependson(Misc_StatBoard)
    hidecategories(Movement,Collision,Lighting,LightColor,Karma,Force);

struct HitStat
{
    var int Fired;
    var int Hit;
    var int Damage;
};

struct HitStats
{
    var HitStat primary;
    var HitStat Secondary;
};

var string ColoredName;
var bool bWarned;
var int CampCount;
var int ConsecutiveCampCount;
var int EnemyDamage;
var int AllyDamage;
var float ReverseFF;
var int FlawlessCount;
var int OverkillCount;
var int DarkHorseCount;
var int RoxCount;
var int PlayedRounds;
var float Rank;
var float AvgPPR;
var localized string StringDeadNoRez;
var HitStats Assault;
var HitStat Bio;
var HitStats Shock;
var HitStat Combo;
var HitStats Link;
var HitStats Mini;
var HitStats Flak;
var HitStat Rockets;
var HitStat Sniper;
var int SGDamage;
var int HeadShots;
var float AveragePercent;
var class<Misc_PawnReplicationInfo> PawnInfoClass;
var Misc_PawnReplicationInfo PawnReplicationInfo;

replication
{
    // Pos:0x000
    reliable if(bNetDirty && Role == ROLE_Authority)
        AvgPPR, ColoredName, 
        PawnReplicationInfo, PlayedRounds, 
        Rank

    // Pos:0x018
    reliable if(Role < ROLE_Authority)
        SetColoredName
}

event PostBeginPlay()
{
    super(TeamPlayerReplicationInfo).PostBeginPlay();
    // End:0x56
    if(!bDeleteMe && Level.NetMode != NM_Client)
    {
        PawnReplicationInfo = Spawn(PawnInfoClass, self,, vect(0.0, 0.0, 0.0), rot(0, 0, 0));
    }
    //return;    
}

simulated function string GetColoredName()
{
    // End:0x12
    if(ColoredName == "")
    {
        return PlayerName;
    }
    return ColoredName;
    //return;    
}

function SetColoredName(string S)
{
    ColoredName = S;
    //return;    
}

simulated function string GetLocationName()
{
    // End:0x1C
    if(bOutOfLives && !bOnlySpectator)
    {
        return default.StringDead;
    }
    return super(PlayerReplicationInfo).GetLocationName();
    //return;    
}

static function string GetFormattedPPR(float Val)
{
    local string ret;

    // End:0x82
    if(int((Val - float(int(Val))) * float(10)) < 0)
    {
        // End:0x42
        if(int(Val) == 0)
        {
            ret = "-" $ string(int(Val));
        }
        // End:0x51
        else
        {
            ret = string(int(Val));
        }
        ret = (ret $ ".") $ string(-int((Val - float(int(Val))) * float(10)));
    }
    // End:0xBD
    else
    {
        ret = string(int(Val));
        ret = (ret $ ".") $ string(int((Val - float(int(Val))) * float(10)));
    }
    return ret;
    //return;    
}

function Reset()
{
    HasFlag = none;
    bReadyToPlay = false;
    NumLives = 0;
    bOutOfLives = false;
    //return;    
}

function ProcessHitStats()
{
    local int Count;

    AveragePercent = 0.0;
    // End:0x60
    if(Assault.primary.Fired > 9)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Assault.primary.Fired), float(Assault.primary.Hit));
        ++ Count;
    }
    // End:0xB5
    if(Assault.Secondary.Fired > 2)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Assault.Secondary.Fired), float(Assault.Secondary.Hit));
        ++ Count;
    }
    // End:0xFA
    if(Bio.Fired > 0)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Bio.Fired), float(Bio.Hit));
        ++ Count;
    }
    // End:0x14F
    if(Shock.primary.Fired > 4)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Shock.primary.Fired), float(Shock.primary.Hit));
        ++ Count;
    }
    // End:0x1A4
    if(Shock.Secondary.Fired > 4)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Shock.Secondary.Fired), float(Shock.Secondary.Hit));
        ++ Count;
    }
    // End:0x1EA
    if(Combo.Fired > 2)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Combo.Fired), float(Combo.Hit));
        ++ Count;
    }
    // End:0x23F
    if(Link.primary.Fired > 9)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Link.primary.Fired), float(Link.primary.Hit));
        ++ Count;
    }
    // End:0x294
    if(Link.Secondary.Fired > 14)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Link.Secondary.Fired), float(Link.Secondary.Hit));
        ++ Count;
    }
    // End:0x2E9
    if(Mini.primary.Fired > 19)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Mini.primary.Fired), float(Mini.primary.Hit));
        ++ Count;
    }
    // End:0x33E
    if(Mini.Secondary.Fired > 14)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Mini.Secondary.Fired), float(Mini.Secondary.Hit));
        ++ Count;
    }
    // End:0x39B
    if(Flak.primary.Fired > 19)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Flak.primary.Fired / 9), float(Flak.primary.Hit / 9));
        ++ Count;
    }
    // End:0x3F0
    if(Flak.Secondary.Fired > 2)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Flak.Secondary.Fired), float(Flak.Secondary.Hit));
        ++ Count;
    }
    // End:0x436
    if(Rockets.Fired > 2)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Rockets.Fired), float(Rockets.Hit));
        ++ Count;
    }
    // End:0x47C
    if(Sniper.Fired > 2)
    {
        AveragePercent += class'Misc_StatBoard'.static.GetPercentage(float(Sniper.Fired), float(Sniper.Hit));
        ++ Count;
    }
    // End:0x495
    if(Count > 0)
    {
        AveragePercent /= float(Count);
    }
    //return;    
}

defaultproperties
{
    StringDeadNoRez="Dead [Inactive]"
    PawnInfoClass=class'Misc_PawnReplicationInfo'
}