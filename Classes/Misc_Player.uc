/*******************************************************************************
 * Misc_Player generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Misc_Player extends xPlayer
    dependson(Message_PlayerSettingsResult)
    dependson(Misc_DeathMessage)
    dependson(TAM_Scoreboard)
    dependson(Misc_Pawn)
    dependson(Team_GameBase)
    dependson(Misc_PlayerSettings)
    dependson(Menu_Menu3SPN)
    dependson(Misc_Util)
    dependson(Misc_PRI)
    dependson(NecroCombo)
    dependson(Misc_BaseGRI)
    dependson(Misc_PlayerDataManager_ServerLink)
    dependson(TAM_GRI)
    dependson(TAM_TeamInfo)
    dependson(TAM_TeamInfoRed)
    dependson(TAM_TeamInfoBlue)
    dependson(ArenaMaster)
    dependson(TournamentModuleBase)
    dependson(TeamArenaMaster)
    dependson(Message_WinningTeam)
    dependson(Message_PlayerRanking)
    dependson(Team_HUDBase)
    dependson(Misc_PlayerData)
    dependson(Freon_PRI)
    dependson(NewNet_AssaultRifle)
    dependson(NewNet_BioRifle)
    dependson(NewNet_ShockRifle)
    dependson(NewNet_MiniGun)
    dependson(NewNet_LinkGun)
    dependson(NewNet_RocketLauncher)
    dependson(NewNet_FlakCannon)
    dependson(NewNet_SniperRifle)
    dependson(NewNet_ClassicSniperRifle)
    config(User);

struct ColoredNamePair
{
    var Color SavedColor[20];
    var string SavedName;
};

var config bool bShowCombos;
var config bool bDisableSpeed;
var config bool bDisableInvis;
var config bool bDisableBooster;
var config bool bDisableBerserk;
var config bool bDisableRadar;
var config bool bDisableAmmoRegen;
var config bool bShowTeamInfo;
var config bool bExtendedInfo;
var config bool bMatchHUDToSkins;
var config bool bUseBrightSkins;
var config bool bUseTeamColors;
var config Color RedOrEnemy;
var config Color BlueOrAlly;
var config Color Yellow;
var config bool bForceRedEnemyModel;
var config bool bForceBlueAllyModel;
var config bool bUseTeamModels;
var config string RedEnemyModel;
var config string BlueAllyModel;
var bool bAdminVisionInSpec;
var bool bDrawTargetingLineInSpec;
var bool bReportNewNetStats;
var int Spree;
var bool bFirstOpen;
var float NewFriendlyDamage;
var float NewEnemyDamage;
var int hitdamage;
var int LastDamage;
var config bool bDisableAnnouncement;
var config bool bAutoScreenShot;
var bool bShotTaken;
var bool bSeeInvis;
var Pawn OldPawn;
var config bool bAnnounceOverkill;
var config bool bUseHitSounds;
var config Sound SoundHit;
var config Sound SoundHitFriendly;
var config float SoundHitVolume;
var Sound ServerSoundAlone;
var config Sound SoundAlone;
var config float SoundAloneVolume;
var config Sound SoundTMDeath;
var config Sound SoundUnlock;
var Sound ServerSoundSpawnProtection;
var config Sound SoundSpawnProtection;
var config bool bEnableEnhancedNetCode;
var config int ShowInitialMenu;
var config Engine.Interactions.EInputKey Menu3SPNKey;
var config bool bDisableEndCeremonySound;
var bool EndCeremonyStarted;
var float EndCeremonyTimer;
var int EndCeremonyPlayerIdx;
var array<name> EndCeremonyAnimNames;
var array<string> EndCeremonyWeaponNames;
var array< Class > EndCeremonyWeaponClasses;
var bool WinnerAnnounced;
var int EndCeremonyWinningTeamIndex;
var int EndCeremonyPlayerCount;
var SEndCeremonyInfo EndCeremonyInfo[10];
var Pawn EndCeremonyPawns[10];
var float LoginTime;
var Misc_PlayerData PlayerData;
var bool ActiveThisRound;
var float NextRezTime;
var float LastRezTime;
var bool PlayerInitialized;
var Color RedMessageColor;
var Color GreenMessageColor;
var Color BlueMessageColor;
var Color YellowMessageColor;
var Color WhiteMessageColor;
var Color WhiteColor;
var config bool bAllowColoredMessages;
var config bool bEnableColoredNamesInTalk;
var config bool bEnableColoredNamesOnEnemies;
var config int CurrentSelectedColoredName;
var config Color colorname[20];
var config array<ColoredNamePair> ColoredName;
var config bool AutoSyncSettings;
var float LastSettingsLoadTimeSeconds;
var float LastSettingsSaveTimeSeconds;
var delegate<OnPlayerDataReceivedCallback> __OnPlayerDataReceivedCallback__Delegate;
var delegate<OnPlayerDataRemovedCallback> __OnPlayerDataRemovedCallback__Delegate;

replication
{
    // Pos:0xFFFF
    unreliable if(/* An exception occurred while decompiling condition (System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at UELib.Core.UClass.FormatReplication()) */)
        ServerSay, ServerViewNextPlayer

    // Pos:0x000
    reliable if(Role == ROLE_Authority)
        ClientAddCeremonyRanking, ClientKillBases, 
        ClientListBest, ClientPlayAlone, 
        ClientPlaySpawnProtection, ClientReceiveStatsListIdx, 
        ClientReceiveStatsListName, ClientResetClock, 
        ClientSendAssaultStats, ClientSendBioStats, 
        ClientSendComboStats, ClientSendFlakStats, 
        ClientSendLinkStats, ClientSendMiniStats, 
        ClientSendMiscStats, ClientSendRocketStats, 
        ClientSendShockStats, ClientSendSniperStats, 
        ClientStartCeremony

    // Pos:0x00D
    reliable if(bNetDirty && Role == ROLE_Authority)
        bSeeInvis, hitdamage

    // Pos:0x025
    reliable if((Role == ROLE_Authority) && !bDemoRecording)
        PlayCustomRewardAnnouncement, PlayStatusAnnouncementReliable

    // Pos:0x03F
    reliable if(Role < ROLE_Authority)
        ServerCallTimeout, ServerLoadSettings, 
        ServerReportNewNetStats, ServerSaveSettings, 
        ServerSetMapString, SetNetCodeDisabled, 
        SetTeamScore

    // Pos:0x04C
    reliable if(Role == ROLE_Authority)
        ClientLoadSettings, ClientSettingsResult

    // Pos:0xFFFF
    reliable if())
        BecomeActivePlayer, BecomeSpectator, 
        BehindView, ClientReceiveCombo, 
        ClientSetWeapon, ServerChangeTeam, 
        ServerDoCombo, ServerSpectate, 
        ServerThrowWeapon, ServerUpdateStatArrays, 
        Suicide, TeamMessage
}

delegate OnPlayerDataReceivedCallback(string PlayerName, string OwnerID, int LastActiveTime, int Score, int Kills, int Thaws, int Deaths)
{
    //return;    
}

delegate OnPlayerDataRemovedCallback(string PlayerName)
{
    //return;    
}

function SetNetCodeDisabled()
{
    local Inventory Inv;

    class'Misc_Player'.default.bEnableEnhancedNetCode = false;
    // End:0x1E
    if(Pawn == none)
    {
        return;
    }
    Inv = Pawn.Inventory;
    J0x32:
    // End:0x1C0 [Loop If]
    if(Inv != none)
    {
        // End:0x1A9
        if(Weapon(Inv) != none)
        {
            // End:0x74
            if(NewNet_AssaultRifle(Inv) != none)
            {
                NewNet_AssaultRifle(Inv).DisableNet();
            }
            // End:0x1A9
            else
            {
                // End:0x9B
                if(NewNet_BioRifle(Inv) != none)
                {
                    NewNet_BioRifle(Inv).DisableNet();
                }
                // End:0x1A9
                else
                {
                    // End:0xC2
                    if(NewNet_ShockRifle(Inv) != none)
                    {
                        NewNet_ShockRifle(Inv).DisableNet();
                    }
                    // End:0x1A9
                    else
                    {
                        // End:0xE9
                        if(NewNet_MiniGun(Inv) != none)
                        {
                            NewNet_MiniGun(Inv).DisableNet();
                        }
                        // End:0x1A9
                        else
                        {
                            // End:0x110
                            if(NewNet_LinkGun(Inv) != none)
                            {
                                NewNet_LinkGun(Inv).DisableNet();
                            }
                            // End:0x1A9
                            else
                            {
                                // End:0x137
                                if(NewNet_RocketLauncher(Inv) != none)
                                {
                                    NewNet_RocketLauncher(Inv).DisableNet();
                                }
                                // End:0x1A9
                                else
                                {
                                    // End:0x15E
                                    if(NewNet_FlakCannon(Inv) != none)
                                    {
                                        NewNet_FlakCannon(Inv).DisableNet();
                                    }
                                    // End:0x1A9
                                    else
                                    {
                                        // End:0x185
                                        if(NewNet_SniperRifle(Inv) != none)
                                        {
                                            NewNet_SniperRifle(Inv).DisableNet();
                                        }
                                        // End:0x1A9
                                        else
                                        {
                                            // End:0x1A9
                                            if(NewNet_ClassicSniperRifle(Inv) != none)
                                            {
                                                NewNet_ClassicSniperRifle(Inv).DisableNet();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        Inv = Inv.Inventory;
        // [Loop Continue]
        goto J0x32;
    }
    //return;    
}

static simulated function bool UseNewNet()
{
    return class'Misc_Player'.default.bEnableEnhancedNetCode;
    //return;    
}

function Misc_PlayerDataManager_ServerLink GetPlayerDataManager_ServerLink()
{
    // End:0x5A
    if((Team_GameBase(Level.Game) != none) && Team_GameBase(Level.Game).PlayerDataManager_ServerLink != none)
    {
        return Team_GameBase(Level.Game).PlayerDataManager_ServerLink;
    }
    return none;
    //return;    
}

function ResetPlayerData()
{
    local int CurrentRound;

    PlayerReplicationInfo.Score = 0.0;
    PlayerReplicationInfo.Kills = 0;
    PlayerReplicationInfo.Deaths = 0.0;
    Misc_PRI(PlayerReplicationInfo).Rank = 0.0;
    Misc_PRI(PlayerReplicationInfo).AvgPPR = 0.0;
    // End:0xA4
    if(Freon_PRI(PlayerReplicationInfo) != none)
    {
        Freon_PRI(PlayerReplicationInfo).Thaws = 0;
        Freon_PRI(PlayerReplicationInfo).Git = 0;
    }
    // End:0xE2
    if(Team_GameBase(Level.Game) != none)
    {
        CurrentRound = Team_GameBase(Level.Game).CurrentRound;
    }
    // End:0x11D
    else
    {
        // End:0x11D
        if(ArenaMaster(Level.Game) != none)
        {
            CurrentRound = ArenaMaster(Level.Game).CurrentRound;
        }
    }
    Misc_PRI(PlayerReplicationInfo).PlayedRounds = 0;
    //return;    
}

function LoadPlayerDataStats()
{
    Misc_PRI(PlayerReplicationInfo).Rank = PlayerData.Rank;
    Misc_PRI(PlayerReplicationInfo).AvgPPR = PlayerData.AvgPPR;
    //return;    
}

function LoadPlayerData()
{
    local int CurrentRound;

    LoadPlayerDataStats();
    PlayerReplicationInfo.Score = PlayerData.Current.Score;
    PlayerReplicationInfo.Kills = PlayerData.Current.Kills;
    PlayerReplicationInfo.Deaths = float(PlayerData.Current.Deaths);
    // End:0xCC
    if(Freon_PRI(PlayerReplicationInfo) != none)
    {
        Freon_PRI(PlayerReplicationInfo).Thaws = PlayerData.Current.Thaws;
        Freon_PRI(PlayerReplicationInfo).Git = PlayerData.Current.Git;
    }
    // End:0x10A
    if(Team_GameBase(Level.Game) != none)
    {
        CurrentRound = Team_GameBase(Level.Game).CurrentRound;
    }
    // End:0x145
    else
    {
        // End:0x145
        if(ArenaMaster(Level.Game) != none)
        {
            CurrentRound = ArenaMaster(Level.Game).CurrentRound;
        }
    }
    // End:0x17B
    if(ActiveThisRound)
    {
        Misc_PRI(PlayerReplicationInfo).PlayedRounds = PlayerData.Current.Rounds - 1;
    }
    // End:0x1A2
    else
    {
        Misc_PRI(PlayerReplicationInfo).PlayedRounds = PlayerData.Current.Rounds;
    }
    //return;    
}

function StorePlayerData()
{
    local int CurrentRound;

    // End:0x46
    if(PlayerData == none)
    {
        Log("No player data was being tracked for " $ PlayerReplicationInfo.PlayerName);
        return;
    }
    Log("Storing player data for " $ PlayerReplicationInfo.PlayerName);
    PlayerData.Current.Score = PlayerReplicationInfo.Score;
    PlayerData.Current.Kills = PlayerReplicationInfo.Kills;
    PlayerData.Current.Deaths = int(PlayerReplicationInfo.Deaths);
    // End:0x138
    if(Freon_PRI(PlayerReplicationInfo) != none)
    {
        PlayerData.Current.Thaws = Freon_PRI(PlayerReplicationInfo).Thaws;
        PlayerData.Current.Git = Freon_PRI(PlayerReplicationInfo).Git;
    }
    // End:0x176
    if(Team_GameBase(Level.Game) != none)
    {
        CurrentRound = Team_GameBase(Level.Game).CurrentRound;
    }
    // End:0x1B1
    else
    {
        // End:0x1B1
        if(ArenaMaster(Level.Game) != none)
        {
            CurrentRound = ArenaMaster(Level.Game).CurrentRound;
        }
    }
    // End:0x1E7
    if(ActiveThisRound)
    {
        PlayerData.Current.Rounds = Misc_PRI(PlayerReplicationInfo).PlayedRounds + 1;
    }
    // End:0x20E
    else
    {
        PlayerData.Current.Rounds = Misc_PRI(PlayerReplicationInfo).PlayedRounds;
    }
    //return;    
}

function SetTeamScore(int RedScore, int BlueScore)
{
    local TeamGame TeamGame;

    // End:0x3E
    if(((PlayerReplicationInfo == none) || !PlayerReplicationInfo.bAdmin) && Level.NetMode != NM_Standalone)
    {
        return;
    }
    TeamGame = TeamGame(Level.Game);
    // End:0x64
    if(TeamGame == none)
    {
        return;
    }
    // End:0x9B
    if(TeamGame.Teams[0] != none)
    {
        TeamGame.Teams[0].Score = float(RedScore);
    }
    // End:0xD2
    if(TeamGame.Teams[1] != none)
    {
        TeamGame.Teams[1].Score = float(BlueScore);
    }
    //return;    
}

function CheckInitialMenu()
{
    // End:0x84
    if((Level.NetMode != NM_DedicatedServer) && class'Misc_Player'.default.ShowInitialMenu == 0)
    {
        // End:0x5F
        if((PlayerReplicationInfo == none) || PlayerReplicationInfo.PlayerName == class'GameInfo'.default.DefaultPlayerName)
        {
            return;
        }
        class'Misc_Player'.default.ShowInitialMenu = 1;
        LoadSettings();
        class'Misc_Player'.static.StaticSaveConfig();
    }
    //return;    
}

event PlayerTick(float DeltaTime)
{
    super.PlayerTick(DeltaTime);
    CheckInitialMenu();
    // End:0x36
    if(Pawn != none)
    {
        // End:0x36
        if(ViewTarget != Pawn)
        {
            SetViewTarget(Pawn);
        }
    }
    // End:0x8F
    if(!PlayerInitialized && PlayerReplicationInfo != none)
    {
        class'Misc_Player'.default.bAdminVisionInSpec = false;
        class'Misc_Player'.default.bDrawTargetingLineInSpec = false;
        class'Misc_Player'.default.bReportNewNetStats = false;
        SetInitialColoredName();
        PlayerInitialized = true;
    }
    // End:0xA5
    if(EndCeremonyStarted)
    {
        UpdateEndCeremony(DeltaTime);
        return;
    }
    // End:0xDB
    if(((Pawn == none) || !bUseHitSounds) || hitdamage == LastDamage)
    {
        LastDamage = hitdamage;
        return;
    }
    // End:0x11C
    if(hitdamage < LastDamage)
    {
        Pawn.PlaySound(SoundHitFriendly,, SoundHitVolume,,, 48.0 / float(LastDamage - hitdamage), false);
    }
    // End:0x14B
    else
    {
        Pawn.PlaySound(SoundHit,, SoundHitVolume,,, 48.0 / float(hitdamage - LastDamage), false);
    }
    LastDamage = hitdamage;
    //return;    
}

simulated function ClientAddCeremonyRanking(int PlayerIndex, SEndCeremonyInfo InEndCeremonyInfo)
{
    // End:0x1B
    if(Level.NetMode == NM_DedicatedServer)
    {
        return;
    }
    EndCeremonyInfo[PlayerIndex].PlayerName = InEndCeremonyInfo.PlayerName;
    EndCeremonyInfo[PlayerIndex].CharacterName = InEndCeremonyInfo.CharacterName;
    EndCeremonyInfo[PlayerIndex].PlayerTeam = InEndCeremonyInfo.PlayerTeam;
    EndCeremonyInfo[PlayerIndex].SpawnPos = InEndCeremonyInfo.SpawnPos;
    EndCeremonyInfo[PlayerIndex].SpawnRot = InEndCeremonyInfo.SpawnRot;
    //return;    
}

simulated function ClientStartCeremony(int PlayerCount, int WinningTeamIndex, string EndCeremonySound)
{
    local int i, i2;
    local Pawn P;
    local Sound LoadedEndCeremonySound;

    // End:0x1B
    if(Level.NetMode == NM_DedicatedServer)
    {
        return;
    }
    EndCeremonyStarted = true;
    EndCeremonyPlayerCount = PlayerCount;
    EndCeremonyWinningTeamIndex = WinningTeamIndex;
    // End:0x7D
    if(!class'Misc_Player'.default.bDisableEndCeremonySound)
    {
        LoadedEndCeremonySound = Sound(DynamicLoadObject(EndCeremonySound, class'Sound', true));
        class'Message_WinningTeam'.default.EndCeremonySound = LoadedEndCeremonySound;
    }
    i = 0;
    J0x84:
    // End:0x20B [Loop If]
    if(i < PlayerCount)
    {
        P = Spawn(class'Misc_Pawn',,, EndCeremonyInfo[i].SpawnPos, EndCeremonyInfo[i].SpawnRot);
        // End:0x201
        if(P != none)
        {
            P.Role = ROLE_Authority;
            P.RemoteRole = ROLE_None;
            Misc_Pawn(P).Setup(class'xUtil'.static.FindPlayerRecord(EndCeremonyInfo[i].CharacterName), true);
            i2 = Rand(EndCeremonyWeaponNames.Length);
            Misc_Pawn(P).GiveWeapon(EndCeremonyWeaponNames[i2]);
            Misc_Pawn(P).PendingWeapon = Weapon(Misc_Pawn(P).FindInventoryType(EndCeremonyWeaponClasses[i2]));
            Misc_Pawn(P).ChangedWeapon();
            Misc_Pawn(P).SetBrightSkin(EndCeremonyInfo[i].PlayerTeam);
            Misc_Pawn(P).bNetNotify = false;
            Misc_Pawn(P).SetAnimAction('None');
            EndCeremonyPawns[i] = P;
        }
        ++ i;
        // [Loop Continue]
        goto J0x84;
    }
    EndCeremonyTimer = 7.0;
    EndCeremonyPlayerIdx = -1;
    GotoState('GameEnded');
    //return;    
}

simulated function ClientReceiveStatsListName(string ListName)
{
    local Team_HUDBase th;

    th = Team_HUDBase(myHUD);
    // End:0xB7
    if(th != none)
    {
        th.CurrentStatsList = int(float(th.CurrentStatsList + 1) % float(2));
        th.StatsLists[th.CurrentStatsList].ListName = ListName;
        th.StatsLists[th.CurrentStatsList].RowNames.Length = 0;
        th.StatsLists[th.CurrentStatsList].RowValues.Length = 0;
    }
    //return;    
}

simulated function ClientReceiveStatsListIdx(int Index, string RowName, string RowValue)
{
    local Team_HUDBase th;

    th = Team_HUDBase(myHUD);
    // End:0xCF
    if(th != none)
    {
        th.StatsLists[th.CurrentStatsList].RowNames.Length = Index + 1;
        th.StatsLists[th.CurrentStatsList].RowNames[Index] = RowName;
        th.StatsLists[th.CurrentStatsList].RowValues.Length = Index + 1;
        th.StatsLists[th.CurrentStatsList].RowValues[Index] = RowValue;
    }
    //return;    
}

simulated function UpdateEndCeremony(float DeltaTime)
{
    local Pawn P;
    local Rotator R;
    local int i;

    // End:0x0D
    if(EndCeremonyPlayerCount == 0)
    {
        return;
    }
    EndCeremonyTimer += DeltaTime;
    // End:0x13D
    if(EndCeremonyTimer >= 7.0)
    {
        EndCeremonyTimer -= 7.0;
        ++ EndCeremonyPlayerIdx;
        // End:0x51
        if(EndCeremonyPlayerIdx >= EndCeremonyPlayerCount)
        {
            EndCeremonyPlayerIdx = 0;
        }
        P = EndCeremonyPawns[EndCeremonyPlayerIdx];
        // End:0xFE
        if(EndCeremonyAnimNames.Length > 0)
        {
            i = Rand(EndCeremonyAnimNames.Length);
            // End:0xD6
            if(P != none)
            {
                P.PlayAnim(EndCeremonyAnimNames[i], 0.50, 0.0);
                P.bWaitForAnim = true;
                ClientSetViewTarget(P);
                SetViewTarget(P);
                ClientSetBehindView(true);
            }
            // End:0xFE
            if(!WinnerAnnounced)
            {
                class'Message_WinningTeam'.static.ClientReceive(self, EndCeremonyWinningTeamIndex);
                WinnerAnnounced = true;
            }
        }
        // End:0x13D
        if(P != none)
        {
            class'Message_PlayerRanking'.default.PlayerName = EndCeremonyInfo[EndCeremonyPlayerIdx].PlayerName;
            class'Message_PlayerRanking'.static.ClientReceive(self, EndCeremonyPlayerIdx);
        }
    }
    P = EndCeremonyPawns[EndCeremonyPlayerIdx];
    // End:0x196
    if(P != none)
    {
        R = P.Rotation;
        R.Yaw += 32768;
        R.Pitch = -2730;
        SetRotation(R);
    }
    //return;    
}

function ClientListBest(string acc, string Dam, string HS)
{
    // End:0x14
    if(class'Misc_Player'.default.bDisableAnnouncement)
    {
        return;
    }
    // End:0x2B
    if(acc != "")
    {
        ClientMessage(acc);
    }
    // End:0x42
    if(Dam != "")
    {
        ClientMessage(Dam);
    }
    // End:0x59
    if(HS != "")
    {
        ClientMessage(HS);
    }
    //return;    
}

function ServerSetMapString(string S)
{
    // End:0x3F
    if(TeamArenaMaster(Level.Game) != none)
    {
        TeamArenaMaster(Level.Game).SetMapString(self, S);
    }
    // End:0x7B
    else
    {
        // End:0x7B
        if(ArenaMaster(Level.Game) != none)
        {
            ArenaMaster(Level.Game).SetMapString(self, S);
        }
    }
    //return;    
}

function ServerThrowWeapon()
{
    local int Ammo[2];
    local Inventory Inv;
    local class<Weapon> WeaponClass;

    // End:0x28
    if((Misc_Pawn(Pawn) == none) || Pawn.Weapon == none)
    {
        return;
    }
    Ammo[0] = Pawn.Weapon.AmmoCharge[0];
    Ammo[1] = Pawn.Weapon.AmmoCharge[1];
    WeaponClass = Pawn.Weapon.Class;
    super(PlayerController).ServerThrowWeapon();
    Misc_Pawn(Pawn).GiveWeaponClass(WeaponClass);
    Inv = Pawn.Inventory;
    J0xBA:
    // End:0x131 [Loop If]
    if(Inv != none)
    {
        // End:0x11A
        if(Inv.Class == WeaponClass)
        {
            Weapon(Inv).AmmoCharge[0] = Ammo[0];
            Weapon(Inv).AmmoCharge[1] = Ammo[1];
            // [Explicit Break]
            goto J0x131;
        }
        Inv = Inv.Inventory;
        J0x131:
        // [Loop Continue]
        goto J0xBA;
    }
    //return;    
}

function AwardAdrenaline(float Amount)
{
    // End:0xA7
    if(bAdrenalineEnabled)
    {
        // End:0x55
        if(((TAM_GRI(GameReplicationInfo) == none) || TAM_GRI(GameReplicationInfo).bDisableTeamCombos) && (Pawn != none) && Pawn.InCurrentCombo())
        {
            return;
        }
        // End:0x89
        if((Adrenaline < AdrenalineMax) && (Adrenaline + Amount) >= AdrenalineMax)
        {
            ClientDelayedAnnouncementNamed('adrenalin', 15);
        }
        Adrenaline = FClamp(Adrenaline + Amount, 0.10, AdrenalineMax);
    }
    //return;    
}

simulated function PostNetBeginPlay()
{
    super.PostNetBeginPlay();
    // End:0x33
    if(Level.GRI != none)
    {
        Level.GRI.MaxLives = 0;
    }
    //return;    
}

simulated function InitInputSystem()
{
    local PlayerController C;

    super(UnrealPlayer).InitInputSystem();
    C = Level.GetLocalPlayerController();
    // End:0x73
    if(C != none)
    {
        C.Player.InteractionMaster.AddInteraction("3SPNv3210CW.Menu_Interaction", C.Player);
    }
    //return;    
}

function ClientKillBases()
{
    local xPickUpBase P;

    // End:0x63
    foreach AllActors(class'xPickUpBase', P)
    {
        // End:0x28
        if(P.IsA('Misc_PickupBase'))
        {
            continue;            
        }
        P.bHidden = true;
        // End:0x62
        if(P.myEmitter != none)
        {
            P.myEmitter.Destroy();
        }        
    }    
    //return;    
}

function Reset()
{
    local NavigationPoint P;
    local float Adren;

    Adren = Adrenaline;
    P = StartSpot;
    super(PlayerController).Reset();
    StartSpot = P;
    // End:0x56
    if((Pawn == none) || !Pawn.InCurrentCombo())
    {
        Adrenaline = Adren;
    }
    // End:0x61
    else
    {
        Adrenaline = 0.10;
    }
    WaitDelay = 0.0;
    //return;    
}

function ClientPlayAlone()
{
    // End:0x52
    if((ServerSoundAlone == none) && Len(Misc_BaseGRI(GameReplicationInfo).SoundAloneName) > 0)
    {
        ServerSoundAlone = Sound(DynamicLoadObject(Misc_BaseGRI(GameReplicationInfo).SoundAloneName, class'Sound', true));
    }
    // End:0x7A
    if(ServerSoundAlone != none)
    {
        ClientPlaySound(ServerSoundAlone, true, class'Misc_Player'.default.SoundAloneVolume);
    }
    // End:0x9D
    else
    {
        ClientPlaySound(class'Misc_Player'.default.SoundAlone, true, class'Misc_Player'.default.SoundAloneVolume);
    }
    //return;    
}

function ClientPlaySpawnProtection()
{
    // End:0x52
    if((ServerSoundSpawnProtection == none) && Len(Misc_BaseGRI(GameReplicationInfo).SoundSpawnProtectionName) > 0)
    {
        ServerSoundSpawnProtection = Sound(DynamicLoadObject(Misc_BaseGRI(GameReplicationInfo).SoundSpawnProtectionName, class'Sound', true));
    }
    // End:0x6B
    if(ServerSoundSpawnProtection != none)
    {
        ClientPlaySound(ServerSoundSpawnProtection);
    }
    // End:0x7F
    else
    {
        ClientPlaySound(class'Misc_Player'.default.SoundSpawnProtection);
    }
    //return;    
}

simulated function PlayCustomRewardAnnouncement(Sound ASound, byte AnnouncementLevel, optional bool bForce)
{
    local float Atten;

    // End:0x28
    if((Level.NetMode == NM_DedicatedServer) || GameReplicationInfo == none)
    {
        return;
    }
    // End:0x4A
    if((AnnouncementLevel > AnnouncerLevel) || RewardAnnouncer == none)
    {
        return;
    }
    // End:0x76
    if(!bForce && (Level.TimeSeconds - LastPlaySound) < float(1))
    {
        return;
    }
    LastPlaySound = Level.TimeSeconds;
    LastPlaySpeech = Level.TimeSeconds;
    Atten = 2.0 * FClamp(0.10 + (float(AnnouncerVolume) * 0.2250), 0.20, 1.0);
    // End:0xEA
    if(ASound != none)
    {
        ClientPlaySound(ASound, true, Atten, 5);
    }
    //return;    
}

function BroadcastAnnouncement(class<LocalMessage> Message)
{
    local Controller C;

    C = Level.ControllerList;
    J0x14:
    // End:0x6E [Loop If]
    if(C != none)
    {
        // End:0x57
        if(Misc_Player(C) != none)
        {
            Misc_Player(C).ReceiveLocalizedMessage(Message, int(C == self), PlayerReplicationInfo);
        }
        C = C.nextController;
        // [Loop Continue]
        goto J0x14;
    }
    //return;    
}

simulated function PlayStatusAnnouncementReliable(name AName, byte AnnouncementLevel, optional bool bForce)
{
    local float Atten;
    local Sound ASound;

    // End:0x28
    if((Level.NetMode == NM_DedicatedServer) || GameReplicationInfo == none)
    {
        return;
    }
    // End:0x4A
    if((AnnouncementLevel > AnnouncerLevel) || StatusAnnouncer == none)
    {
        return;
    }
    // End:0x76
    if(!bForce && (Level.TimeSeconds - LastPlaySound) < float(1))
    {
        return;
    }
    LastPlaySound = Level.TimeSeconds;
    LastPlaySpeech = Level.TimeSeconds;
    Atten = 2.0 * FClamp(0.10 + (float(AnnouncerVolume) * 0.2250), 0.20, 1.0);
    ASound = StatusAnnouncer.GetSound(AName);
    // End:0x104
    if(ASound != none)
    {
        ClientPlaySound(ASound, true, Atten, 5);
    }
    //return;    
}

function ClientResetClock(int Seconds)
{
    Misc_BaseGRI(GameReplicationInfo).RoundTime = Seconds;
    //return;    
}

function AcknowledgePossession(Pawn P)
{
    super(PlayerController).AcknowledgePossession(P);
    SetupCombos();
    // End:0x46
    if((P != none) && PlayerReplicationInfo != none)
    {
        P.OwnerName = PlayerReplicationInfo.PlayerName;
    }
    //return;    
}

function ClientReceiveCombo(string ComboName)
{
    super.ClientReceiveCombo(ComboName);
    SetupCombos();
    //return;    
}

function SetupCombos()
{
    local int i;
    local Misc_BaseGRI GRI;
    local bool bDisable;
    local string ComboName;

    GRI = Misc_BaseGRI(Level.GRI);
    // End:0x26
    if(GRI == none)
    {
        return;
    }
    i = 0;
    J0x2D:
    // End:0x205 [Loop If]
    if(i < 16)
    {
        ComboName = ComboNameList[i];
        // End:0x59
        if(ComboName ~= "")
        {
            // [Explicit Continue]
            goto J0x1FB;
        }
        bDisable = false;
        // End:0xAE
        if(ComboName ~= "xGame.ComboDefensive")
        {
            bDisable = class'Misc_Player'.default.bDisableBooster || GRI.bDisableBooster;
        }
        // End:0x188
        else
        {
            // End:0xF7
            if(ComboName ~= "xGame.ComboSpeed")
            {
                bDisable = class'Misc_Player'.default.bDisableSpeed || GRI.bDisableSpeed;
            }
            // End:0x188
            else
            {
                // End:0x142
                if(ComboName ~= "xGame.ComboBerserk")
                {
                    bDisable = class'Misc_Player'.default.bDisableBerserk || GRI.bDisableBerserk;
                }
                // End:0x188
                else
                {
                    // End:0x188
                    if(ComboName ~= "xGame.ComboInvis")
                    {
                        bDisable = class'Misc_Player'.default.bDisableInvis || GRI.bDisableInvis;
                    }
                }
            }
        }
        // End:0x1A4
        if(bDisable)
        {
            ComboName = "xGame.Combo";
        }
        ComboList[i] = class<Combo>(DynamicLoadObject(ComboName, class'Class'));
        // End:0x1FB
        if(ComboList[i] == none)
        {
            Log("Could not find combo:" @ ComboName, '3SPN');
        }
        J0x1FB:
        ++ i;
        // [Loop Continue]
        goto J0x2D;
    }
    //return;    
}

function ServerViewNextPlayer()
{
    local Controller C, pick;
    local bool bFound, bRealSpec, bWasSpec;
    local TeamInfo RealTeam;

    bRealSpec = PlayerReplicationInfo.bOnlySpectator;
    bWasSpec = (ViewTarget != Pawn) && ViewTarget != self;
    PlayerReplicationInfo.bOnlySpectator = true;
    RealTeam = PlayerReplicationInfo.Team;
    C = Level.ControllerList;
    J0x6F:
    // End:0x151 [Loop If]
    if(C != none)
    {
        // End:0xBF
        if(bRealSpec && C.PlayerReplicationInfo != none)
        {
            PlayerReplicationInfo.Team = C.PlayerReplicationInfo.Team;
        }
        // End:0x13A
        if(Level.Game.CanSpectate(self, bRealSpec, C))
        {
            // End:0xFC
            if(pick == none)
            {
                pick = C;
            }
            // End:0x116
            if(bFound)
            {
                pick = C;
                // [Explicit Break]
                goto J0x151;
            }
            // End:0x13A
            else
            {
                bFound = (RealViewTarget == C) || ViewTarget == C;
            }
        }
        C = C.nextController;
        J0x151:
        // [Loop Continue]
        goto J0x6F;
    }
    PlayerReplicationInfo.Team = RealTeam;
    SetViewTarget(pick);
    ClientSetViewTarget(pick);
    // End:0x18E
    if(!bWasSpec)
    {
        bBehindView = false;
    }
    ClientSetBehindView(bBehindView);
    PlayerReplicationInfo.bOnlySpectator = bRealSpec;
    //return;    
}

function ServerChangeTeam(int Team)
{
    local int Adren;

    // End:0x70
    if((Team_GameBase(Level.Game) != none) && Team_GameBase(Level.Game).TournamentModule != none)
    {
        // End:0x70
        if(!Team_GameBase(Level.Game).TournamentModule.AllowChangeTeam(self, Team))
        {
            return;
        }
    }
    Adren = int(Adrenaline);
    super(PlayerController).ServerChangeTeam(Team);
    Adrenaline = float(Adren);
    // End:0xF1
    if((Team_GameBase(Level.Game) != none) && Team_GameBase(Level.Game).bRespawning)
    {
        PlayerReplicationInfo.bOutOfLives = false;
        PlayerReplicationInfo.NumLives = 1;
    }
    //return;    
}

function BecomeActivePlayer()
{
    local bool bRespawning;
    local int TeamIdx;

    // End:0x12
    if(Role < ROLE_Authority)
    {
        return;
    }
    // End:0x32
    if(!Level.Game.AllowBecomeActivePlayer(self))
    {
        return;
    }
    // End:0x53
    if(!IsInState('GameEnded'))
    {
        bBehindView = false;
        FixFOV();
        ServerViewSelf();
    }
    PlayerReplicationInfo.bOnlySpectator = false;
    -- Level.Game.NumSpectators;
    ++ Level.Game.NumPlayers;
    // End:0xD9
    if(Level.Game.GameStats != none)
    {
        Level.Game.GameStats.ConnectEvent(PlayerReplicationInfo);
    }
    PlayerReplicationInfo.Reset();
    Adrenaline = 0.0;
    LastRezTime = Level.TimeSeconds;
    BroadcastLocalizedMessage(Level.Game.GameMessageClass, 1, PlayerReplicationInfo);
    // End:0x237
    if(Level.Game.bTeamGame)
    {
        // End:0x199
        if((Team_GameBase(Level.Game) == none) || !Team_GameBase(Level.Game).AutoBalanceTeams)
        {
            TeamIdx = int(GetUrlOption("Team"));
        }
        // End:0x1A1
        else
        {
            TeamIdx = 255;
        }
        Level.Game.ChangeTeam(self, Level.Game.PickTeam(byte(TeamIdx), none), false);
        // End:0x237
        if((Team_GameBase(Level.Game) != none) && Team_GameBase(Level.Game).AutoBalanceOnJoins)
        {
            Team_GameBase(Level.Game).ForceAutoBalance = true;
        }
    }
    // End:0x30E
    if(!IsInState('GameEnded'))
    {
        // End:0x307
        if(!Level.Game.bDelayedStart)
        {
            Level.Game.bRestartLevel = false;
            // End:0x2B1
            if(Level.Game.bWaitingToStartMatch)
            {
                Level.Game.StartMatch();
            }
            // End:0x2D3
            else
            {
                Level.Game.RestartPlayer(PlayerController(Owner));
            }
            Level.Game.bRestartLevel = Level.Game.default.bRestartLevel;
        }
        // End:0x30E
        else
        {
            GotoState('PlayerWaiting');
        }
    }
    ClientBecameActivePlayer();
    // End:0x457
    if(Role == ROLE_Authority)
    {
        NextRezTime = Level.TimeSeconds + float(2);
        // End:0x457
        if(!IsInState('GameEnded'))
        {
            // End:0x38A
            if(Level.Game.bWaitingToStartMatch)
            {
                PlayerReplicationInfo.bOutOfLives = false;
                PlayerReplicationInfo.NumLives = 1;
            }
            // End:0x43B
            else
            {
                // End:0x3CA
                if(Team_GameBase(Level.Game) != none)
                {
                    bRespawning = Team_GameBase(Level.Game).bRespawning;
                }
                // End:0x40C
                else
                {
                    // End:0x40A
                    if(ArenaMaster(Level.Game) != none)
                    {
                        bRespawning = ArenaMaster(Level.Game).bRespawning;
                    }
                    // End:0x40C
                    else
                    {
                        return;
                    }
                }
                PlayerReplicationInfo.bOutOfLives = !bRespawning;
                PlayerReplicationInfo.NumLives = int(bRespawning);
            }
            // End:0x450
            if(!bRespawning)
            {
                GotoState('Spectating');
            }
            // End:0x457
            else
            {
                GotoState('PlayerWaiting');
            }
        }
    }
    //return;    
}

function DoCombo(class<Combo> ComboClass)
{
    // End:0x3F
    if((TAM_GRI(GameReplicationInfo) == none) || TAM_GRI(Level.GRI).bDisableTeamCombos)
    {
        super.DoCombo(ComboClass);
        return;
    }
    ServerDoCombo(ComboClass);
    //return;    
}

function bool CanDoCombo(class<Combo> ComboClass)
{
    // End:0x12
    if(TAM_GRI(GameReplicationInfo) == none)
    {
        return true;
    }
    // End:0x39
    if(class<ComboSpeed>(ComboClass) != none)
    {
        return !TAM_GRI(GameReplicationInfo).bDisableSpeed;
    }
    // End:0x60
    if(class<ComboDefensive>(ComboClass) != none)
    {
        return !TAM_GRI(GameReplicationInfo).bDisableBooster;
    }
    // End:0x87
    if(class<ComboInvis>(ComboClass) != none)
    {
        return !TAM_GRI(GameReplicationInfo).bDisableInvis;
    }
    // End:0xAE
    if(class<ComboBerserk>(ComboClass) != none)
    {
        return !TAM_GRI(GameReplicationInfo).bDisableBerserk;
    }
    return true;
    //return;    
}

function ServerDoCombo(class<Combo> ComboClass)
{
    // End:0x48
    if(class<ComboBerserk>(ComboClass) != none)
    {
        ComboClass = class<Combo>(DynamicLoadObject("3SPNv3210CW.Misc_ComboBerserk", class'Class'));
    }
    // End:0x9D
    else
    {
        // End:0x9D
        if((class<ComboSpeed>(ComboClass) != none) && class<Misc_ComboSpeed>(ComboClass) == none)
        {
            ComboClass = class<Combo>(DynamicLoadObject("3SPNv3210CW.Misc_ComboSpeed", class'Class'));
        }
    }
    // End:0xB7
    if(Adrenaline < ComboClass.default.AdrenalineCost)
    {
        return;
    }
    // End:0xC9
    if(!CanDoCombo(ComboClass))
    {
        return;
    }
    // End:0x120
    if(((TAM_GRI(GameReplicationInfo) == none) || TAM_GRI(Level.GRI).bDisableTeamCombos) || ComboClass.default.Duration <= float(1))
    {
        super.ServerDoCombo(ComboClass);
        return;
    }
    // End:0x228
    if(xPawn(Pawn) != none)
    {
        // End:0x16F
        if(TAM_TeamInfo(PlayerReplicationInfo.Team) != none)
        {
            TAM_TeamInfo(PlayerReplicationInfo.Team).PlayerUsedCombo(self, ComboClass);
        }
        // End:0x228
        else
        {
            // End:0x1AE
            if(TAM_TeamInfoRed(PlayerReplicationInfo.Team) != none)
            {
                TAM_TeamInfoRed(PlayerReplicationInfo.Team).PlayerUsedCombo(self, ComboClass);
            }
            // End:0x228
            else
            {
                // End:0x1ED
                if(TAM_TeamInfoBlue(PlayerReplicationInfo.Team) != none)
                {
                    TAM_TeamInfoBlue(PlayerReplicationInfo.Team).PlayerUsedCombo(self, ComboClass);
                }
                // End:0x228
                else
                {
                    Log("Could not get TeamInfo for player:" @ PlayerReplicationInfo.PlayerName, '3SPN');
                }
            }
        }
    }
    //return;    
}

function ServerUpdateStatArrays(TeamPlayerReplicationInfo PRI)
{
    local Misc_PRI P;

    // End:0x16
    if(PRI != none)
    {
        super(UnrealPlayer).ServerUpdateStatArrays(PRI);
    }
    P = Misc_PRI(PRI);
    // End:0x33
    if(P == none)
    {
        return;
    }
    ClientSendAssaultStats(P, P.Assault);
    ClientSendBioStats(P, P.Bio);
    ClientSendShockStats(P, P.Shock);
    ClientSendLinkStats(P, P.Link);
    ClientSendMiniStats(P, P.Mini);
    ClientSendFlakStats(P, P.Flak);
    ClientSendRocketStats(P, P.Rockets);
    ClientSendSniperStats(P, P.Sniper);
    ClientSendComboStats(P, P.Combo);
    ClientSendMiscStats(P, P.HeadShots, P.EnemyDamage, P.ReverseFF, P.AveragePercent, P.FlawlessCount, P.OverkillCount, P.DarkHorseCount, P.SGDamage, P.RoxCount);
    //return;    
}

function ClientSendMiscStats(Misc_PRI P, int HS, int ed, float RFF, float AP, int FC, int OC, int DHC, int SGD, int RoxCount)
{
    P.HeadShots = HS;
    P.EnemyDamage = ed;
    P.ReverseFF = RFF;
    P.AveragePercent = AP;
    P.FlawlessCount = FC;
    P.OverkillCount = OC;
    P.DarkHorseCount = DHC;
    P.SGDamage = SGD;
    P.RoxCount = RoxCount;
    //return;    
}

function ClientSendAssaultStats(Misc_PRI P, HitStats Assault)
{
    P.Assault.primary.Fired = Assault.primary.Fired;
    P.Assault.primary.Hit = Assault.primary.Hit;
    P.Assault.primary.Damage = Assault.primary.Damage;
    P.Assault.Secondary.Fired = Assault.Secondary.Fired;
    P.Assault.Secondary.Hit = Assault.Secondary.Hit;
    P.Assault.Secondary.Damage = Assault.Secondary.Damage;
    //return;    
}

function ClientSendShockStats(Misc_PRI P, HitStats Shock)
{
    P.Shock.primary.Fired = Shock.primary.Fired;
    P.Shock.primary.Hit = Shock.primary.Hit;
    P.Shock.primary.Damage = Shock.primary.Damage;
    P.Shock.Secondary.Fired = Shock.Secondary.Fired;
    P.Shock.Secondary.Hit = Shock.Secondary.Hit;
    P.Shock.Secondary.Damage = Shock.Secondary.Damage;
    //return;    
}

function ClientSendLinkStats(Misc_PRI P, HitStats Link)
{
    P.Link.primary.Fired = Link.primary.Fired;
    P.Link.primary.Hit = Link.primary.Hit;
    P.Link.primary.Damage = Link.primary.Damage;
    P.Link.Secondary.Fired = Link.Secondary.Fired;
    P.Link.Secondary.Hit = Link.Secondary.Hit;
    P.Link.Secondary.Damage = Link.Secondary.Damage;
    //return;    
}

function ClientSendMiniStats(Misc_PRI P, HitStats Mini)
{
    P.Mini.primary.Fired = Mini.primary.Fired;
    P.Mini.primary.Hit = Mini.primary.Hit;
    P.Mini.primary.Damage = Mini.primary.Damage;
    P.Mini.Secondary.Fired = Mini.Secondary.Fired;
    P.Mini.Secondary.Hit = Mini.Secondary.Hit;
    P.Mini.Secondary.Damage = Mini.Secondary.Damage;
    //return;    
}

function ClientSendFlakStats(Misc_PRI P, HitStats Flak)
{
    P.Flak.primary.Fired = Flak.primary.Fired;
    P.Flak.primary.Hit = Flak.primary.Hit;
    P.Flak.primary.Damage = Flak.primary.Damage;
    P.Flak.Secondary.Fired = Flak.Secondary.Fired;
    P.Flak.Secondary.Hit = Flak.Secondary.Hit;
    P.Flak.Secondary.Damage = Flak.Secondary.Damage;
    //return;    
}

function ClientSendRocketStats(Misc_PRI P, HitStat Rockets)
{
    P.Rockets.Fired = Rockets.Fired;
    P.Rockets.Hit = Rockets.Hit;
    P.Rockets.Damage = Rockets.Damage;
    //return;    
}

function ClientSendSniperStats(Misc_PRI P, HitStat Sniper)
{
    P.Sniper.Fired = Sniper.Fired;
    P.Sniper.Hit = Sniper.Hit;
    P.Sniper.Damage = Sniper.Damage;
    //return;    
}

function ClientSendBioStats(Misc_PRI P, HitStat Bio)
{
    P.Bio.Fired = Bio.Fired;
    P.Bio.Hit = Bio.Hit;
    P.Bio.Damage = Bio.Damage;
    //return;    
}

function ClientSendComboStats(Misc_PRI P, HitStat Combo)
{
    P.Combo.Fired = Combo.Fired;
    P.Combo.Hit = Combo.Hit;
    P.Combo.Damage = Combo.Damage;
    //return;    
}

function BecomeSpectator()
{
    local Misc_PlayerDataManager_ServerLink PlayerDataManager_ServerLink;

    // End:0x12
    if(Role < ROLE_Authority)
    {
        return;
    }
    // End:0x32
    if(!Level.Game.BecomeSpectator(self))
    {
        return;
    }
    // End:0x60
    if(Pawn != none)
    {
        Pawn.Died(self, class'DamageType', Pawn.Location);
    }
    // End:0x8D
    if(PlayerReplicationInfo.Team != none)
    {
        PlayerReplicationInfo.Team.RemoveFromTeam(self);
    }
    PlayerReplicationInfo.Team = none;
    PlayerDataManager_ServerLink = GetPlayerDataManager_ServerLink();
    // End:0xC4
    if(PlayerDataManager_ServerLink != none)
    {
        PlayerDataManager_ServerLink.PlayerLeft(self);
    }
    ServerSpectate();
    BroadcastLocalizedMessage(Level.Game.GameMessageClass, 14, PlayerReplicationInfo);
    ClientBecameSpectator();
    //return;    
}

function ServerSpectate()
{
    // End:0x44
    if((Pawn != none) && !Pawn.bDeleteMe)
    {
        Pawn.Died(self, class'DamageType', Pawn.Location);
    }
    // End:0x66
    if(!IsInState('GameEnded'))
    {
        GotoState('Spectating');
        bBehindView = true;
        ServerViewNextPlayer();
    }
    //return;    
}

function ClientSetWeapon(class<Weapon> WeaponClass)
{
    Log("ClientSetWeapon " $ string(WeaponClass.Name));
    super(Controller).ClientSetWeapon(WeaponClass);
    //return;    
}

exec function Suicide()
{
    // End:0x1A
    if(Pawn != none)
    {
        Pawn.Suicide();
    }
    //return;    
}

function TakeShot()
{
    // End:0x9A
    if(GameReplicationInfo.bTeamGame)
    {
        ConsoleCommand((((((((("shot TAM-" $ Left(string(Level), InStr(string(Level), "."))) $ "-") $ string(Level.Month)) $ "-") $ string(Level.Day)) $ "-") $ string(Level.Hour)) $ "-") $ string(Level.Minute));
    }
    // End:0x11E
    else
    {
        ConsoleCommand((((((((("shot AM-" $ Left(string(Level), InStr(string(Level), "."))) $ "-") $ string(Level.Month)) $ "-") $ string(Level.Day)) $ "-") $ string(Level.Hour)) $ "-") $ string(Level.Minute));
    }
    bShotTaken = true;
    //return;    
}

exec function SetSkins(byte r1, byte g1, byte b1, byte r2, byte g2, byte b2, byte r3, byte g3, byte b3)
{
    class'Misc_Player'.default.RedOrEnemy.R = byte(Clamp(r1, 0, 100));
    class'Misc_Player'.default.RedOrEnemy.G = byte(Clamp(g1, 0, 100));
    class'Misc_Player'.default.RedOrEnemy.B = byte(Clamp(b1, 0, 100));
    class'Misc_Player'.default.BlueOrAlly.R = byte(Clamp(r2, 0, 100));
    class'Misc_Player'.default.BlueOrAlly.G = byte(Clamp(g2, 0, 100));
    class'Misc_Player'.default.BlueOrAlly.B = byte(Clamp(b2, 0, 100));
    class'Misc_Player'.default.Yellow.R = byte(Clamp(r3, 0, 100));
    class'Misc_Player'.default.Yellow.G = byte(Clamp(g3, 0, 100));
    class'Misc_Player'.default.Yellow.B = byte(Clamp(b3, 0, 100));
    class'Misc_Player'.static.StaticSaveConfig();
    //return;    
}

exec function Menu3SPN()
{
    local Rotator R;

    R = GetViewRotation();
    R.Pitch = 0;
    SetRotation(R);
    ClientOpenMenu("3SPNv3210CW.Menu_Menu3SPN");
    //return;    
}

exec function ToggleTeamInfo()
{
    class'Misc_Player'.default.bShowTeamInfo = !class'Misc_Player'.default.bShowTeamInfo;
    class'Misc_Player'.static.StaticSaveConfig();
    //return;    
}

exec function BehindView(bool B)
{
    // End:0x78
    if(((PlayerReplicationInfo.bOnlySpectator || (Pawn == none) && !Misc_BaseGRI(GameReplicationInfo).bEndOfRound) || PlayerReplicationInfo.bAdmin) || Level.NetMode == NM_Standalone)
    {
        super(PlayerController).BehindView(B);
    }
    // End:0x7F
    else
    {
        super(PlayerController).BehindView(false);
    }
    //return;    
}

exec function ToggleBehindView()
{
    // End:0x72
    if(((PlayerReplicationInfo.bOnlySpectator || (Pawn == none) && !Misc_BaseGRI(GameReplicationInfo).bEndOfRound) || PlayerReplicationInfo.bAdmin) || Level.NetMode == NM_Standalone)
    {
        super(PlayerController).ToggleBehindView();
    }
    // End:0x79
    else
    {
        BehindView(false);
    }
    //return;    
}

exec function DisableCombos(bool S, bool B, bool BE, bool i, optional bool R, optional bool A)
{
    class'Misc_Player'.default.bDisableSpeed = S;
    class'Misc_Player'.default.bDisableBooster = B;
    class'Misc_Player'.default.bDisableBerserk = BE;
    class'Misc_Player'.default.bDisableInvis = i;
    class'Misc_Player'.default.bDisableRadar = R;
    class'Misc_Player'.default.bDisableAmmoRegen = A;
    SetupCombos();
    //return;    
}

exec function UseSpeed()
{
    // End:0x1A
    if(Adrenaline < class'ComboSpeed'.default.AdrenalineCost)
    {
        return;
    }
    DoCombo(class'ComboSpeed');
    //return;    
}

exec function UseBooster()
{
    // End:0x1A
    if(Adrenaline < class'ComboDefensive'.default.AdrenalineCost)
    {
        return;
    }
    DoCombo(class'ComboDefensive');
    //return;    
}

exec function UseInvis()
{
    // End:0x1A
    if(Adrenaline < class'ComboInvis'.default.AdrenalineCost)
    {
        return;
    }
    DoCombo(class'ComboInvis');
    //return;    
}

exec function UseBerserk()
{
    // End:0x1A
    if(Adrenaline < class'ComboBerserk'.default.AdrenalineCost)
    {
        return;
    }
    DoCombo(class'ComboBerserk');
    //return;    
}

exec function UseNecro()
{
    // End:0x1A
    if(Adrenaline < class'NecroCombo'.default.AdrenalineCost)
    {
        return;
    }
    DoCombo(class'NecroCombo');
    //return;    
}

exec function CallTimeout()
{
    ServerCallTimeout();
    //return;    
}

function ServerCallTimeout()
{
    // End:0x37
    if(Team_GameBase(Level.Game) != none)
    {
        Team_GameBase(Level.Game).CallTimeout(self);
    }
    //return;    
}

simulated function Message(PlayerReplicationInfo PRI, coerce string Msg, name MsgType)
{
    local class<LocalMessage> LocalMessageClass2;

    switch(MsgType)
    {
        // End:0x1E5
        case 'Say':
            // End:0x1C
            if(PRI == none)
            {
                return;
            }
            // End:0x6D
            if((Misc_PRI(PRI) == none) || Misc_PRI(PRI).GetColoredName() == "")
            {
                Msg = (PRI.PlayerName $ ": ") $ Msg;
            }
            // End:0x1D7
            else
            {
                // End:0xFF
                if((!PRI.bOnlySpectator && PRI.Team != none) && PRI.Team.TeamIndex == 0)
                {
                    Msg = ((Misc_PRI(PRI).GetColoredName() $ class'Misc_Util'.static.MakeColorCode(class'Misc_Player'.default.RedMessageColor)) $ ": ") $ Msg;
                }
                // End:0x1D7
                else
                {
                    // End:0x191
                    if((!PRI.bOnlySpectator && PRI.Team != none) && PRI.Team.TeamIndex == 1)
                    {
                        Msg = ((Misc_PRI(PRI).GetColoredName() $ class'Misc_Util'.static.MakeColorCode(class'Misc_Player'.default.BlueMessageColor)) $ ": ") $ Msg;
                    }
                    // End:0x1D7
                    else
                    {
                        Msg = ((Misc_PRI(PRI).GetColoredName() $ class'Misc_Util'.static.MakeColorCode(class'Misc_Player'.default.YellowMessageColor)) $ ": ") $ Msg;
                    }
                }
            }
            LocalMessageClass2 = class'SayMessagePlus';
            // End:0x326
            break;
        // End:0x2CD
        case 'TeamSay':
            // End:0x1FA
            if(PRI == none)
            {
                return;
            }
            // End:0x262
            if((Misc_PRI(PRI) == none) || Misc_PRI(PRI).GetColoredName() == "")
            {
                Msg = (((PRI.PlayerName $ "(") $ PRI.GetLocationName()) $ "): ") $ Msg;
            }
            // End:0x2BF
            else
            {
                Msg = ((((Misc_PRI(PRI).GetColoredName() $ class'Misc_Util'.static.MakeColorCode(class'Misc_Player'.default.GreenMessageColor)) $ "(") $ PRI.GetLocationName()) $ "): ") $ Msg;
            }
            LocalMessageClass2 = class'TeamSayMessagePlus';
            // End:0x326
            break;
        // End:0x2FF
        case 'CriticalEvent':
            LocalMessageClass2 = class'CriticalEventPlus';
            myHUD.LocalizedMessage(LocalMessageClass2, 0, none, none, none, Msg);
            return;
        // End:0x315
        case 'DeathMessage':
            LocalMessageClass2 = class'xDeathMessage';
            // End:0x326
            break;
        // End:0xFFFF
        default:
            LocalMessageClass2 = class'StringMessagePlus';
            // End:0x326
            break;
    }
    // End:0x34F
    if(myHUD != none)
    {
        myHUD.AddTextMessage(Msg, LocalMessageClass2, PRI);
    }
    //return;    
}

event TeamMessage(PlayerReplicationInfo PRI, coerce string S, name Type)
{
    local string C;
    local int k;

    // End:0x28
    if((Level.NetMode == NM_DedicatedServer) || GameReplicationInfo == none)
    {
        return;
    }
    // End:0x4B
    if(AllowTextToSpeech(PRI, Type))
    {
        TextToSpeech(S, TextToSpeechVoiceVolume);
    }
    // End:0x65
    if(Type == 'TeamSayQuiet')
    {
        Type = 'TeamSay';
    }
    // End:0xE4
    if(class'Misc_Player'.default.bAllowColoredMessages)
    {
        k = 7;
        J0x7F:
        // End:0xC1 [Loop If]
        if(k >= 0)
        {
            S = Repl(S, "^" $ string(k), class'Misc_Util'.static.ColorReplace(k));
            -- k;
            // [Loop Continue]
            goto J0x7F;
        }
        S = Repl(S, "^r", class'Misc_Util'.static.RandomColor());
    }
    // End:0x12F
    else
    {
        k = 7;
        J0xEC:
        // End:0x11C [Loop If]
        if(k >= 0)
        {
            S = Repl(S, "^" $ string(k), "");
            -- k;
            // [Loop Continue]
            goto J0xEC;
        }
        S = Repl(S, "^r", "");
    }
    // End:0x190
    if(myHUD != none)
    {
        // End:0x16B
        if(class'Misc_Player'.default.bEnableColoredNamesInTalk)
        {
            Message(PRI, C $ S, Type);
        }
        // End:0x190
        else
        {
            myHUD.Message(PRI, C $ S, Type);
        }
    }
    // End:0x2A6
    if((Player != none) && Player.Console != none)
    {
        // End:0x278
        if(PRI != none)
        {
            // End:0x257
            if((PRI.Team != none) && GameReplicationInfo.bTeamGame)
            {
                // End:0x21E
                if(PRI.Team.TeamIndex == 0)
                {
                    C = ((Chr(27) $ Chr(200)) $ Chr(1)) $ Chr(1);
                }
                // End:0x257
                else
                {
                    // End:0x257
                    if(PRI.Team.TeamIndex == 1)
                    {
                        C = ((Chr(27) $ Chr(125)) $ Chr(200)) $ Chr(253);
                    }
                }
            }
            S = (PRI.PlayerName $ ": ") $ S;
        }
        Player.Console.Chat(C $ S, 6.0, PRI);
    }
    //return;    
}

function ServerSay(string Msg)
{
    super(PlayerController).ServerSay(Msg);
    // End:0x52
    if(Msg ~= "teams")
    {
        // End:0x52
        if(Team_GameBase(Level.Game) != none)
        {
            Team_GameBase(Level.Game).QueueAutoBalance();
        }
    }
    //return;    
}

simulated function SetColoredNameOldStyle(optional string s2, optional bool bShouldSave)
{
    local string S;
    local byte k, numdoatonce, M;

    // End:0x28
    if((Level.NetMode == NM_DedicatedServer) || PlayerReplicationInfo == none)
    {
        return;
    }
    // End:0x48
    if(s2 == "")
    {
        s2 = PlayerReplicationInfo.PlayerName;
    }
    k = 1;
    J0x50:
    // End:0x16D [Loop If]
    if(k <= Len(s2))
    {
        numdoatonce = 1;
        M = k;
        J0x76:
        // End:0xDA [Loop If]
        if((M < Len(s2)) && class'Misc_Player'.default.colorname[k - 1] == class'Misc_Player'.default.colorname[M])
        {
            ++ numdoatonce;
            ++ k;
            ++ M;
            // [Loop Continue]
            goto J0x76;
        }
        // End:0x163
        if((numdoatonce != Len(s2)) || class'Misc_Player'.default.colorname[k - 1] != WhiteColor)
        {
            S = (S $ class'Misc_Util'.static.MakeColorCode(class'Misc_Player'.default.colorname[k - 1])) $ Right(Left(s2, k), numdoatonce);
        }
        ++ k;
        // [Loop Continue]
        goto J0x50;
    }
    // End:0x196
    if(Misc_PRI(PlayerReplicationInfo) != none)
    {
        Misc_PRI(PlayerReplicationInfo).SetColoredName(S);
    }
    //return;    
}

simulated function SetColoredNameOldStyleCustom(optional string s2, optional int CustomColors)
{
    local string S;
    local byte k, numdoatonce, M;

    // End:0x28
    if((Level.NetMode == NM_DedicatedServer) || PlayerReplicationInfo == none)
    {
        return;
    }
    // End:0x53
    if(s2 == "")
    {
        s2 = class'Misc_Player'.default.ColoredName[CustomColors].SavedName;
    }
    SetNameNoReset(s2);
    k = 0;
    J0x66:
    // End:0xB6 [Loop If]
    if(k < 20)
    {
        class'Misc_Player'.default.colorname[k] = class'Misc_Player'.default.ColoredName[CustomColors].SavedColor[k];
        ++ k;
        // [Loop Continue]
        goto J0x66;
    }
    k = 1;
    J0xBE:
    // End:0x1C1 [Loop If]
    if(k <= Len(s2))
    {
        numdoatonce = 1;
        M = k;
        J0xE4:
        // End:0x15E [Loop If]
        if((M < Len(s2)) && class'Misc_Player'.default.ColoredName[CustomColors].SavedColor[k - 1] == class'Misc_Player'.default.ColoredName[CustomColors].SavedColor[M])
        {
            ++ numdoatonce;
            ++ k;
            ++ M;
            // [Loop Continue]
            goto J0xE4;
        }
        S = (S $ class'Misc_Util'.static.MakeColorCode(class'Misc_Player'.default.ColoredName[CustomColors].SavedColor[k - 1])) $ Right(Left(s2, k), numdoatonce);
        ++ k;
        // [Loop Continue]
        goto J0xBE;
    }
    // End:0x1EA
    if(Misc_PRI(PlayerReplicationInfo) != none)
    {
        Misc_PRI(PlayerReplicationInfo).SetColoredName(S);
    }
    //return;    
}

exec function SetName(coerce string S)
{
    S = class'Misc_Util'.static.StripColorCodes(S);
    ReplaceText(S, " ", "_");
    ReplaceText(S, "\\"", "");
    SetColoredNameOldStyle(Left(S, 20));
    class'Misc_Player'.default.CurrentSelectedColoredName = 255;
    CurrentSelectedColoredName = 255;
    StaticSaveConfig();
    super(PlayerController).SetName(S);
    //return;    
}

exec function SetNameNoReset(coerce string S)
{
    S = class'Misc_Util'.static.StripColorCodes(S);
    ReplaceText(S, " ", "_");
    ReplaceText(S, "\\"", "");
    SetColoredNameOldStyle(S);
    SetName(S);
    //return;    
}

simulated function string FindColoredName(int CustomColors)
{
    local string S;
    local byte k, numdoatonce, M;
    local string s2;

    // End:0x29
    if((Level.NetMode == NM_DedicatedServer) || PlayerReplicationInfo == none)
    {
        return "";
    }
    // End:0x54
    if(s2 == "")
    {
        s2 = class'Misc_Player'.default.ColoredName[CustomColors].SavedName;
    }
    k = 1;
    J0x5C:
    // End:0x15F [Loop If]
    if(k <= Len(s2))
    {
        numdoatonce = 1;
        M = k;
        J0x82:
        // End:0xFC [Loop If]
        if((M < Len(s2)) && class'Misc_Player'.default.ColoredName[CustomColors].SavedColor[k - 1] == class'Misc_Player'.default.ColoredName[CustomColors].SavedColor[M])
        {
            ++ numdoatonce;
            ++ k;
            ++ M;
            // [Loop Continue]
            goto J0x82;
        }
        S = (S $ class'Misc_Util'.static.MakeColorCode(class'Misc_Player'.default.ColoredName[CustomColors].SavedColor[k - 1])) $ Right(Left(s2, k), numdoatonce);
        ++ k;
        // [Loop Continue]
        goto J0x5C;
    }
    return S;
    //return;    
}

simulated function SaveNewColoredName()
{
    local int i, N, L;

    N = class'Misc_Player'.default.ColoredName.Length + 1;
    class'Misc_Player'.default.ColoredName.Length = N;
    class'Misc_Player'.default.ColoredName[N - 1].SavedName = PlayerReplicationInfo.PlayerName;
    L = 0;
    J0x5F:
    // End:0xAC [Loop If]
    if(L < 20)
    {
        class'Misc_Player'.default.ColoredName[N - 1].SavedColor[L] = class'Misc_Player'.default.colorname[L];
        ++ L;
        // [Loop Continue]
        goto J0x5F;
    }
    ColoredName.Length = class'Misc_Player'.default.ColoredName.Length;
    i = 0;
    J0xC9:
    // End:0x10C [Loop If]
    if(i < class'Misc_Player'.default.ColoredName.Length)
    {
        ColoredName[i] = class'Misc_Player'.default.ColoredName[i];
        ++ i;
        // [Loop Continue]
        goto J0xC9;
    }
    i = 0;
    J0x113:
    // End:0x149 [Loop If]
    if(i < 20)
    {
        colorname[i] = class'Misc_Player'.default.colorname[i];
        ++ i;
        // [Loop Continue]
        goto J0x113;
    }
    //return;    
}

simulated function SetInitialColoredName()
{
    // End:0x51
    if((class'Misc_Player'.default.CurrentSelectedColoredName != 255) && class'Misc_Player'.default.CurrentSelectedColoredName < class'Misc_Player'.default.ColoredName.Length)
    {
        SetColoredNameOldStyleCustom(, class'Misc_Player'.default.CurrentSelectedColoredName);
    }
    // End:0x57
    else
    {
        SetColoredNameOldStyle();
    }
    //return;    
}

event PreClientTravel()
{
    super(PlayerController).PreClientTravel();
    //return;    
}

simulated function ReloadDefaults()
{
    local int i;

    bShowCombos = class'Misc_Player'.default.bShowCombos;
    bDisableSpeed = class'Misc_Player'.default.bDisableSpeed;
    bDisableInvis = class'Misc_Player'.default.bDisableInvis;
    bDisableBooster = class'Misc_Player'.default.bDisableBooster;
    bDisableBerserk = class'Misc_Player'.default.bDisableBerserk;
    bDisableRadar = class'Misc_Player'.default.bDisableRadar;
    bDisableAmmoRegen = class'Misc_Player'.default.bDisableAmmoRegen;
    bShowTeamInfo = class'Misc_Player'.default.bShowTeamInfo;
    bExtendedInfo = class'Misc_Player'.default.bExtendedInfo;
    bMatchHUDToSkins = class'Misc_Player'.default.bMatchHUDToSkins;
    bUseBrightSkins = class'Misc_Player'.default.bUseBrightSkins;
    bUseTeamColors = class'Misc_Player'.default.bUseTeamColors;
    RedOrEnemy = class'Misc_Player'.default.RedOrEnemy;
    BlueOrAlly = class'Misc_Player'.default.BlueOrAlly;
    Yellow = class'Misc_Player'.default.Yellow;
    bForceRedEnemyModel = class'Misc_Player'.default.bForceRedEnemyModel;
    bForceBlueAllyModel = class'Misc_Player'.default.bForceBlueAllyModel;
    bUseTeamModels = class'Misc_Player'.default.bUseTeamModels;
    RedEnemyModel = class'Misc_Player'.default.RedEnemyModel;
    BlueAllyModel = class'Misc_Player'.default.BlueAllyModel;
    bDisableAnnouncement = class'Misc_Player'.default.bDisableAnnouncement;
    bAutoScreenShot = class'Misc_Player'.default.bAutoScreenShot;
    bAnnounceOverkill = class'Misc_Player'.default.bAnnounceOverkill;
    bUseHitSounds = class'Misc_Player'.default.bUseHitSounds;
    SoundHit = class'Misc_Player'.default.SoundHit;
    SoundHitFriendly = class'Misc_Player'.default.SoundHitFriendly;
    SoundHitVolume = class'Misc_Player'.default.SoundHitVolume;
    SoundAlone = class'Misc_Player'.default.SoundAlone;
    SoundAloneVolume = class'Misc_Player'.default.SoundAloneVolume;
    SoundSpawnProtection = class'Misc_Player'.default.SoundSpawnProtection;
    SoundTMDeath = class'Misc_Player'.default.SoundTMDeath;
    SoundUnlock = class'Misc_Player'.default.SoundUnlock;
    bEnableEnhancedNetCode = class'Misc_Player'.default.bEnableEnhancedNetCode;
    ShowInitialMenu = class'Misc_Player'.default.ShowInitialMenu;
    Menu3SPNKey = class'Misc_Player'.default.Menu3SPNKey;
    bDisableEndCeremonySound = class'Misc_Player'.default.bDisableEndCeremonySound;
    bAllowColoredMessages = class'Misc_Player'.default.bAllowColoredMessages;
    bEnableColoredNamesInTalk = class'Misc_Player'.default.bEnableColoredNamesInTalk;
    bEnableColoredNamesOnEnemies = class'Misc_Player'.default.bEnableColoredNamesOnEnemies;
    CurrentSelectedColoredName = class'Misc_Player'.default.CurrentSelectedColoredName;
    i = 0;
    J0x357:
    // End:0x38D [Loop If]
    if(i < 20)
    {
        colorname[i] = class'Misc_Player'.default.colorname[i];
        ++ i;
        // [Loop Continue]
        goto J0x357;
    }
    ColoredName = class'Misc_Player'.default.ColoredName;
    AutoSyncSettings = class'Misc_Player'.default.AutoSyncSettings;
    //return;    
}

function ClientSettingsResult(int Result, string PlayerName)
{
    class'Message_PlayerSettingsResult'.default.PlayerName = PlayerName;
    class'Message_PlayerSettingsResult'.static.ClientReceive(self, Result);
    // End:0xA0
    if((Level.NetMode != NM_DedicatedServer) && class'Misc_Player'.default.ShowInitialMenu == 1)
    {
        class'Menu_Menu3SPN'.default.DefaultToInfoTab = true;
        Menu3SPN();
        class'Menu_Menu3SPN'.default.DefaultToInfoTab = false;
        class'Misc_Player'.default.ShowInitialMenu = 2;
        class'Misc_Player'.static.StaticSaveConfig();
    }
    //return;    
}

function ClientLoadSettings(string PlayerName, BrightSkinsSettings BrightSkins, ColoredNamesSettings ColoredNames, MiscSettings Misc)
{
    local int i;

    class'Misc_Player'.default.bUseBrightSkins = BrightSkins.bUseBrightSkins;
    class'Misc_Player'.default.bUseTeamColors = BrightSkins.bUseTeamColors;
    class'Misc_Player'.default.RedOrEnemy = BrightSkins.RedOrEnemy;
    class'Misc_Player'.default.BlueOrAlly = BrightSkins.BlueOrAlly;
    class'Misc_Player'.default.Yellow = BrightSkins.Yellow;
    class'Misc_Player'.default.bUseTeamModels = BrightSkins.bUseTeamModels;
    class'Misc_Player'.default.bForceRedEnemyModel = BrightSkins.bForceRedEnemyModel;
    class'Misc_Player'.default.bForceBlueAllyModel = BrightSkins.bForceBlueAllyModel;
    class'Misc_Player'.default.RedEnemyModel = BrightSkins.RedEnemyModel;
    class'Misc_Player'.default.BlueAllyModel = BrightSkins.BlueAllyModel;
    class'Misc_Player'.default.bAllowColoredMessages = ColoredNames.bAllowColoredMessages;
    class'Misc_Player'.default.bEnableColoredNamesInTalk = ColoredNames.bEnableColoredNamesInTalk;
    class'Misc_Player'.default.bEnableColoredNamesOnEnemies = ColoredNames.bEnableColoredNamesOnEnemies;
    i = 0;
    J0x15C:
    // End:0x197 [Loop If]
    if(i < 20)
    {
        class'Misc_Player'.default.colorname[i] = ColoredNames.colorname[i];
        ++ i;
        // [Loop Continue]
        goto J0x15C;
    }
    class'Misc_DeathMessage'.default.bEnableTeamColoredDeaths = ColoredNames.bEnableTeamColoredDeaths;
    class'Misc_DeathMessage'.default.bDrawColoredNamesInDeathMessages = ColoredNames.bDrawColoredNamesInDeathMessages;
    class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD = ColoredNames.bEnableColoredNamesOnHUD;
    class'TAM_Scoreboard'.default.bEnableColoredNamesOnScoreboard = ColoredNames.bEnableColoredNamesOnScoreboard;
    class'Misc_Player'.default.ColoredName.Length = 1;
    i = 0;
    J0x21B:
    // End:0x25D [Loop If]
    if(i < 20)
    {
        class'Misc_Player'.default.ColoredName[0].SavedColor[i] = ColoredNames.colorname[i];
        ++ i;
        // [Loop Continue]
        goto J0x21B;
    }
    class'Misc_Player'.default.ColoredName[0].SavedName = PlayerReplicationInfo.PlayerName;
    class'Misc_Player'.default.CurrentSelectedColoredName = 0;
    class'Misc_Player'.default.bDisableSpeed = Misc.bDisableSpeed;
    class'Misc_Player'.default.bDisableBooster = Misc.bDisableBooster;
    class'Misc_Player'.default.bDisableBerserk = Misc.bDisableBerserk;
    class'Misc_Player'.default.bDisableInvis = Misc.bDisableInvis;
    class'Misc_Player'.default.bMatchHUDToSkins = Misc.bMatchHUDToSkins;
    class'Misc_Player'.default.bShowTeamInfo = Misc.bShowTeamInfo;
    class'Misc_Player'.default.bShowCombos = Misc.bShowCombos;
    class'Misc_Player'.default.bExtendedInfo = Misc.bExtendedInfo;
    class'Misc_Pawn'.default.bPlayOwnFootsteps = Misc.bPlayOwnFootsteps;
    class'Misc_Player'.default.bAutoScreenShot = Misc.bAutoScreenShot;
    class'Misc_Player'.default.bUseHitSounds = Misc.bUseHitSounds;
    class'Misc_Player'.default.bEnableEnhancedNetCode = Misc.bEnableEnhancedNetCode;
    class'Misc_Player'.default.bDisableEndCeremonySound = Misc.bDisableEndCeremonySound;
    class'Misc_Player'.default.SoundHitVolume = Misc.SoundHitVolume;
    class'Misc_Player'.default.SoundAloneVolume = Misc.SoundAloneVolume;
    class'Misc_Player'.default.AutoSyncSettings = Misc.AutoSyncSettings;
    ReloadDefaults();
    SetupCombos();
    SetColoredNameOldStyleCustom(, 0);
    class'Misc_Player'.static.StaticSaveConfig();
    class'TAM_Scoreboard'.static.StaticSaveConfig();
    class'Misc_DeathMessage'.static.StaticSaveConfig();
    ClientSettingsResult(2, PlayerName);
    //return;    
}

function ServerLoadSettings()
{
    local Misc_PlayerSettings PlayerSettings;
    local Team_GameBase TeamGame;

    // End:0x14
    foreach DynamicActors(class'Team_GameBase', TeamGame)
    {
        // End:0x14
        break;        
    }    
    // End:0x7A
    if(!TeamGame.AllowServerSaveSettings)
    {
        Log("Loading settings disabled for player " $ PlayerReplicationInfo.PlayerName);
        ClientSettingsResult(6, PlayerReplicationInfo.PlayerName);
        return;
    }
    PlayerSettings = class'Misc_PlayerSettings'.static.LoadPlayerSettings(self);
    // End:0x123
    if((PlayerSettings != none) && PlayerSettings.Existing == true)
    {
        Log("Loading settings for player " $ PlayerReplicationInfo.PlayerName);
        ClientLoadSettings(PlayerReplicationInfo.PlayerName, PlayerSettings.BrightSkins, PlayerSettings.ColoredNames, PlayerSettings.Misc);
    }
    // End:0x16F
    else
    {
        Log("Unable to load settings for player " $ PlayerReplicationInfo.PlayerName);
        ClientSettingsResult(0, PlayerReplicationInfo.PlayerName);
    }
    //return;    
}

function ServerSaveSettings(BrightSkinsSettings BrightSkins, ColoredNamesSettings ColoredNames, MiscSettings Misc)
{
    local Misc_PlayerSettings PlayerSettings;
    local Team_GameBase TeamGame;

    // End:0x14
    foreach DynamicActors(class'Team_GameBase', TeamGame)
    {
        // End:0x14
        break;        
    }    
    // End:0x7A
    if(!TeamGame.AllowServerSaveSettings)
    {
        Log("Loading settings disabled for player " $ PlayerReplicationInfo.PlayerName);
        ClientSettingsResult(6, PlayerReplicationInfo.PlayerName);
        return;
    }
    PlayerSettings = class'Misc_PlayerSettings'.static.LoadPlayerSettings(self);
    // End:0x133
    if(PlayerSettings != none)
    {
        Log("Saving settings for player " $ PlayerReplicationInfo.PlayerName);
        PlayerSettings.BrightSkins = BrightSkins;
        PlayerSettings.ColoredNames = ColoredNames;
        PlayerSettings.Misc = Misc;
        class'Misc_PlayerSettings'.static.SavePlayerSettings(PlayerSettings);
        ClientSettingsResult(3, PlayerReplicationInfo.PlayerName);
    }
    // End:0x17F
    else
    {
        Log("Unable to save settings for player " $ PlayerReplicationInfo.PlayerName);
        ClientSettingsResult(1, PlayerReplicationInfo.PlayerName);
    }
    //return;    
}

function LoadSettings()
{
    local float TimeStampSeconds;

    TimeStampSeconds = Level.TimeSeconds;
    // End:0x3D
    if((TimeStampSeconds - LastSettingsLoadTimeSeconds) < float(5))
    {
        class'Message_PlayerSettingsResult'.static.ClientReceive(self, 4);
        return;
    }
    LastSettingsLoadTimeSeconds = TimeStampSeconds;
    ServerLoadSettings();
    //return;    
}

function SaveSettings()
{
    local BrightSkinsSettings BrightSkins;
    local ColoredNamesSettings ColoredNames;
    local MiscSettings Misc;
    local int i;
    local float TimeStampSeconds;

    TimeStampSeconds = Level.TimeSeconds;
    // End:0x3D
    if((TimeStampSeconds - LastSettingsSaveTimeSeconds) < float(5))
    {
        class'Message_PlayerSettingsResult'.static.ClientReceive(self, 5);
        return;
    }
    LastSettingsSaveTimeSeconds = TimeStampSeconds;
    BrightSkins.bUseBrightSkins = class'Misc_Player'.default.bUseBrightSkins;
    BrightSkins.bUseTeamColors = class'Misc_Player'.default.bUseTeamColors;
    BrightSkins.RedOrEnemy = class'Misc_Player'.default.RedOrEnemy;
    BrightSkins.BlueOrAlly = class'Misc_Player'.default.BlueOrAlly;
    BrightSkins.Yellow = class'Misc_Player'.default.Yellow;
    BrightSkins.bUseTeamModels = class'Misc_Player'.default.bUseTeamModels;
    BrightSkins.bForceRedEnemyModel = class'Misc_Player'.default.bForceRedEnemyModel;
    BrightSkins.bForceBlueAllyModel = class'Misc_Player'.default.bForceBlueAllyModel;
    BrightSkins.RedEnemyModel = class'Misc_Player'.default.RedEnemyModel;
    BrightSkins.BlueAllyModel = class'Misc_Player'.default.BlueAllyModel;
    ColoredNames.bAllowColoredMessages = class'Misc_Player'.default.bAllowColoredMessages;
    ColoredNames.bEnableColoredNamesInTalk = class'Misc_Player'.default.bEnableColoredNamesInTalk;
    ColoredNames.bEnableColoredNamesOnEnemies = class'Misc_Player'.default.bEnableColoredNamesOnEnemies;
    i = 0;
    J0x1A4:
    // End:0x1DF [Loop If]
    if(i < 20)
    {
        ColoredNames.colorname[i] = class'Misc_Player'.default.colorname[i];
        ++ i;
        // [Loop Continue]
        goto J0x1A4;
    }
    ColoredNames.bEnableTeamColoredDeaths = class'Misc_DeathMessage'.default.bEnableTeamColoredDeaths;
    ColoredNames.bDrawColoredNamesInDeathMessages = class'Misc_DeathMessage'.default.bDrawColoredNamesInDeathMessages;
    ColoredNames.bEnableColoredNamesOnHUD = class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD;
    ColoredNames.bEnableColoredNamesOnScoreboard = class'TAM_Scoreboard'.default.bEnableColoredNamesOnScoreboard;
    Misc.bDisableSpeed = class'Misc_Player'.default.bDisableSpeed;
    Misc.bDisableBooster = class'Misc_Player'.default.bDisableBooster;
    Misc.bDisableBerserk = class'Misc_Player'.default.bDisableBerserk;
    Misc.bDisableInvis = class'Misc_Player'.default.bDisableInvis;
    Misc.bMatchHUDToSkins = class'Misc_Player'.default.bMatchHUDToSkins;
    Misc.bShowTeamInfo = class'Misc_Player'.default.bShowTeamInfo;
    Misc.bShowCombos = class'Misc_Player'.default.bShowCombos;
    Misc.bExtendedInfo = class'Misc_Player'.default.bExtendedInfo;
    Misc.bPlayOwnFootsteps = class'Misc_Pawn'.default.bPlayOwnFootsteps;
    Misc.bAutoScreenShot = class'Misc_Player'.default.bAutoScreenShot;
    Misc.bUseHitSounds = class'Misc_Player'.default.bUseHitSounds;
    Misc.bEnableEnhancedNetCode = class'Misc_Player'.default.bEnableEnhancedNetCode;
    Misc.bDisableEndCeremonySound = class'Misc_Player'.default.bDisableEndCeremonySound;
    Misc.SoundHitVolume = class'Misc_Player'.default.SoundHitVolume;
    Misc.SoundAloneVolume = class'Misc_Player'.default.SoundAloneVolume;
    Misc.AutoSyncSettings = class'Misc_Player'.default.AutoSyncSettings;
    ServerSaveSettings(BrightSkins, ColoredNames, Misc);
    //return;    
}

function ServerReportNewNetStats(bool Enable)
{
    bReportNewNetStats = Enable;
    //return;    
}

function NotifyServerStartFire(float ClientTimeStamp, float ServerTimeStamp, float AverDT)
{
    local Color Color;
    local string Text, Number;

    Color = class'Canvas'.static.MakeColor(100, 100, 210);
    Text = class'DMStatsScreen'.static.MakeColorCode(Color);
    Color = class'Canvas'.static.MakeColor(210, 0, 0);
    Number = class'DMStatsScreen'.static.MakeColorCode(Color);
    // End:0x77
    if(!bReportNewNetStats)
    {
        return;
    }
    ClientMessage((((((((((((((((("StartFire: " $ Text) $ "Delta=") $ Number) $ string(ClientTimeStamp - ServerTimeStamp)) $ Text) $ " ClientTS=") $ Number) $ string(ClientTimeStamp)) $ Text) $ " ServerTS=") $ Number) $ string(ServerTimeStamp)) $ Text) $ " AverDT=") $ Number) $ string(AverDT)) $ Text);
    //return;    
}

state Spectating
{
    ignores SwitchWeapon, RestartLevel, ClientReStart, Suicide, ThrowWeapon;

    exec function Fire(optional float F)
    {
        // End:0x33
        if(bFrozen)
        {
            // End:0x31
            if((TimerRate <= 0.0) || TimerRate > 1.0)
            {
                bFrozen = false;
            }
            return;
        }
        ServerViewNextPlayer();
        //return;        
    }

    exec function AltFire(optional float F)
    {
        // End:0x76
        if(((!PlayerReplicationInfo.bOnlySpectator && !PlayerReplicationInfo.bAdmin) && Level.NetMode != NM_Standalone) && GameReplicationInfo.bTeamGame)
        {
            // End:0x6D
            if(ViewTarget == none)
            {
                Fire();
            }
            // End:0x73
            else
            {
                ToggleBehindView();
            }
        }
        // End:0x84
        else
        {
            bBehindView = false;
            ServerViewSelf();
        }
        //return;        
    }

    function Timer()
    {
        bFrozen = false;
        //return;        
    }

    function BeginState()
    {
        // End:0x22
        if(Pawn != none)
        {
            SetLocation(Pawn.Location);
            UnPossess();
        }
        bCollideWorld = true;
        CameraDist = default.CameraDist;
        //return;        
    }

    function EndState()
    {
        PlayerReplicationInfo.bIsSpectator = false;
        bCollideWorld = false;
        //return;        
    }
    stop;    
}

state GameEnded
{
    function BeginState()
    {
        super.BeginState();
        // End:0x21
        if(Level.NetMode == NM_DedicatedServer)
        {
            return;
        }
        // End:0x4E
        if(myHUD != none)
        {
            myHUD.bShowScoreBoard = false;
            myHUD.bShowLocalStats = false;
        }
        bBehindView = true;
        ClientSetBehindView(true);
        SetTimer(1.0, false);
        //return;        
    }

    function Timer()
    {
        // End:0x25
        if(class'Misc_Player'.default.bAutoScreenShot && !bShotTaken)
        {
            TakeShot();
        }
        super.Timer();
        //return;        
    }
    stop;    
}

defaultproperties
{
    bShowCombos=true
    bShowTeamInfo=true
    bExtendedInfo=true
    bUseBrightSkins=true
    bUseTeamColors=true
    RedOrEnemy=(R=100,G=0,B=0,A=128)
    BlueOrAlly=(R=0,G=25,B=100,A=128)
    Yellow=(R=0,G=100,B=0,A=128)
    bUseTeamModels=true
    RedEnemyModel="Gorge"
    BlueAllyModel="Jakob"
    bAnnounceOverkill=true
    bUseHitSounds=true
    SoundHit=Sound'Sounds.HitSound'
    SoundHitFriendly=Sound'MenuSounds.denied1'
    SoundHitVolume=0.60
    SoundAlone=Sound'Sounds.alone'
    SoundAloneVolume=1.0
    SoundUnlock=Sound'NewWeaponSounds.Newclickgrenade'
    SoundSpawnProtection=Sound'Sounds.Bleep'
    bEnableEnhancedNetCode=true
    ShowInitialMenu=1
    Menu3SPNKey=118
    EndCeremonyAnimNames(0)=gesture_point
    EndCeremonyAnimNames(1)=gesture_beckon
    EndCeremonyAnimNames(2)=gesture_halt
    EndCeremonyAnimNames(3)=gesture_cheer
    EndCeremonyAnimNames(4)=PThrust
    EndCeremonyAnimNames(5)=AssSmack
    EndCeremonyAnimNames(6)=ThroatCut
    EndCeremonyAnimNames(7)=Specific_1
    EndCeremonyAnimNames(8)=Gesture_Taunt01
    EndCeremonyWeaponNames(0)="xWeapons.ShockRifle"
    EndCeremonyWeaponNames(1)="xWeapons.LinkGun"
    EndCeremonyWeaponNames(2)="xWeapons.MiniGun"
    EndCeremonyWeaponNames(3)="xWeapons.FlakCannon"
    EndCeremonyWeaponNames(4)="xWeapons.RocketLauncher"
    EndCeremonyWeaponNames(5)="xWeapons.SniperRifle"
    EndCeremonyWeaponNames(6)="xWeapons.BioRifle"
    EndCeremonyWeaponClasses(0)=class'ShockRifle'
    EndCeremonyWeaponClasses(1)=class'LinkGun'
    EndCeremonyWeaponClasses(2)=class'Minigun'
    EndCeremonyWeaponClasses(3)=class'FlakCannon'
    EndCeremonyWeaponClasses(4)=class'RocketLauncher'
    EndCeremonyWeaponClasses(5)=class'SniperRifle'
    EndCeremonyWeaponClasses(6)=class'BioRifle'
    RedMessageColor=(R=255,G=64,B=64,A=200)
    GreenMessageColor=(R=128,G=200,B=128,A=200)
    BlueMessageColor=(R=125,G=200,B=253,A=200)
    YellowMessageColor=(R=200,G=200,B=1,A=200)
    WhiteMessageColor=(R=200,G=200,B=200,A=200)
    WhiteColor=(R=255,G=255,B=255,A=255)
    bAllowColoredMessages=true
    bEnableColoredNamesInTalk=true
    CurrentSelectedColoredName=255
    colorname[0]=(R=255,G=255,B=255,A=255)
    colorname[1]=(R=255,G=255,B=255,A=255)
    colorname[2]=(R=255,G=255,B=255,A=255)
    colorname[3]=(R=255,G=255,B=255,A=255)
    colorname[4]=(R=255,G=255,B=255,A=255)
    colorname[5]=(R=255,G=255,B=255,A=255)
    colorname[6]=(R=255,G=255,B=255,A=255)
    colorname[7]=(R=255,G=255,B=255,A=255)
    colorname[8]=(R=255,G=255,B=255,A=255)
    colorname[9]=(R=255,G=255,B=255,A=255)
    colorname[10]=(R=255,G=255,B=255,A=255)
    colorname[11]=(R=255,G=255,B=255,A=255)
    colorname[12]=(R=255,G=255,B=255,A=255)
    colorname[13]=(R=255,G=255,B=255,A=255)
    colorname[14]=(R=255,G=255,B=255,A=255)
    colorname[15]=(R=255,G=255,B=255,A=255)
    colorname[16]=(R=255,G=255,B=255,A=255)
    colorname[17]=(R=255,G=255,B=255,A=255)
    colorname[18]=(R=255,G=255,B=255,A=255)
    colorname[19]=(R=255,G=255,B=255,A=255)
    AutoSyncSettings=true
    LastSettingsLoadTimeSeconds=-100.0
    LastSettingsSaveTimeSeconds=-100.0
    PlayerReplicationInfoClass=class'Misc_PRI'
    Adrenaline=0.10
}