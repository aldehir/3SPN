/*******************************************************************************
 * NewNet_RocketLauncher generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class NewNet_RocketLauncher extends RocketLauncher
    config(User)
    hidedropdown
    cacheexempt;

const MAX_PROJECTILE_FUDGE = 0.075;
const MAX_PROJECTILE_FUDGE_ALT = 0.075;
const PROJ_TIMESTEP = 0.0201;

struct ReplicatedRotator
{
    var int Yaw;
    var int Pitch;
};

struct ReplicatedVector
{
    var float X;
    var float Y;
    var float Z;
};

var NewNet_TimeStamp t;
var TAM_Mutator M;
var float PingDT;
var bool bUseEnhancedNetCode;

replication
{
    // Pos:0x000
    reliable if(Role < ROLE_Authority)
        NewNet_ServerStartFire
}

function DisableNet()
{
    NewNet_RocketFire(FireMode[0]).bUseEnhancedNetCode = false;
    NewNet_RocketMultiFire(FireMode[1]).bUseEnhancedNetCode = false;
    bUseEnhancedNetCode = false;
    PingDT = 0.0;
    //return;    
}

simulated function float RateSelf()
{
    // End:0x11
    if(Instigator == none)
    {
        return -2.0;
    }
    return super(Weapon).RateSelf();
    //return;    
}

simulated function BringUp(optional Weapon PrevWeapon)
{
    // End:0x0D
    if(Instigator == none)
    {
        return;
    }
    super.BringUp(PrevWeapon);
    //return;    
}

simulated function bool PutDown()
{
    // End:0x0D
    if(Instigator == none)
    {
        return false;
    }
    return super(Weapon).PutDown();
    //return;    
}

simulated event ClientStartFire(int Mode)
{
    // End:0x3D
    if((Level.NetMode != NM_Client) || !class'Misc_Player'.static.UseNewNet())
    {
        super.ClientStartFire(Mode);
    }
    // End:0x48
    else
    {
        NewNet_ClientStartFire(Mode);
    }
    //return;    
}

simulated event NewNet_ClientStartFire(int Mode)
{
    local int OtherMode;

    // End:0x20
    if(RocketMultiFire(FireMode[Mode]) != none)
    {
        SetTightSpread(false);
    }
    // End:0x123
    else
    {
        // End:0x35
        if(Mode == 0)
        {
            OtherMode = 1;
        }
        // End:0x3C
        else
        {
            OtherMode = 0;
        }
        // End:0x123
        if(FireMode[OtherMode].bIsFiring || FireMode[OtherMode].NextFireTime > Level.TimeSeconds)
        {
            // End:0xA0
            if(FireMode[OtherMode].load > float(0))
            {
                SetTightSpread(true);
            }
            // End:0x121
            if(bDebugging)
            {
                LogInternal((("No RL reg fire because other firing " $ string(FireMode[OtherMode].bIsFiring)) $ " next fire ") $ string(FireMode[OtherMode].NextFireTime - Level.TimeSeconds));
            }
            return;
        }
    }
    NewNet_AltClientStartFire(Mode);
    //return;    
}

simulated function NewNet_AltClientStartFire(int Mode)
{
    local ReplicatedRotator R;
    local ReplicatedVector V;
    local Vector Start;

    // End:0x48
    if(Pawn(Owner).Controller.IsInState('GameEnded') || Pawn(Owner).Controller.IsInState('RoundEnded'))
    {
        return;
    }
    // End:0x1A4
    if(Role < ROLE_Authority)
    {
        // End:0x1A1
        if(StartFire(Mode))
        {
            // End:0x86
            if(t == none)
            {
                // End:0x85
                foreach DynamicActors(class'NewNet_TimeStamp', t)
                {
                    // End:0x85
                    break;                    
                }                
            }
            // End:0xB6
            if(NewNet_RocketFire(FireMode[Mode]) != none)
            {
                NewNet_RocketFire(FireMode[Mode]).DoInstantFireEffect();
            }
            R.Pitch = Pawn(Owner).Controller.Rotation.Pitch;
            R.Yaw = Pawn(Owner).Controller.Rotation.Yaw;
            Start = Pawn(Owner).Location + Pawn(Owner).EyePosition();
            V.X = Start.X;
            V.Y = Start.Y;
            V.Z = Start.Z;
            NewNet_ServerStartFire(byte(Mode), t.ClientTimeStamp, R, V);
        }
    }
    // End:0x1AF
    else
    {
        StartFire(Mode);
    }
    //return;    
}

simulated function bool AltReadyToFire(int Mode)
{
    local int alt;
    local float F;

    F = 0.0150;
    // End:0x1D
    if(!ReadyToFire(Mode))
    {
        return false;
    }
    // End:0x32
    if(Mode == 0)
    {
        alt = 1;
    }
    // End:0x39
    else
    {
        alt = 0;
    }
    // End:0xEC
    if(((((FireMode[alt] != FireMode[Mode]) && FireMode[alt].bModeExclusive) && FireMode[alt].bIsFiring) || !FireMode[Mode].AllowFire()) || FireMode[Mode].NextFireTime > ((Level.TimeSeconds + FireMode[Mode].PreFireTime) - F))
    {
        return false;
    }
    return true;
    //return;    
}

function NewNet_ServerStartFire(byte Mode, float ClientTimeStamp, ReplicatedRotator R, ReplicatedVector V)
{
    // End:0x20
    if(M == none)
    {
        // End:0x1F
        foreach DynamicActors(class'TAM_Mutator', M)
        {
            // End:0x1F
            break;            
        }        
    }
    // End:0x92
    if((Team_GameBase(Level.Game) != none) && Misc_Player(Instigator.Controller) != none)
    {
        Misc_Player(Instigator.Controller).NotifyServerStartFire(ClientTimeStamp, M.ClientTimeStamp, M.AverDT);
    }
    // End:0xF6
    if((Instigator != none) && Instigator.Weapon != self)
    {
        // End:0xDB
        if(Instigator.Weapon == none)
        {
            Instigator.ServerChangedWeapon(none, self);
        }
        // End:0xF4
        else
        {
            Instigator.Weapon.SynchronizeWeapon(self);
        }
        return;
    }
    PingDT = FMin((M.ClientTimeStamp - ClientTimeStamp) + (1.750 * M.AverDT), 0.0750);
    bUseEnhancedNetCode = true;
    // End:0x170
    if(NewNet_RocketFire(FireMode[Mode]) != none)
    {
        NewNet_RocketFire(FireMode[Mode]).bUseEnhancedNetCode = true;
    }
    // End:0x1A6
    else
    {
        // End:0x1A6
        if(NewNet_RocketMultiFire(FireMode[Mode]) != none)
        {
            NewNet_RocketMultiFire(FireMode[Mode]).bUseEnhancedNetCode = true;
        }
    }
    // End:0x367
    if((FireMode[Mode].NextFireTime <= (Level.TimeSeconds + FireMode[Mode].PreFireTime)) && StartFire(Mode))
    {
        FireMode[Mode].ServerStartFireTime = Level.TimeSeconds;
        FireMode[Mode].bServerDelayStartFire = false;
        // End:0x364
        if(NewNet_RocketFire(FireMode[Mode]) != none)
        {
            NewNet_RocketFire(FireMode[Mode]).savedVec.X = V.X;
            NewNet_RocketFire(FireMode[Mode]).savedVec.Y = V.Y;
            NewNet_RocketFire(FireMode[Mode]).savedVec.Z = V.Z;
            NewNet_RocketFire(FireMode[Mode]).SavedRot.Yaw = R.Yaw;
            NewNet_RocketFire(FireMode[Mode]).SavedRot.Pitch = R.Pitch;
            NewNet_RocketFire(FireMode[Mode]).bUseReplicatedInfo = IsReasonable(NewNet_RocketFire(FireMode[Mode]).savedVec);
        }
    }
    // End:0x3B7
    else
    {
        // End:0x39D
        if(FireMode[Mode].AllowFire())
        {
            FireMode[Mode].bServerDelayStartFire = true;
        }
        // End:0x3B7
        else
        {
            ClientForceAmmoUpdate(Mode, AmmoAmount(Mode));
        }
    }
    //return;    
}

function bool IsReasonable(Vector V)
{
    local Vector LocDiff;
    local float clErr;

    // End:0x1F
    if((Owner == none) || Pawn(Owner) == none)
    {
        return true;
    }
    LocDiff = V - (Pawn(Owner).Location + Pawn(Owner).EyePosition());
    clErr = LocDiff Dot LocDiff;
    return clErr < 750.0;
    //return;    
}

function Projectile SpawnProjectile(Vector Start, Rotator Dir)
{
    local RocketProj Rocket;
    local SeekingRocketProj SeekingRocket;
    local Bot B;
    local Actor Other;
    local float F, G;
    local Vector HitNormal, End, HitLocation;

    // End:0x1C
    if(!bUseEnhancedNetCode)
    {
        return super.SpawnProjectile(Start, Dir);
    }
    bBreakLock = true;
    B = Bot(Instigator.Controller);
    // End:0x16F
    if((((((((B != none) && B.Skill > (float(2) + (float(5) * FRand()))) && FRand() < 0.60) && B.Target != none) && B.Target == B.Enemy) && VSize(B.Enemy.Location - B.Pawn.Location) > (float(2000) + (float(2000) * FRand()))) && (Level.TimeSeconds - B.LastSeenTime) < 0.40) && (Level.TimeSeconds - B.AcquireTime) > 1.50)
    {
        bLockedOn = true;
        SeekTarget = B.Enemy;
    }
    // End:0x387
    if(bLockedOn && SeekTarget != none)
    {
        // End:0x32B
        if((PingDT > 0.0) && Owner != none)
        {
            Start -= (1.0 * vector(Dir));
            F = 0.0;
            J0x1C1:
            // End:0x260 [Loop If]
            if(F < (PingDT + 0.02010))
            {
                G = FMin(PingDT, F);
                End = Start + (Extrapolate(Dir, 0.02010));
                TimeTravel(PingDT - G);
                Other = DoTimeTravelTrace(HitLocation, HitNormal, End, Start);
                // End:0x246
                if(Other != none)
                {
                    // [Explicit Break]
                    goto J0x260;
                }
                Start = End;
                F += 0.02010;
                J0x260:
                // [Loop Continue]
                goto J0x1C1;
            }
            UnTimeTravel();
            // End:0x2D9
            if((Other != none) && Other.UnresolvedNativeFunction_97('NewNet_PawnCollisionCopy'))
            {
                HitLocation = (HitLocation + NewNet_PawnCollisionCopy(Other).CopiedPawn.Location) - Other.Location;
                Other = NewNet_PawnCollisionCopy(Other).CopiedPawn;
            }
            // End:0x301
            if(Other == none)
            {
                SeekingRocket = UnresolvedNativeFunction_97(class'NewNet_SeekingRocketProj',,, End, Dir);
            }
            // End:0x32B
            else
            {
                SeekingRocket = UnresolvedNativeFunction_97(class'NewNet_SeekingRocketProj',,, HitLocation - (vector(Dir) * 20.0), Dir);
            }
        }
        // End:0x350
        if(SeekingRocket == none)
        {
            SeekingRocket = UnresolvedNativeFunction_97(class'NewNet_SeekingRocketProj',,, Start, Dir);
        }
        SeekingRocket.Seeking = SeekTarget;
        // End:0x37E
        if(B != none)
        {
            bLockedOn = false;
            SeekTarget = none;
        }
        return SeekingRocket;
    }
    // End:0x550
    else
    {
        // End:0x530
        if((PingDT > 0.0) && Owner != none)
        {
            Start -= (1.0 * vector(Dir));
            F = 0.0;
            J0x3C3:
            // End:0x462 [Loop If]
            if(F < (PingDT + 0.02010))
            {
                G = FMin(PingDT, F);
                End = Start + (Extrapolate(Dir, 0.02010));
                TimeTravel(PingDT - G);
                Other = DoTimeTravelTrace(HitLocation, HitNormal, End, Start);
                // End:0x448
                if(Other != none)
                {
                    // [Explicit Break]
                    goto J0x462;
                }
                Start = End;
                F += 0.02010;
                J0x462:
                // [Loop Continue]
                goto J0x3C3;
            }
            UnTimeTravel();
            // End:0x4DB
            if((Other != none) && Other.UnresolvedNativeFunction_97('NewNet_PawnCollisionCopy'))
            {
                HitLocation = (HitLocation + NewNet_PawnCollisionCopy(Other).CopiedPawn.Location) - Other.Location;
                Other = NewNet_PawnCollisionCopy(Other).CopiedPawn;
            }
            // End:0x503
            if(Other == none)
            {
                Rocket = UnresolvedNativeFunction_97(class'NewNet_RocketProj',,, End, Dir);
            }
            // End:0x52D
            else
            {
                Rocket = UnresolvedNativeFunction_97(class'NewNet_RocketProj',,, HitLocation - (vector(Dir) * 20.0), Dir);
            }
        }
        // End:0x54A
        else
        {
            Rocket = UnresolvedNativeFunction_97(class'NewNet_RocketProj',,, Start, Dir);
        }
        return Rocket;
    }
    //return;    
}

function Vector Extrapolate(out Rotator Dir, float dF)
{
    return (vector(Dir) * class'NewNet_RocketProj'.default.Speed) * dF;
    //return;    
}

function Actor DoTimeTravelTrace(out Vector HitLocation, out Vector HitNormal, Vector End, Vector Start)
{
    local Actor Other;
    local bool bFoundPCC;
    local Vector NewEnd, WorldHitNormal, WorldHitLocation, PCCHitNormal, PCCHitLocation;

    local NewNet_PawnCollisionCopy PCC, returnPCC;

    // End:0x8D
    foreach Owner.TraceActors(class'Actor', Other, WorldHitLocation, WorldHitNormal, End, Start)
    {
        // End:0x85
        if(((Other.bBlockActors || Other.bProjTarget) || Other.bWorldGeometry) && !class'TAM_Mutator'.static.IsPredicted(Other))
        {
            // End:0x8D
            break;
        }
        Other = none;        
    }    
    // End:0xA7
    if(Other != none)
    {
        NewEnd = WorldHitLocation;
    }
    // End:0xB2
    else
    {
        NewEnd = End;
    }
    // End:0x131
    foreach Owner.TraceActors(class'NewNet_PawnCollisionCopy', PCC, PCCHitLocation, PCCHitNormal, NewEnd, Start)
    {
        // End:0x130
        if(((PCC != none) && PCC.CopiedPawn != none) && PCC.CopiedPawn != Instigator)
        {
            bFoundPCC = true;
            returnPCC = PCC;
            // End:0x131
            break;
        }        
    }    
    // End:0x15A
    if(bFoundPCC)
    {
        HitLocation = PCCHitLocation;
        HitNormal = PCCHitNormal;
        return returnPCC;
    }
    // End:0x176
    else
    {
        HitLocation = WorldHitLocation;
        HitNormal = WorldHitNormal;
        return Other;
    }
    //return;    
}

function TimeTravel(float Delta)
{
    local NewNet_PawnCollisionCopy PCC;

    // End:0x20
    if(M == none)
    {
        // End:0x1F
        foreach DynamicActors(class'TAM_Mutator', M)
        {
            // End:0x1F
            break;            
        }        
    }
    PCC = M.PCC;
    J0x34:
    // End:0x6A [Loop If]
    if(PCC != none)
    {
        PCC.TimeTravelPawn(Delta);
        PCC = PCC.Next;
        // [Loop Continue]
        goto J0x34;
    }
    //return;    
}

function UnTimeTravel()
{
    local NewNet_PawnCollisionCopy PCC;

    PCC = M.PCC;
    J0x14:
    // End:0x45 [Loop If]
    if(PCC != none)
    {
        PCC.TurnOffCollision();
        PCC = PCC.Next;
        // [Loop Continue]
        goto J0x14;
    }
    //return;    
}

defaultproperties
{
    FireModeClass[0]=class'NewNet_RocketFire'
    FireModeClass[1]=class'NewNet_RocketMultiFire'
}