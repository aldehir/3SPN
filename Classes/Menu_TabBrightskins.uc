/*******************************************************************************
 * Menu_TabBrightskins generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Menu_TabBrightskins extends UT2K3TabPanel
    dependson(Menu_Menu3SPN)
    editinlinenew
    instanced;

var SpinnyWeap RedSpinnyDude;
var SpinnyWeap BlueSpinnyDude;
var SpinnyWeap YellowSpinnyDude;
var Vector RedSpinnyOffset;
var Vector BlueSpinnyOffset;
var Vector YellowSpinnyOffset;
var bool bBrightSkins;
var array<string> Models;
var string RedPick;
var string BluePick;
var export editinline GUITreeListBox RedMLB;
var export editinline GUITreeList RedML;
var export editinline GUITreeListBox BlueMLB;
var export editinline GUITreeList BlueML;

function InitComponent(GUIController MyController, GUIComponent MyOwner)
{
    local Misc_Player P;
    local int i;
    local bool OldDirty;

    super(GUIPanel).InitComponent(MyController, MyOwner);
    P = Misc_Player(PlayerOwner());
    // End:0x2B
    if(P == none)
    {
        return;
    }
    OldDirty = class'Menu_Menu3SPN'.default.SettingsDirty;
    moCheckBox(Controls[1]).Checked(!class'Misc_Player'.default.bUseBrightSkins);
    moCheckBox(Controls[2]).Checked(!class'Misc_Player'.default.bUseTeamColors);
    GUISlider(Controls[5]).Value = float(class'Misc_Player'.default.RedOrEnemy.R);
    GUISlider(Controls[6]).Value = float(class'Misc_Player'.default.RedOrEnemy.G);
    GUISlider(Controls[7]).Value = float(class'Misc_Player'.default.RedOrEnemy.B);
    GUISlider(Controls[8]).Value = float(class'Misc_Player'.default.BlueOrAlly.R);
    GUISlider(Controls[9]).Value = float(class'Misc_Player'.default.BlueOrAlly.G);
    GUISlider(Controls[10]).Value = float(class'Misc_Player'.default.BlueOrAlly.B);
    GUISlider(Controls[25]).Value = float(class'Misc_Player'.default.Yellow.R);
    GUISlider(Controls[26]).Value = float(class'Misc_Player'.default.Yellow.G);
    GUISlider(Controls[27]).Value = float(class'Misc_Player'.default.Yellow.B);
    RedSpinnyDude = P.Spawn(class'SpinnyWeap');
    RedSpinnyDude.SetDrawType(2);
    RedSpinnyDude.bPlayRandomAnims = true;
    RedSpinnyDude.SetDrawScale(0.20);
    RedSpinnyDude.spinRate = 12000;
    BlueSpinnyDude = P.Spawn(class'SpinnyWeap');
    BlueSpinnyDude.SetDrawType(2);
    BlueSpinnyDude.bPlayRandomAnims = true;
    BlueSpinnyDude.SetDrawScale(0.20);
    BlueSpinnyDude.spinRate = 12000;
    YellowSpinnyDude = P.Spawn(class'SpinnyWeap');
    YellowSpinnyDude.SetDrawType(2);
    YellowSpinnyDude.bPlayRandomAnims = true;
    YellowSpinnyDude.SetDrawScale(0.20);
    YellowSpinnyDude.spinRate = 12000;
    moCheckBox(Controls[20]).Checked(!class'Misc_Player'.default.bUseTeamModels);
    moCheckBox(Controls[21]).Checked(class'Misc_Player'.default.bForceRedEnemyModel);
    moCheckBox(Controls[22]).Checked(class'Misc_Player'.default.bForceBlueAllyModel);
    RedMLB = GUITreeListBox(Controls[23]);
    // End:0x416
    if(RedMLB != none)
    {
        RedML = RedMLB.List;
        // End:0x416
        if(RedMLB.MyScrollBar != none)
        {
            RedMLB.MyScrollBar.WinWidth = 0.0150;
        }
    }
    // End:0x520
    if(RedML != none)
    {
        RedML.__OnChange__Delegate = OnChange;
        RedML.bSorted = true;
        RedML.bNotify = false;
        RedML.Clear();
        i = 0;
        J0x46D:
        // End:0x4AC [Loop If]
        if(i < Models.Length)
        {
            RedML.AddItem(Models[i], Models[i]);
            ++ i;
            // [Loop Continue]
            goto J0x46D;
        }
        RedML.SortList();
        RedML.bNotify = true;
        i = RedML.FindIndex(class'Misc_Player'.default.RedEnemyModel);
        // End:0x515
        if(i != -1)
        {
            RedML.SilentSetIndex(i);
        }
        // End:0x520
        else
        {
            OnChange(RedML);
        }
    }
    BlueMLB = GUITreeListBox(Controls[24]);
    // End:0x583
    if(BlueMLB != none)
    {
        BlueML = BlueMLB.List;
        // End:0x583
        if(BlueMLB.MyScrollBar != none)
        {
            BlueMLB.MyScrollBar.WinWidth = 0.0150;
        }
    }
    // End:0x68D
    if(BlueML != none)
    {
        BlueML.__OnChange__Delegate = OnChange;
        BlueML.bSorted = true;
        BlueML.bNotify = false;
        BlueML.Clear();
        i = 0;
        J0x5DA:
        // End:0x619 [Loop If]
        if(i < Models.Length)
        {
            BlueML.AddItem(Models[i], Models[i]);
            ++ i;
            // [Loop Continue]
            goto J0x5DA;
        }
        BlueML.SortList();
        BlueML.bNotify = true;
        i = BlueML.FindIndex(class'Misc_Player'.default.BlueAllyModel);
        // End:0x682
        if(i != -1)
        {
            BlueML.SilentSetIndex(i);
        }
        // End:0x68D
        else
        {
            OnChange(BlueML);
        }
    }
    OnChange(Controls[1]);
    class'Menu_Menu3SPN'.default.SettingsDirty = OldDirty;
    //return;    
}

function HideSpinnyDudes(bool bHide)
{
    // End:0x21
    if(RedSpinnyDude != none)
    {
        RedSpinnyDude.bHidden = bHide;
    }
    // End:0x42
    if(BlueSpinnyDude != none)
    {
        BlueSpinnyDude.bHidden = bHide;
    }
    // End:0x63
    if(YellowSpinnyDude != none)
    {
        YellowSpinnyDude.bHidden = bHide;
    }
    //return;    
}

function string GetRandomModel()
{
    return Models[Rand(Models.Length)];
    //return;    
}

function UpdateSpinnyDudes()
{
    local Misc_Player P;
    local PlayerRecord Rec;
    local Mesh RedMesh, BlueMesh, YellowMesh;
    local Material RedBodySkin, RedHeadSkin, BlueBodySkin, BlueHeadSkin, YellowBodySkin, YellowHeadSkin;

    local Combiner RedC, BlueC, YellowC;
    local ConstantColor RedCC, BlueCC, YellowCC;
    local string BlueModel, RedModel, YellowModel;

    RedC = new (none) class'Combiner';
    RedCC = new (none) class'ConstantColor';
    BlueC = new (none) class'Combiner';
    BlueCC = new (none) class'ConstantColor';
    YellowC = new (none) class'Combiner';
    YellowCC = new (none) class'ConstantColor';
    P = Misc_Player(PlayerOwner());
    // End:0x91
    if(class'Misc_Player'.default.bForceRedEnemyModel)
    {
        RedModel = class'Misc_Player'.default.RedEnemyModel;
    }
    // End:0xB7
    else
    {
        // End:0xAC
        if(RedPick == "")
        {
            RedModel = GetRandomModel();
        }
        // End:0xB7
        else
        {
            RedModel = RedPick;
        }
    }
    RedPick = RedModel;
    // End:0xEB
    if(class'Misc_Player'.default.bForceBlueAllyModel)
    {
        BlueModel = class'Misc_Player'.default.BlueAllyModel;
    }
    // End:0x111
    else
    {
        // End:0x106
        if(BluePick == "")
        {
            BlueModel = GetRandomModel();
        }
        // End:0x111
        else
        {
            BlueModel = BluePick;
        }
    }
    BluePick = BlueModel;
    YellowModel = GetRandomModel();
    Rec = class'xUtil'.static.FindPlayerRecord(RedModel);
    RedMesh = Mesh(DynamicLoadObject(Rec.MeshName, class'Mesh'));
    // End:0x1B1
    if(RedMesh == none)
    {
        Log((("Could not load mesh: " $ Rec.MeshName) $ " For player: ") $ Rec.DefaultName);
        return;
    }
    RedBodySkin = Material(DynamicLoadObject(Rec.BodySkinName, class'Material'));
    // End:0x229
    if(RedBodySkin == none)
    {
        Log((("Could not load body material: " $ Rec.BodySkinName) $ " For player: ") $ Rec.DefaultName);
        return;
    }
    RedHeadSkin = Material(DynamicLoadObject(Rec.FaceSkinName, class'Material'));
    // End:0x2A1
    if(RedHeadSkin == none)
    {
        Log((("Could not load head material: " $ Rec.FaceSkinName) $ " For player: ") $ Rec.DefaultName);
        return;
    }
    Rec = class'xUtil'.static.FindPlayerRecord(BlueModel);
    BlueMesh = Mesh(DynamicLoadObject(Rec.MeshName, class'Mesh'));
    // End:0x32A
    if(BlueMesh == none)
    {
        Log((("Could not load mesh: " $ Rec.MeshName) $ " For player: ") $ Rec.DefaultName);
        return;
    }
    BlueBodySkin = Material(DynamicLoadObject(Rec.BodySkinName, class'Material'));
    // End:0x3A2
    if(BlueBodySkin == none)
    {
        Log((("Could not load body material: " $ Rec.BodySkinName) $ " For player: ") $ Rec.DefaultName);
        return;
    }
    BlueHeadSkin = Material(DynamicLoadObject(Rec.FaceSkinName, class'Material'));
    // End:0x41A
    if(BlueHeadSkin == none)
    {
        Log((("Could not load head material: " $ Rec.FaceSkinName) $ " For player: ") $ Rec.DefaultName);
        return;
    }
    Rec = class'xUtil'.static.FindPlayerRecord(YellowModel);
    YellowMesh = Mesh(DynamicLoadObject(Rec.MeshName, class'Mesh'));
    // End:0x4A3
    if(YellowMesh == none)
    {
        Log((("Could not load mesh: " $ Rec.MeshName) $ " For player: ") $ Rec.DefaultName);
        return;
    }
    YellowBodySkin = Material(DynamicLoadObject(Rec.BodySkinName, class'Material'));
    // End:0x51B
    if(YellowBodySkin == none)
    {
        Log((("Could not load body material: " $ Rec.BodySkinName) $ " For player: ") $ Rec.DefaultName);
        return;
    }
    YellowHeadSkin = Material(DynamicLoadObject(Rec.FaceSkinName, class'Material'));
    // End:0x593
    if(YellowHeadSkin == none)
    {
        Log((("Could not load head material: " $ Rec.FaceSkinName) $ " For player: ") $ Rec.DefaultName);
        return;
    }
    RedCC.Color = class'Misc_Player'.default.RedOrEnemy;
    class'Misc_Pawn'.static.ClampColor(RedCC.Color);
    RedC.CombineOperation = 3;
    RedC.Material1 = RedBodySkin;
    RedC.Material2 = RedCC;
    RedSpinnyDude.LinkMesh(RedMesh);
    // End:0x63C
    if(bBrightSkins)
    {
        RedSpinnyDude.Skins[0] = RedC;
    }
    // End:0x664
    else
    {
        RedBodySkin = GetTeamSkin(RedBodySkin, 0);
        RedSpinnyDude.Skins[0] = RedBodySkin;
    }
    RedSpinnyDude.Skins[1] = RedHeadSkin;
    BlueCC.Color = class'Misc_Player'.default.BlueOrAlly;
    class'Misc_Pawn'.static.ClampColor(BlueCC.Color);
    BlueC.CombineOperation = 3;
    BlueC.Material1 = BlueBodySkin;
    BlueC.Material2 = BlueCC;
    BlueSpinnyDude.LinkMesh(BlueMesh);
    // End:0x723
    if(bBrightSkins)
    {
        BlueSpinnyDude.Skins[0] = BlueC;
    }
    // End:0x74B
    else
    {
        BlueBodySkin = GetTeamSkin(BlueBodySkin, 1);
        BlueSpinnyDude.Skins[0] = BlueBodySkin;
    }
    BlueSpinnyDude.Skins[1] = BlueHeadSkin;
    YellowCC.Color = class'Misc_Player'.default.Yellow;
    class'Misc_Pawn'.static.ClampColor(YellowCC.Color);
    YellowC.CombineOperation = 3;
    YellowC.Material1 = YellowBodySkin;
    YellowC.Material2 = YellowCC;
    YellowSpinnyDude.LinkMesh(YellowMesh);
    // End:0x80A
    if(bBrightSkins)
    {
        YellowSpinnyDude.Skins[0] = YellowC;
    }
    // End:0x832
    else
    {
        YellowBodySkin = GetTeamSkin(YellowBodySkin, 1);
        YellowSpinnyDude.Skins[0] = YellowBodySkin;
    }
    YellowSpinnyDude.Skins[1] = YellowHeadSkin;
    //return;    
}

function Material GetTeamSkin(Material Skin, int Team)
{
    local string MatS;
    local Material mat;

    MatS = string(Skin);
    mat = Material(DynamicLoadObject(((("Bright" $ MatS) $ "_") $ string(Team)) $ "B", class'Material', true));
    // End:0x7B
    if(mat == none)
    {
        mat = Material(DynamicLoadObject((MatS $ "_") $ string(Team), class'Material', true));
    }
    // End:0x8C
    if(mat == none)
    {
        return Skin;
    }
    return mat;
    //return;    
}

function OnChange(GUIComponent C)
{
    bBrightSkins = !moCheckBox(Controls[1]).IsChecked();
    switch(C)
    {
        // End:0x59
        case Controls[1]:
            class'Misc_Player'.default.bUseBrightSkins = !moCheckBox(C).IsChecked();
            // End:0x379
            break;
        // End:0x8D
        case Controls[2]:
            class'Misc_Player'.default.bUseTeamColors = !moCheckBox(C).IsChecked();
            // End:0x379
            break;
        // End:0xC4
        case Controls[5]:
            class'Misc_Player'.default.RedOrEnemy.R = byte(GUISlider(C).Value);
            // End:0x379
            break;
        // End:0xFB
        case Controls[6]:
            class'Misc_Player'.default.RedOrEnemy.G = byte(GUISlider(C).Value);
            // End:0x379
            break;
        // End:0x132
        case Controls[7]:
            class'Misc_Player'.default.RedOrEnemy.B = byte(GUISlider(C).Value);
            // End:0x379
            break;
        // End:0x169
        case Controls[8]:
            class'Misc_Player'.default.BlueOrAlly.R = byte(GUISlider(C).Value);
            // End:0x379
            break;
        // End:0x1A0
        case Controls[9]:
            class'Misc_Player'.default.BlueOrAlly.G = byte(GUISlider(C).Value);
            // End:0x379
            break;
        // End:0x1D7
        case Controls[10]:
            class'Misc_Player'.default.BlueOrAlly.B = byte(GUISlider(C).Value);
            // End:0x379
            break;
        // End:0x20E
        case Controls[25]:
            class'Misc_Player'.default.Yellow.R = byte(GUISlider(C).Value);
            // End:0x379
            break;
        // End:0x245
        case Controls[26]:
            class'Misc_Player'.default.Yellow.G = byte(GUISlider(C).Value);
            // End:0x379
            break;
        // End:0x27C
        case Controls[27]:
            class'Misc_Player'.default.Yellow.B = byte(GUISlider(C).Value);
            // End:0x379
            break;
        // End:0x2B0
        case Controls[20]:
            class'Misc_Player'.default.bUseTeamModels = !moCheckBox(C).IsChecked();
            // End:0x379
            break;
        // End:0x2EA
        case Controls[21]:
            class'Misc_Player'.default.bForceRedEnemyModel = moCheckBox(C).IsChecked();
            RedPick = "";
            // End:0x379
            break;
        // End:0x324
        case Controls[22]:
            class'Misc_Player'.default.bForceBlueAllyModel = moCheckBox(C).IsChecked();
            BluePick = "";
            // End:0x379
            break;
        // End:0x34D
        case RedML:
            class'Misc_Player'.default.RedEnemyModel = RedML.GetValue();
            // End:0x379
            break;
        // End:0x376
        case BlueML:
            class'Misc_Player'.default.BlueAllyModel = BlueML.GetValue();
            // End:0x379
            break;
        // End:0xFFFF
        default:
            Misc_Player(PlayerOwner()).ReloadDefaults();
            class'Misc_Player'.static.StaticSaveConfig();
            class'Menu_Menu3SPN'.default.SettingsDirty = true;
            UpdateSpinnyDudes();
            //return;
    }    
}

function bool InternalDraw(Canvas C)
{
    local Vector CamPos, X, Y, Z;
    local Rotator CamRot;

    C.GetCameraLocation(CamPos, CamRot);
    GetAxes(CamRot, X, Y, Z);
    // End:0x9C
    if(RedSpinnyDude != none)
    {
        RedSpinnyDude.SetLocation(((CamPos + (RedSpinnyOffset.X * X)) + (RedSpinnyOffset.Y * Y)) + (RedSpinnyOffset.Z * Z));
        C.DrawActor(RedSpinnyDude, false, true, 90.0);
    }
    // End:0x109
    if(BlueSpinnyDude != none)
    {
        BlueSpinnyDude.SetLocation(((CamPos + (BlueSpinnyOffset.X * X)) + (BlueSpinnyOffset.Y * Y)) + (BlueSpinnyOffset.Z * Z));
        C.DrawActor(BlueSpinnyDude, false, true, 90.0);
    }
    // End:0x176
    if(YellowSpinnyDude != none)
    {
        YellowSpinnyDude.SetLocation(((CamPos + (YellowSpinnyOffset.X * X)) + (YellowSpinnyOffset.Y * Y)) + (YellowSpinnyOffset.Z * Z));
        C.DrawActor(YellowSpinnyDude, false, true, 90.0);
    }
    return false;
    //return;    
}

function bool OnClick(GUIComponent C)
{
    local int i;

    class'Misc_Player'.default.RedOrEnemy.R = 100;
    class'Misc_Player'.default.RedOrEnemy.G = 0;
    class'Misc_Player'.default.RedOrEnemy.B = 0;
    class'Misc_Player'.default.BlueOrAlly.R = 0;
    class'Misc_Player'.default.BlueOrAlly.G = 25;
    class'Misc_Player'.default.BlueOrAlly.B = 100;
    class'Misc_Player'.default.Yellow.R = 0;
    class'Misc_Player'.default.Yellow.G = 100;
    class'Misc_Player'.default.Yellow.B = 0;
    class'Misc_Player'.default.bUseTeamColors = true;
    moCheckBox(Controls[2]).Checked(!class'Misc_Player'.default.bUseTeamColors);
    GUISlider(Controls[5]).Value = float(class'Misc_Player'.default.RedOrEnemy.R);
    GUISlider(Controls[6]).Value = float(class'Misc_Player'.default.RedOrEnemy.G);
    GUISlider(Controls[7]).Value = float(class'Misc_Player'.default.RedOrEnemy.B);
    GUISlider(Controls[8]).Value = float(class'Misc_Player'.default.BlueOrAlly.R);
    GUISlider(Controls[9]).Value = float(class'Misc_Player'.default.BlueOrAlly.G);
    GUISlider(Controls[10]).Value = float(class'Misc_Player'.default.BlueOrAlly.B);
    GUISlider(Controls[25]).Value = float(class'Misc_Player'.default.Yellow.R);
    GUISlider(Controls[26]).Value = float(class'Misc_Player'.default.Yellow.G);
    GUISlider(Controls[27]).Value = float(class'Misc_Player'.default.Yellow.B);
    moCheckBox(Controls[20]).Checked(false);
    moCheckBox(Controls[21]).Checked(false);
    moCheckBox(Controls[22]).Checked(false);
    i = 0;
    J0x2DA:
    // End:0x305 [Loop If]
    if(i < Controls.Length)
    {
        OnChange(Controls[i]);
        ++ i;
        // [Loop Continue]
        goto J0x2DA;
    }
    Misc_Player(PlayerOwner()).ReloadDefaults();
    class'Misc_Player'.static.StaticSaveConfig();
    class'Menu_Menu3SPN'.default.SettingsDirty = true;
    UpdateSpinnyDudes();
    return true;
    //return;    
}

function ShowPanel(bool bShow)
{
    super(GUITabPanel).ShowPanel(bShow);
    HideSpinnyDudes(!bShow);
    //return;    
}

defaultproperties
{
    RedSpinnyOffset=(X=150.0,Y=5.0,Z=20.0)
    BlueSpinnyOffset=(X=150.0,Y=5.0,Z=-10.0)
    YellowSpinnyOffset=(X=150.0,Y=5.0,Z=-40.0)
    Models(0)="Jakob"
    Models(1)="Tamika"
    Models(2)="Gorge"
    Models(3)="Sapphire"
    Models(4)="Malcolm"
    Models(5)="Brock"
    Models(6)="Gaargod"
    Models(7)="Rylisa"
    Models(8)="Ophelia"
    Models(9)="Zarina"
    Models(10)="Nebri"
    Models(11)="Subversa"
    Models(12)="Barktooth"
    Models(13)="Diva"
    Models(14)="Torch"
    Models(15)="Widowmaker"
    begin object name=TabBackground class=GUIImage
        Image=Texture'InterfaceContent.Menu.ScoreBoxA'
        ImageColor=(R=0,G=0,B=0,A=255)
        ImageStyle=1
        WinHeight=1.0
        bNeverFocus=true
    object end
    // Reference: GUIImage'Menu_TabBrightskins.TabBackground'
    Controls(0)=TabBackground
    begin object name=BrightskinsCheck class=moCheckBox
        Caption="Disable Brightskins."
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.050
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabBrightskins.BrightskinsCheck'
    Controls(1)=BrightskinsCheck
    begin object name=EnemyAllyCheck class=moCheckBox
        Caption="Force brightskin colors to Teammates and Enemies."
        OnCreateComponent=InternalOnCreateComponent
        Hint="When checked, Team and Enemy skin colors will always be the same regardless of whether you are on the red or blue team."
        WinTop=0.10
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabBrightskins.EnemyAllyCheck'
    Controls(2)=EnemyAllyCheck
    begin object name=RedLabel class=GUILabel
        Caption="Red Team (Enemies): "
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.210
        WinLeft=0.10
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.RedLabel'
    Controls(3)=RedLabel
    begin object name=BlueLabel class=GUILabel
        Caption="Blue Team (Teammates): "
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.450
        WinLeft=0.10
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.BlueLabel'
    Controls(4)=BlueLabel
    begin object name=RedRSlider class=GUISlider
        bIntSlider=true
        WinTop=0.260
        WinLeft=0.20
        WinWidth=0.260
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabBrightskins.RedRSlider'
    Controls(5)=RedRSlider
    begin object name=RedGSlider class=GUISlider
        bIntSlider=true
        WinTop=0.310
        WinLeft=0.20
        WinWidth=0.260
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabBrightskins.RedGSlider'
    Controls(6)=RedGSlider
    begin object name=RedBSlider class=GUISlider
        bIntSlider=true
        WinTop=0.360
        WinLeft=0.20
        WinWidth=0.260
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabBrightskins.RedBSlider'
    Controls(7)=RedBSlider
    begin object name=BlueRSlider class=GUISlider
        bIntSlider=true
        WinTop=0.50
        WinLeft=0.20
        WinWidth=0.260
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabBrightskins.BlueRSlider'
    Controls(8)=BlueRSlider
    begin object name=BlueGSlider class=GUISlider
        bIntSlider=true
        WinTop=0.550
        WinLeft=0.20
        WinWidth=0.260
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabBrightskins.BlueGSlider'
    Controls(9)=BlueGSlider
    begin object name=BlueBSlider class=GUISlider
        bIntSlider=true
        WinTop=0.60
        WinLeft=0.20
        WinWidth=0.260
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabBrightskins.BlueBSlider'
    Controls(10)=BlueBSlider
    begin object name=RedRLabel class=GUILabel
        Caption="R:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.260
        WinLeft=0.150
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.RedRLabel'
    Controls(11)=RedRLabel
    begin object name=RedGLabel class=GUILabel
        Caption="G:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.310
        WinLeft=0.150
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.RedGLabel'
    Controls(12)=RedGLabel
    begin object name=RedBLabel class=GUILabel
        Caption="B:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.360
        WinLeft=0.150
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.RedBLabel'
    Controls(13)=RedBLabel
    begin object name=BlueRLabel class=GUILabel
        Caption="R:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.50
        WinLeft=0.150
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.BlueRLabel'
    Controls(14)=BlueRLabel
    begin object name=BlueGLabel class=GUILabel
        Caption="G:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.550
        WinLeft=0.150
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.BlueGLabel'
    Controls(15)=BlueGLabel
    begin object name=BlueBLabel class=GUILabel
        Caption="B:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.60
        WinLeft=0.150
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.BlueBLabel'
    Controls(16)=BlueBLabel
    begin object name=RedColorView class=GUIImage
        Image=Texture'InterfaceContent.Menu.ScoreBoxA'
        ImageColor=(R=255,G=255,B=255,A=100)
        ImageStyle=1
        WinTop=0.20
        WinLeft=0.0750
        WinWidth=0.850
        WinHeight=0.220
        RenderWeight=1.0
        bNeverFocus=true
    object end
    // Reference: GUIImage'Menu_TabBrightskins.RedColorView'
    Controls(17)=RedColorView
    begin object name=BlueColorView class=GUIImage
        Image=Texture'InterfaceContent.Menu.ScoreBoxA'
        ImageColor=(R=255,G=255,B=255,A=100)
        ImageStyle=1
        WinTop=0.440
        WinLeft=0.0750
        WinWidth=0.850
        WinHeight=0.220
        RenderWeight=1.0
        bNeverFocus=true
    object end
    // Reference: GUIImage'Menu_TabBrightskins.BlueColorView'
    Controls(18)=BlueColorView
    begin object name=DefaultButton class=GUIButton
        Caption="Load Defaults."
        StyleName="SquareMenuButton"
        WinTop=0.920
        WinLeft=0.150
        WinWidth=0.70
        WinHeight=0.060
        OnClick=OnClick
        OnKeyEvent=InternalOnKeyEvent
    object end
    // Reference: GUIButton'Menu_TabBrightskins.DefaultButton'
    Controls(19)=DefaultButton
    begin object name=EnemyAllyMCheck class=moCheckBox
        Caption="Force models to Teammates and Enemies."
        OnCreateComponent=InternalOnCreateComponent
        Hint="When checked, Team and Enemy models will always be the same regardless of whether you are on the red or blue team."
        WinTop=0.150
        WinLeft=0.10
        WinWidth=0.80
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabBrightskins.EnemyAllyMCheck'
    Controls(20)=EnemyAllyMCheck
    begin object name=ForceRedMCheck class=moCheckBox
        Caption="Force Model"
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.210
        WinLeft=0.60
        WinWidth=0.30
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabBrightskins.ForceRedMCheck'
    Controls(21)=ForceRedMCheck
    begin object name=ForceBlueMCheck class=moCheckBox
        Caption="Force Model"
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.450
        WinLeft=0.60
        WinWidth=0.30
        OnChange=OnChange
    object end
    // Reference: moCheckBox'Menu_TabBrightskins.ForceBlueMCheck'
    Controls(22)=ForceBlueMCheck
    begin object name=RUseableModels class=GUITreeListBox
        bVisibleWhenEmpty=true
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.270
        WinLeft=0.60
        WinWidth=0.30
        WinHeight=0.130
        bBoundToParent=true
        bScaleToParent=true
        OnChange=OnChange
    object end
    // Reference: GUITreeListBox'Menu_TabBrightskins.RUseableModels'
    Controls(23)=RUseableModels
    begin object name=BUseableModels class=GUITreeListBox
        bVisibleWhenEmpty=true
        OnCreateComponent=InternalOnCreateComponent
        WinTop=0.510
        WinLeft=0.60
        WinWidth=0.30
        WinHeight=0.130
        bBoundToParent=true
        bScaleToParent=true
        OnChange=OnChange
    object end
    // Reference: GUITreeListBox'Menu_TabBrightskins.BUseableModels'
    Controls(24)=BUseableModels
    begin object name=YellowRSlider class=GUISlider
        bIntSlider=true
        WinTop=0.740
        WinLeft=0.20
        WinWidth=0.260
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabBrightskins.YellowRSlider'
    Controls(25)=YellowRSlider
    begin object name=YellowGSlider class=GUISlider
        bIntSlider=true
        WinTop=0.790
        WinLeft=0.20
        WinWidth=0.260
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabBrightskins.YellowGSlider'
    Controls(26)=YellowGSlider
    begin object name=YellowBSlider class=GUISlider
        bIntSlider=true
        WinTop=0.840
        WinLeft=0.20
        WinWidth=0.260
        OnClick=InternalOnClick
        OnMousePressed=InternalOnMousePressed
        OnMouseRelease=InternalOnMouseRelease
        OnChange=OnChange
        OnKeyEvent=InternalOnKeyEvent
        OnCapturedMouseMove=InternalCapturedMouseMove
    object end
    // Reference: GUISlider'Menu_TabBrightskins.YellowBSlider'
    Controls(27)=YellowBSlider
    begin object name=YellowLabel class=GUILabel
        Caption="Spawn Protected Enemies: "
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.690
        WinLeft=0.10
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.YellowLabel'
    Controls(28)=YellowLabel
    begin object name=YellowRLabel class=GUILabel
        Caption="R:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.740
        WinLeft=0.150
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.YellowRLabel'
    Controls(29)=YellowRLabel
    begin object name=YellowGLabel class=GUILabel
        Caption="G:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.790
        WinLeft=0.150
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.YellowGLabel'
    Controls(30)=YellowGLabel
    begin object name=YellowBLabel class=GUILabel
        Caption="B:"
        TextColor=(R=255,G=255,B=255,A=255)
        WinTop=0.840
        WinLeft=0.150
        WinHeight=20.0
    object end
    // Reference: GUILabel'Menu_TabBrightskins.YellowBLabel'
    Controls(31)=YellowBLabel
    begin object name=YellowColorView class=GUIImage
        Image=Texture'InterfaceContent.Menu.ScoreBoxA'
        ImageColor=(R=255,G=255,B=255,A=100)
        ImageStyle=1
        WinTop=0.680
        WinLeft=0.0750
        WinWidth=0.850
        WinHeight=0.220
        RenderWeight=1.0
        bNeverFocus=true
    object end
    // Reference: GUIImage'Menu_TabBrightskins.YellowColorView'
    Controls(32)=YellowColorView
    OnDraw=InternalDraw
}