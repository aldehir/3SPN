/*******************************************************************************
 * AM_HUD generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AM_HUD extends HudCDeathmatch
    config(User)
    transient;

var Texture TeamTex;
var Material TrackedPlayer;
var int OldRoundTime;
var Misc_Player MyOwner;

function DisplayMessages(Canvas C)
{
    // End:0x22
    if(bShowScoreBoard || bShowLocalStats)
    {
        ConsoleMessagePosY = 0.9950;
    }
    // End:0x2D
    else
    {
        ConsoleMessagePosY = default.ConsoleMessagePosY;
    }
    super(HUD).DisplayMessages(C);
    //return;    
}

exec function ShowStats()
{
    bShowLocalStats = !bShowLocalStats;
    Misc_Player(PlayerOwner).bFirstOpen = bShowLocalStats;
    //return;    
}

function Draw2DLocationDot(Canvas C, Vector loc, float OffsetX, float OffsetY, float ScaleX, float ScaleY)
{
    local Rotator Dir;
    local float Angle, Scaling;
    local Actor Start;

    // End:0x4D
    if(PlayerOwner.Pawn == none)
    {
        // End:0x3F
        if(PlayerOwner.ViewTarget != none)
        {
            Start = PlayerOwner.ViewTarget;
        }
        // End:0x4A
        else
        {
            Start = PlayerOwner;
        }
    }
    // End:0x61
    else
    {
        Start = PlayerOwner.Pawn;
    }
    Dir = rotator(loc - Start.Location);
    Angle = (float(int(float(Dir.Yaw - PlayerOwner.Rotation.Yaw)) & 65535) * 6.28320) / float(65536);
    C.Style = 5;
    C.SetPos((OffsetX * C.ClipX) + ((ScaleX * C.ClipX) * Sin(Angle)), (OffsetY * C.ClipY) - ((ScaleY * C.ClipY) * Cos(Angle)));
    Scaling = ((24.0 * C.ClipX) * (0.450 * HudScale)) / float(1600);
    C.DrawTile(LocationDot, Scaling, Scaling, 340.0, 432.0, 78.0, 78.0);
    //return;    
}

simulated function UpdateRankAndSpread(Canvas C)
{
    local int i;
    local float XL, YL, MaxNamePos;
    local int PosX, PosY;
    local float Scale;
    local string Name;
    local int listy, Space, NameY, NameX, Height, Width,
	    Enemies;

    local Misc_PRI PRI;

    // End:0x1B
    if(MyOwner == none)
    {
        MyOwner = Misc_Player(PlayerOwner);
    }
    listy = int((0.080 * HudScale) * C.ClipY);
    Space = int((0.0050 * HudScale) * C.ClipY);
    Scale = FMax(HudScale, 0.750);
    Height = int((C.ClipY * 0.02550) * Scale);
    Width = int((C.ClipX * 0.130) * Scale);
    NameX = int((C.ClipX * 0.0250) * Scale);
    MaxNamePos = 0.990 * float(Width - NameX);
    C.Font = GetFontSizeIndex(C, -3 + int(Scale * 1.250));
    C.StrLen("Test", XL, YL);
    NameY = int(float(int(float(Height) * 0.60)) - (YL * 0.50));
    PosX = int(C.ClipX * 0.990);
    i = 0;
    J0x193:
    // End:0x566 [Loop If]
    if(i < MyOwner.GameReplicationInfo.PRIArray.Length)
    {
        PRI = Misc_PRI(MyOwner.GameReplicationInfo.PRIArray[i]);
        // End:0x219
        if(((PRI == none) || PRI.bOutOfLives) || PRI == PlayerOwner.PlayerReplicationInfo)
        {
            // [Explicit Continue]
            goto J0x55C;
        }
        // End:0x23E
        if(!class'Misc_Player'.default.bShowTeamInfo || Enemies > 9)
        {
            // [Explicit Continue]
            goto J0x55C;
        }
        PosY = listy + ((Height + Space) * Enemies);
        C.SetPos(float(PosX - Width), float(PosY));
        C.DrawColor = default.BlackColor;
        C.DrawColor.A = 128;
        C.DrawTile(TeamTex, float(Width), float(Height), 168.0, 211.0, 166.0, 44.0);
        C.SetPos(float(PosX) - ((C.ClipX * 0.01950) * Scale), float(PosY));
        C.DrawColor = default.WhiteColor;
        C.DrawTile(TeamTex, (C.ClipX * 0.01950) * Scale, (C.ClipY * 0.0260) * Scale, 119.0, 258.0, 54.0, 55.0);
        // End:0x3B5
        if(class'TAM_Scoreboard'.default.bEnableColoredNamesOnHUD)
        {
            Name = PRI.GetColoredName();
        }
        // End:0x3C9
        else
        {
            Name = PRI.PlayerName;
        }
        C.TextSize(Name, XL, YL);
        XL = float(Min(int(XL), int(MaxNamePos)));
        C.DrawColor = WhiteColor;
        C.SetPos((float(PosX) - XL) - float(NameX), float(PosY + NameY));
        class'Misc_Util'.static.DrawTextClipped(C, Name, MaxNamePos);
        C.DrawColor = class'Misc_Player'.default.RedOrEnemy * 2.50;
        C.DrawColor.A = byte(255);
        C.SetPos(float(PosX) - ((0.01650 * Scale) * C.ClipX), float(PosY) + ((0.00350 * Scale) * C.ClipY));
        C.DrawTile(TeamTex, (C.ClipX * 0.01650) * Scale, (C.ClipY * 0.01850) * Scale, 340.0, 432.0, 78.0, 78.0);
        ++ Enemies;
        J0x55C:
        ++ i;
        // [Loop Continue]
        goto J0x193;
    }
    //return;    
}

function CheckCountdown(GameReplicationInfo GRI)
{
    local TAM_GRI G;

    G = TAM_GRI(GRI);
    // End:0x84
    if(((((G == none) || G.MinsPerRound == 0) || G.RoundTime == 0) || G.RoundTime == OldRoundTime) || GRI.Winner != none)
    {
        super.CheckCountdown(GRI);
        return;
    }
    OldRoundTime = G.RoundTime;
    // End:0xBD
    if((OldRoundTime > 30) && G.MinsPerRound < 2)
    {
        return;
    }
    // End:0xE6
    if(OldRoundTime == 60)
    {
        PlayerOwner.PlayStatusAnnouncement(LongCountName[3], 1, true);
    }
    // End:0x171
    else
    {
        // End:0x10F
        if(OldRoundTime == 30)
        {
            PlayerOwner.PlayStatusAnnouncement(LongCountName[4], 1, true);
        }
        // End:0x171
        else
        {
            // End:0x138
            if(OldRoundTime == 20)
            {
                PlayerOwner.PlayStatusAnnouncement(LongCountName[5], 1, true);
            }
            // End:0x171
            else
            {
                // End:0x171
                if((OldRoundTime <= 5) && OldRoundTime > 0)
                {
                    PlayerOwner.PlayStatusAnnouncement(CountDownName[OldRoundTime - 1], 1, true);
                }
            }
        }
    }
    //return;    
}

simulated function DrawTimer(Canvas C)
{
    local TAM_GRI GRI;
    local int Minutes, Hours, Seconds;

    GRI = TAM_GRI(PlayerOwner.GameReplicationInfo);
    // End:0x26
    if(GRI == none)
    {
        return;
    }
    // End:0x9C
    if(GRI.MinsPerRound > 0)
    {
        Seconds = GRI.RoundTime;
        // End:0x99
        if((GRI.TimeLimit > 0) && GRI.RoundTime > GRI.RemainingTime)
        {
            Seconds = GRI.RemainingTime;
        }
    }
    // End:0xDB
    else
    {
        // End:0xC7
        if(GRI.TimeLimit > 0)
        {
            Seconds = GRI.RemainingTime;
        }
        // End:0xDB
        else
        {
            Seconds = GRI.ElapsedTime;
        }
    }
    TimerBackground.Tints[TeamIndex] = HudColorBlack;
    TimerBackground.Tints[TeamIndex].A = 150;
    DrawSpriteWidget(C, TimerBackground);
    DrawSpriteWidget(C, TimerBackgroundDisc);
    DrawSpriteWidget(C, TimerIcon);
    TimerMinutes.OffsetX = default.TimerMinutes.OffsetX - 80;
    TimerSeconds.OffsetX = default.TimerSeconds.OffsetX - 80;
    TimerDigitSpacer[0].OffsetX = default.TimerDigitSpacer[0].OffsetX;
    TimerDigitSpacer[1].OffsetX = default.TimerDigitSpacer[1].OffsetX;
    // End:0x2AD
    if(Seconds > 3600)
    {
        Hours = Seconds / 3600;
        Seconds -= (Hours * 3600);
        DrawNumericWidget(C, TimerHours, DigitsBig);
        TimerHours.Value = Hours;
        // End:0x22F
        if(Hours > 9)
        {
            TimerMinutes.OffsetX = default.TimerMinutes.OffsetX;
            TimerSeconds.OffsetX = default.TimerSeconds.OffsetX;
        }
        // End:0x29B
        else
        {
            TimerMinutes.OffsetX = default.TimerMinutes.OffsetX - 40;
            TimerSeconds.OffsetX = default.TimerSeconds.OffsetX - 40;
            TimerDigitSpacer[0].OffsetX = default.TimerDigitSpacer[0].OffsetX - 32;
            TimerDigitSpacer[1].OffsetX = default.TimerDigitSpacer[1].OffsetX - 32;
        }
        DrawSpriteWidget(C, TimerDigitSpacer[0]);
    }
    DrawSpriteWidget(C, TimerDigitSpacer[1]);
    Minutes = Seconds / 60;
    Seconds -= (Minutes * 60);
    TimerMinutes.Value = Min(Minutes, 60);
    TimerSeconds.Value = Min(Seconds, 60);
    DrawNumericWidget(C, TimerMinutes, DigitsBig);
    DrawNumericWidget(C, TimerSeconds, DigitsBig);
    //return;    
}

defaultproperties
{
    TeamTex=Texture'HUDContent.Generic.HUD'
    TrackedPlayer=Texture'textures.chair'
}