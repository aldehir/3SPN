/*******************************************************************************
 * Misc_ServerLink generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Misc_ServerLink extends BufferedTCPLink
    hidecategories(Movement,Collision,Lighting,LightColor,Karma,Force)
    transient;

var string ServerAddress;
var int ServerPort;
var string AccountName;
var string AccountPassword;
var IpAddr ServerIpAddr;
var array<string> SendBuffer;
var bool SendBufferActive;
var delegate<OnReceivedStats> __OnReceivedStats__Delegate;
var delegate<OnReceivedListName> __OnReceivedListName__Delegate;
var delegate<OnReceivedListIdx> __OnReceivedListIdx__Delegate;

delegate OnReceivedStats(int PlayerIndex, float Rank, float AvgPPR)
{
    //return;    
}

delegate OnReceivedListName(string ListName)
{
    //return;    
}

delegate OnReceivedListIdx(int PlayerIndex, string PlayerName, string PlayerStat)
{
    //return;    
}

function AddToBuffer(string Data)
{
    local int i;

    i = SendBuffer.Length;
    SendBuffer.Length = i + 1;
    SendBuffer[i] = Data;
    //return;    
}

function FlushBuffer()
{
    local int i;

    // End:0x0E
    if(SendBufferActive == false)
    {
        return;
    }
    i = 0;
    J0x15:
    // End:0x40 [Loop If]
    if(i < SendBuffer.Length)
    {
        SendBufferedData(SendBuffer[i]);
        ++ i;
        // [Loop Continue]
        goto J0x15;
    }
    SendBuffer.Length = 0;
    //return;    
}

function RegisterGame(string GameTime, string MapName, string TeamScores)
{
    AddToBuffer(((((("REGISTER_GAME " $ GameTime) $ " ") $ MapName) $ " ") $ TeamScores) $ LF);
    //return;    
}

function RegisterStats(string GameTime, string PlayerName, string PlayerHash, int TeamIdx, int Rounds, float Score, int Kills, int Deaths, int Thaws, int Git)
{
    AddToBuffer(((((((((((((((((((("REGISTER_STATS " $ GameTime) $ " ") $ PlayerName) $ " ") $ PlayerHash) $ " ") $ string(TeamIdx)) $ " ") $ string(Rounds)) $ " ") $ string(Score)) $ " ") $ string(Kills)) $ " ") $ string(Deaths)) $ " ") $ string(Thaws)) $ " ") $ string(Git)) $ LF);
    //return;    
}

function RequestStats(int PlayerIndex, string PlayerHash)
{
    AddToBuffer(((("GET_STATS " $ string(PlayerIndex)) $ " ") $ PlayerHash) $ LF);
    //return;    
}

function RequestStatsList()
{
    AddToBuffer("GET_STATS_LIST" $ LF);
    //return;    
}

function PostBeginPlay()
{
    super(Actor).PostBeginPlay();
    SendBufferActive = false;
    Disable('Tick');
    //return;    
}

function DestroyLink()
{
    // End:0x33
    if(IsConnected())
    {
        FlushBuffer();
        SendBufferedData("LOGOUT" $ LF);
        DoBufferQueueIO();
        Close();
    }
    // End:0x36
    else
    {
        Destroy();
    }
    //return;    
}

function Connect(string ServerAddressIn, int ServerPortIn, string AccountNameIn, string AccountPasswordIn)
{
    ServerAddress = ServerAddressIn;
    ServerPort = ServerPortIn;
    AccountName = AccountNameIn;
    AccountPassword = AccountPasswordIn;
    LogInternal((((("ServerLink: Connect: " $ ServerAddress) $ ":") $ string(ServerPort)) $ " as ") $ AccountNameIn);
    ResetBuffer();
    ServerIpAddr.Port = ServerPort;
    Resolve(ServerAddress);
    //return;    
}

function Resolved(IpAddr Addr)
{
    ServerIpAddr.Addr = Addr.Addr;
    // End:0x58
    if(ServerIpAddr.Addr == 0)
    {
        LogInternal("ServerLink: Unable to resolve server address.");
        return;
    }
    LogInternal((("ServerLink: Server resolved " $ ServerAddress) $ ":") $ string(ServerIpAddr.Port));
    // End:0xCE
    if((BindPort()) == 0)
    {
        LogInternal("ServerLink: Unable to bind the local port.");
        return;
    }
    Open(ServerIpAddr);
    //return;    
}

function ResolveFailed()
{
    LogInternal("ServerLink: Unable to resolve server address.");
    DestroyLink();
    //return;    
}

event Opened()
{
    LogInternal("ServerLink: Connection open.");
    SendBufferedData(((("LOGIN " $ AccountName) $ " ") $ AccountPassword) $ LF);
    SendBufferActive = true;
    Enable('Tick');
    //return;    
}

event Closed()
{
    LogInternal("ServerLink: Closing link.");
    SendBufferActive = false;
    DestroyLink();
    //return;    
}

function Tick(float DeltaTime)
{
    local string Line;
    local array<string> Params;

    FlushBuffer();
    DoBufferQueueIO();
    // End:0x55
    if(ReadBufferedLine(Line))
    {
        LogInternal("ServerLink: Received: " $ Line);
        UnresolvedNativeFunction_240(Line, " ", Params);
        HandleMessage(Params);
    }
    super(Actor).Tick(DeltaTime);
    //return;    
}

function HandleMessage(array<string> Params)
{
    local int PlayerIndex;
    local float Rank, AvgPPR;
    local string ListName, PlayerName, PlayerStat;

    // End:0x40
    if(Params.Length == 0)
    {
        LogInternal("ServerLink: No parameters for incoming message");
        return;
    }
    // End:0xF2
    if(Params[0] == "STATS_UPDATE")
    {
        // End:0xA7
        if(Params.Length < 4)
        {
            LogInternal("ServerLink: Incorrect number of arguments for STATS_UPDATE");
            return;
        }
        PlayerIndex = int(Params[1]);
        Rank = float(Params[2]);
        AvgPPR = float(Params[3]);
        OnReceivedStats(PlayerIndex, Rank, AvgPPR);
    }
    // End:0x215
    else
    {
        // End:0x176
        if(Params[0] == "SL_NAME")
        {
            // End:0x14F
            if(Params.Length < 2)
            {
                LogInternal("ServerLink: Incorrect number of arguments for SL_NAME");
                return;
            }
            ListName = Repl(Params[1], "_", " ");
            OnReceivedListName(ListName);
        }
        // End:0x215
        else
        {
            // End:0x215
            if(Params[0] == "SL_IDX")
            {
                // End:0x1D1
                if(Params.Length < 4)
                {
                    LogInternal("ServerLink: Incorrect number of arguments for SL_IDX");
                    return;
                }
                PlayerIndex = int(Params[1]);
                PlayerName = Params[2];
                PlayerStat = Params[3];
                OnReceivedListIdx(PlayerIndex, PlayerName, PlayerStat);
            }
        }
    }
    //return;    
}
