/*******************************************************************************
 * NewNet_AssaultFire generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class NewNet_AssaultFire extends WeaponFire_Assault
    dependson(WeaponFire_Assault);

var float PingDT;
var bool bUseEnhancedNetCode;

function DoTrace(Vector Start, Rotator Dir)
{
    local Vector X, End, HitLocation, HitNormal, RefNormal;

    local Actor Other;
    local int Damage;
    local bool bDoReflect;
    local int ReflectNum;
    local Vector PawnHitLocation;

    // End:0x1D
    if(!bUseEnhancedNetCode)
    {
        super(InstantFire).DoTrace(Start, Dir);
        return;
    }
    MaxRange();
    ReflectNum = 0;
    TimeTravel(PingDT);
    J0x35:
    // End:0x3E4 [Loop If]
    if(true)
    {
        bDoReflect = false;
        X = vector(Dir);
        End = Start + (TraceRange * X);
        // End:0xA0
        if(PingDT <= 0.0)
        {
            Other = Weapon.Trace(HitLocation, HitNormal, End, Start, true);
        }
        // End:0xC0
        else
        {
            Other = DoTimeTravelTrace(HitLocation, HitNormal, End, Start);
        }
        // End:0x136
        if((Other != none) && Other.IsA('NewNet_PawnCollisionCopy'))
        {
            PawnHitLocation = (HitLocation + NewNet_PawnCollisionCopy(Other).CopiedPawn.Location) - Other.Location;
            Other = NewNet_PawnCollisionCopy(Other).CopiedPawn;
        }
        // End:0x141
        else
        {
            PawnHitLocation = HitLocation;
        }
        // End:0x341
        if((Other != none) && (Other != Instigator) || ReflectNum > 0)
        {
            // End:0x1DA
            if((bReflective && Other.IsA('xPawn')) && xPawn(Other).CheckReflect(PawnHitLocation, RefNormal, int(float(DamageMin) * 0.250)))
            {
                bDoReflect = true;
                HitNormal = vect(0.0, 0.0, 0.0);
            }
            // End:0x33E
            else
            {
                // End:0x2F9
                if(!Other.bWorldGeometry)
                {
                    Damage = DamageMin;
                    // End:0x22E
                    if((DamageMin != DamageMax) && FRand() > 0.50)
                    {
                        Damage += Rand((1 + DamageMax) - DamageMin);
                    }
                    Damage = int(float(Damage) * DamageAtten);
                    // End:0x2B4
                    if(Other.IsA('Vehicle') || !Other.IsA('Pawn') && !Other.IsA('HitScanBlockingVolume'))
                    {
                        WeaponAttachment(Weapon.ThirdPersonActor).UpdateHit(Other, PawnHitLocation, HitNormal);
                    }
                    Other.TakeDamage(Damage, Instigator, PawnHitLocation, Momentum * X, DamageType);
                    HitNormal = vect(0.0, 0.0, 0.0);
                }
                // End:0x33E
                else
                {
                    // End:0x33E
                    if(WeaponAttachment(Weapon.ThirdPersonActor) != none)
                    {
                        WeaponAttachment(Weapon.ThirdPersonActor).UpdateHit(Other, PawnHitLocation, HitNormal);
                    }
                }
            }
        }
        // End:0x38B
        else
        {
            HitLocation = End;
            HitNormal = vect(0.0, 0.0, 0.0);
            WeaponAttachment(Weapon.ThirdPersonActor).UpdateHit(Other, PawnHitLocation, HitNormal);
        }
        SpawnBeamEffect(Start, Dir, HitLocation, HitNormal, ReflectNum);
        // End:0x3DE
        if(bDoReflect && ++ ReflectNum < 4)
        {
            Start = HitLocation;
            Dir = rotator(RefNormal);
        }
        // End:0x3E1
        else
        {
            // [Explicit Break]
            goto J0x3E4;
        }
        J0x3E4:
        // [Loop Continue]
        goto J0x35;
    }
    UnTimeTravel();
    //return;    
}

function Actor DoTimeTravelTrace(out Vector HitLocation, out Vector HitNormal, Vector End, Vector Start)
{
    local Actor Other;
    local bool bFoundPCC;
    local Vector NewEnd, WorldHitNormal, WorldHitLocation, PCCHitNormal, PCCHitLocation;

    local NewNet_PawnCollisionCopy PCC, returnPCC;

    // End:0x8D
    foreach Weapon.TraceActors(class'Actor', Other, WorldHitLocation, WorldHitNormal, End, Start)
    {
        // End:0x85
        if(((Other.bBlockActors || Other.bProjTarget) || Other.bWorldGeometry) && !class'TAM_Mutator'.static.IsPredicted(Other))
        {
            // End:0x8D
            break;
        }
        Other = none;        
    }    
    // End:0xA7
    if(Other != none)
    {
        NewEnd = WorldHitLocation;
    }
    // End:0xB2
    else
    {
        NewEnd = End;
    }
    // End:0x131
    foreach Weapon.TraceActors(class'NewNet_PawnCollisionCopy', PCC, PCCHitLocation, PCCHitNormal, NewEnd, Start)
    {
        // End:0x130
        if(((PCC != none) && PCC.CopiedPawn != none) && PCC.CopiedPawn != Instigator)
        {
            bFoundPCC = true;
            returnPCC = PCC;
            // End:0x131
            break;
        }        
    }    
    // End:0x15A
    if(bFoundPCC)
    {
        HitLocation = PCCHitLocation;
        HitNormal = PCCHitNormal;
        return returnPCC;
    }
    // End:0x176
    else
    {
        HitLocation = WorldHitLocation;
        HitNormal = WorldHitNormal;
        return Other;
    }
    //return;    
}

function TimeTravel(float Delta)
{
    local NewNet_PawnCollisionCopy PCC;

    // End:0x45
    if(NewNet_AssaultRifle(Weapon).M == none)
    {
        // End:0x44
        foreach Weapon.DynamicActors(class'TAM_Mutator', NewNet_AssaultRifle(Weapon).M)
        {
            // End:0x44
            break;            
        }        
    }
    PCC = NewNet_AssaultRifle(Weapon).M.PCC;
    J0x67:
    // End:0x9D [Loop If]
    if(PCC != none)
    {
        PCC.TimeTravelPawn(Delta);
        PCC = PCC.Next;
        // [Loop Continue]
        goto J0x67;
    }
    //return;    
}

function UnTimeTravel()
{
    local NewNet_PawnCollisionCopy PCC;

    PCC = NewNet_AssaultRifle(Weapon).M.PCC;
    J0x22:
    // End:0x53 [Loop If]
    if(PCC != none)
    {
        PCC.TurnOffCollision();
        PCC = PCC.Next;
        // [Loop Continue]
        goto J0x22;
    }
    //return;    
}
